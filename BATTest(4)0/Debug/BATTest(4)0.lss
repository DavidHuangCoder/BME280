
BATTest(4)0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006194  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000008c  20000000  00006194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  2000008c  00006220  0002008c  2**2
                  ALLOC
  3 .stack        00002000  200000e8  0000627c  0002008c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001432a  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020c9  00000000  00000000  00034437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005bde  00000000  00000000  00036500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ef8  00000000  00000000  0003c0de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd8  00000000  00000000  0003cfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000110a5  00000000  00000000  0003ddae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c6b2  00000000  00000000  0004ee53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00054146  00000000  00000000  0005b505  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003cfc  00000000  00000000  000af64c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 20 00 20 d5 0f 00 00 69 10 00 00 69 10 00 00     . . ....i...i...
	...
      2c:	69 10 00 00 00 00 00 00 00 00 00 00 69 10 00 00     i...........i...
      3c:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...
      4c:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...
      5c:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...
      6c:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...
      7c:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...
	...
      94:	69 10 00 00 69 10 00 00 69 10 00 00 69 10 00 00     i...i...i...i...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000008c 	.word	0x2000008c
      c4:	00000000 	.word	0x00000000
      c8:	00006194 	.word	0x00006194

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000090 	.word	0x20000090
      f8:	00006194 	.word	0x00006194
      fc:	00006194 	.word	0x00006194
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     104:	b580      	push	{r7, lr}
     106:	af00      	add	r7, sp, #0
	system_init();
     108:	4b02      	ldr	r3, [pc, #8]	; (114 <atmel_start_init+0x10>)
     10a:	4798      	blx	r3
}
     10c:	46c0      	nop			; (mov r8, r8)
     10e:	46bd      	mov	sp, r7
     110:	bd80      	pop	{r7, pc}
     112:	46c0      	nop			; (mov r8, r8)
     114:	00001ad5 	.word	0x00001ad5

00000118 <bmp280_read_register>:
#define dig_H5 bmp280->H5
#define dig_H6 bmp280->H6


uint8_t bmp280_read_register(struct i2c_m_sync_desc *const i2c, uint8_t reg_addr)
{
     118:	b580      	push	{r7, lr}
     11a:	b084      	sub	sp, #16
     11c:	af00      	add	r7, sp, #0
     11e:	6078      	str	r0, [r7, #4]
     120:	000a      	movs	r2, r1
     122:	1cfb      	adds	r3, r7, #3
     124:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data;
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(i2c, &I2C_0_io);
     126:	2308      	movs	r3, #8
     128:	18fa      	adds	r2, r7, r3
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	0011      	movs	r1, r2
     12e:	0018      	movs	r0, r3
     130:	4b10      	ldr	r3, [pc, #64]	; (174 <bmp280_read_register+0x5c>)
     132:	4798      	blx	r3
	i2c_m_sync_enable(i2c);
     134:	687b      	ldr	r3, [r7, #4]
     136:	0018      	movs	r0, r3
     138:	4b0f      	ldr	r3, [pc, #60]	; (178 <bmp280_read_register+0x60>)
     13a:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(i2c, 0x76, I2C_M_SEVEN);
     13c:	2380      	movs	r3, #128	; 0x80
     13e:	011a      	lsls	r2, r3, #4
     140:	687b      	ldr	r3, [r7, #4]
     142:	2176      	movs	r1, #118	; 0x76
     144:	0018      	movs	r0, r3
     146:	4b0d      	ldr	r3, [pc, #52]	; (17c <bmp280_read_register+0x64>)
     148:	4798      	blx	r3
	io_write(I2C_0_io, (uint8_t *)&reg_addr, 1);
     14a:	68bb      	ldr	r3, [r7, #8]
     14c:	1cf9      	adds	r1, r7, #3
     14e:	2201      	movs	r2, #1
     150:	0018      	movs	r0, r3
     152:	4b0b      	ldr	r3, [pc, #44]	; (180 <bmp280_read_register+0x68>)
     154:	4798      	blx	r3
	io_read(I2C_0_io,(uint8_t*)&reg_data,1);
     156:	68bb      	ldr	r3, [r7, #8]
     158:	220f      	movs	r2, #15
     15a:	18b9      	adds	r1, r7, r2
     15c:	2201      	movs	r2, #1
     15e:	0018      	movs	r0, r3
     160:	4b08      	ldr	r3, [pc, #32]	; (184 <bmp280_read_register+0x6c>)
     162:	4798      	blx	r3
	
	return reg_data;
     164:	230f      	movs	r3, #15
     166:	18fb      	adds	r3, r7, r3
     168:	781b      	ldrb	r3, [r3, #0]
}
     16a:	0018      	movs	r0, r3
     16c:	46bd      	mov	sp, r7
     16e:	b004      	add	sp, #16
     170:	bd80      	pop	{r7, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	00001d19 	.word	0x00001d19
     178:	00001cb9 	.word	0x00001cb9
     17c:	00001cd9 	.word	0x00001cd9
     180:	00001d39 	.word	0x00001d39
     184:	00001d8d 	.word	0x00001d8d

00000188 <bmp280_write_register>:

void bmp280_write_register(struct i2c_m_sync_desc *const i2c, uint8_t reg_addr, uint8_t reg_data)
{
     188:	b580      	push	{r7, lr}
     18a:	b084      	sub	sp, #16
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
     190:	0008      	movs	r0, r1
     192:	0011      	movs	r1, r2
     194:	1cfb      	adds	r3, r7, #3
     196:	1c02      	adds	r2, r0, #0
     198:	701a      	strb	r2, [r3, #0]
     19a:	1cbb      	adds	r3, r7, #2
     19c:	1c0a      	adds	r2, r1, #0
     19e:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[2] = {reg_addr,reg_data};
     1a0:	230c      	movs	r3, #12
     1a2:	18fb      	adds	r3, r7, r3
     1a4:	1cfa      	adds	r2, r7, #3
     1a6:	7812      	ldrb	r2, [r2, #0]
     1a8:	701a      	strb	r2, [r3, #0]
     1aa:	230c      	movs	r3, #12
     1ac:	18fb      	adds	r3, r7, r3
     1ae:	1cba      	adds	r2, r7, #2
     1b0:	7812      	ldrb	r2, [r2, #0]
     1b2:	705a      	strb	r2, [r3, #1]
    struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(i2c, &I2C_0_io);
     1b4:	2308      	movs	r3, #8
     1b6:	18fa      	adds	r2, r7, r3
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	0011      	movs	r1, r2
     1bc:	0018      	movs	r0, r3
     1be:	4b0c      	ldr	r3, [pc, #48]	; (1f0 <bmp280_write_register+0x68>)
     1c0:	4798      	blx	r3
	i2c_m_sync_enable(i2c);
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	0018      	movs	r0, r3
     1c6:	4b0b      	ldr	r3, [pc, #44]	; (1f4 <bmp280_write_register+0x6c>)
     1c8:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(i2c, 0x76, I2C_M_SEVEN);
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	011a      	lsls	r2, r3, #4
     1ce:	687b      	ldr	r3, [r7, #4]
     1d0:	2176      	movs	r1, #118	; 0x76
     1d2:	0018      	movs	r0, r3
     1d4:	4b08      	ldr	r3, [pc, #32]	; (1f8 <bmp280_write_register+0x70>)
     1d6:	4798      	blx	r3
	io_write(I2C_0_io, (uint8_t *)&tx_data, 2);
     1d8:	68bb      	ldr	r3, [r7, #8]
     1da:	220c      	movs	r2, #12
     1dc:	18b9      	adds	r1, r7, r2
     1de:	2202      	movs	r2, #2
     1e0:	0018      	movs	r0, r3
     1e2:	4b06      	ldr	r3, [pc, #24]	; (1fc <bmp280_write_register+0x74>)
     1e4:	4798      	blx	r3
}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	46bd      	mov	sp, r7
     1ea:	b004      	add	sp, #16
     1ec:	bd80      	pop	{r7, pc}
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	00001d19 	.word	0x00001d19
     1f4:	00001cb9 	.word	0x00001cb9
     1f8:	00001cd9 	.word	0x00001cd9
     1fc:	00001d39 	.word	0x00001d39

00000200 <bmp280_init>:
* 温度和气压的采样精度设为最低，
* 滤波器系数设为最低，
* 并且进入sleep mode。
*/
struct bmp280 *bmp280_init(struct i2c_m_sync_desc *const i2c)
{
     200:	b590      	push	{r4, r7, lr}
     202:	b087      	sub	sp, #28
     204:	af00      	add	r7, sp, #0
     206:	6078      	str	r0, [r7, #4]
	uint8_t bmp280_id;
	uint8_t lsb, msb;
	uint8_t ctrlmeas_reg, config_reg;
	struct bmp280 *bmp280;
	
	bmp280_id = bmp280_read_register(i2c, BMP280_CHIPID_REG);
     208:	2317      	movs	r3, #23
     20a:	18fc      	adds	r4, r7, r3
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	21d0      	movs	r1, #208	; 0xd0
     210:	0018      	movs	r0, r3
     212:	4bfe      	ldr	r3, [pc, #1016]	; (60c <bmp280_init+0x40c>)
     214:	4798      	blx	r3
     216:	0003      	movs	r3, r0
     218:	7023      	strb	r3, [r4, #0]
	if(bmp280_id == 0x60) {
     21a:	2317      	movs	r3, #23
     21c:	18fb      	adds	r3, r7, r3
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	2b60      	cmp	r3, #96	; 0x60
     222:	d000      	beq.n	226 <bmp280_init+0x26>
     224:	e273      	b.n	70e <bmp280_init+0x50e>
		bmp280 = malloc(sizeof(struct bmp280));
     226:	2034      	movs	r0, #52	; 0x34
     228:	4bf9      	ldr	r3, [pc, #996]	; (610 <bmp280_init+0x410>)
     22a:	4798      	blx	r3
     22c:	0003      	movs	r3, r0
     22e:	613b      	str	r3, [r7, #16]
		
		bmp280->i2c = i2c;
     230:	693b      	ldr	r3, [r7, #16]
     232:	687a      	ldr	r2, [r7, #4]
     234:	601a      	str	r2, [r3, #0]
		bmp280->mode = BMP280_NORMAL_MODE;
     236:	693b      	ldr	r3, [r7, #16]
     238:	222d      	movs	r2, #45	; 0x2d
     23a:	2111      	movs	r1, #17
     23c:	5499      	strb	r1, [r3, r2]
		bmp280->t_sb = BMP280_T_SB1;
     23e:	693b      	ldr	r3, [r7, #16]
     240:	222c      	movs	r2, #44	; 0x2c
     242:	2100      	movs	r1, #0
     244:	5499      	strb	r1, [r3, r2]
		bmp280->p_oversampling = BMP280_P_MODE_1;
     246:	693b      	ldr	r3, [r7, #16]
     248:	222f      	movs	r2, #47	; 0x2f
     24a:	2101      	movs	r1, #1
     24c:	5499      	strb	r1, [r3, r2]
		bmp280->t_oversampling = BMP280_T_MODE_1;
     24e:	693b      	ldr	r3, [r7, #16]
     250:	222e      	movs	r2, #46	; 0x2e
     252:	2101      	movs	r1, #1
     254:	5499      	strb	r1, [r3, r2]
		bmp280->filter_coefficient = BMP280_FILTER_MODE_1;
     256:	693b      	ldr	r3, [r7, #16]
     258:	2230      	movs	r2, #48	; 0x30
     25a:	2101      	movs	r1, #1
     25c:	5499      	strb	r1, [r3, r2]
		} else {
		return NULL;
	}
	
	/* read the temperature calibration parameters */
	lsb = bmp280_read_register(i2c, BMP280_DIG_T1_LSB_REG);
     25e:	230f      	movs	r3, #15
     260:	18fc      	adds	r4, r7, r3
     262:	687b      	ldr	r3, [r7, #4]
     264:	2188      	movs	r1, #136	; 0x88
     266:	0018      	movs	r0, r3
     268:	4be8      	ldr	r3, [pc, #928]	; (60c <bmp280_init+0x40c>)
     26a:	4798      	blx	r3
     26c:	0003      	movs	r3, r0
     26e:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_T1_MSB_REG);
     270:	230e      	movs	r3, #14
     272:	18fc      	adds	r4, r7, r3
     274:	687b      	ldr	r3, [r7, #4]
     276:	2189      	movs	r1, #137	; 0x89
     278:	0018      	movs	r0, r3
     27a:	4be4      	ldr	r3, [pc, #912]	; (60c <bmp280_init+0x40c>)
     27c:	4798      	blx	r3
     27e:	0003      	movs	r3, r0
     280:	7023      	strb	r3, [r4, #0]
	dig_T1 = msb << 8 | lsb;
     282:	230e      	movs	r3, #14
     284:	18fb      	adds	r3, r7, r3
     286:	781b      	ldrb	r3, [r3, #0]
     288:	021b      	lsls	r3, r3, #8
     28a:	b21a      	sxth	r2, r3
     28c:	230f      	movs	r3, #15
     28e:	18fb      	adds	r3, r7, r3
     290:	781b      	ldrb	r3, [r3, #0]
     292:	b21b      	sxth	r3, r3
     294:	4313      	orrs	r3, r2
     296:	b21b      	sxth	r3, r3
     298:	b29a      	uxth	r2, r3
     29a:	693b      	ldr	r3, [r7, #16]
     29c:	809a      	strh	r2, [r3, #4]
	lsb = bmp280_read_register(i2c, BMP280_DIG_T2_LSB_REG);
     29e:	230f      	movs	r3, #15
     2a0:	18fc      	adds	r4, r7, r3
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	218a      	movs	r1, #138	; 0x8a
     2a6:	0018      	movs	r0, r3
     2a8:	4bd8      	ldr	r3, [pc, #864]	; (60c <bmp280_init+0x40c>)
     2aa:	4798      	blx	r3
     2ac:	0003      	movs	r3, r0
     2ae:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_T2_MSB_REG);
     2b0:	230e      	movs	r3, #14
     2b2:	18fc      	adds	r4, r7, r3
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	218b      	movs	r1, #139	; 0x8b
     2b8:	0018      	movs	r0, r3
     2ba:	4bd4      	ldr	r3, [pc, #848]	; (60c <bmp280_init+0x40c>)
     2bc:	4798      	blx	r3
     2be:	0003      	movs	r3, r0
     2c0:	7023      	strb	r3, [r4, #0]
	dig_T2 = msb << 8 | lsb;
     2c2:	230e      	movs	r3, #14
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	021b      	lsls	r3, r3, #8
     2ca:	b21a      	sxth	r2, r3
     2cc:	230f      	movs	r3, #15
     2ce:	18fb      	adds	r3, r7, r3
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	b21b      	sxth	r3, r3
     2d4:	4313      	orrs	r3, r2
     2d6:	b21a      	sxth	r2, r3
     2d8:	693b      	ldr	r3, [r7, #16]
     2da:	80da      	strh	r2, [r3, #6]
	lsb = bmp280_read_register(i2c, BMP280_DIG_T3_LSB_REG);
     2dc:	230f      	movs	r3, #15
     2de:	18fc      	adds	r4, r7, r3
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	218c      	movs	r1, #140	; 0x8c
     2e4:	0018      	movs	r0, r3
     2e6:	4bc9      	ldr	r3, [pc, #804]	; (60c <bmp280_init+0x40c>)
     2e8:	4798      	blx	r3
     2ea:	0003      	movs	r3, r0
     2ec:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_T3_MSB_REG);
     2ee:	230e      	movs	r3, #14
     2f0:	18fc      	adds	r4, r7, r3
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	218d      	movs	r1, #141	; 0x8d
     2f6:	0018      	movs	r0, r3
     2f8:	4bc4      	ldr	r3, [pc, #784]	; (60c <bmp280_init+0x40c>)
     2fa:	4798      	blx	r3
     2fc:	0003      	movs	r3, r0
     2fe:	7023      	strb	r3, [r4, #0]
	dig_T3 = msb << 8 | lsb;
     300:	230e      	movs	r3, #14
     302:	18fb      	adds	r3, r7, r3
     304:	781b      	ldrb	r3, [r3, #0]
     306:	021b      	lsls	r3, r3, #8
     308:	b21a      	sxth	r2, r3
     30a:	230f      	movs	r3, #15
     30c:	18fb      	adds	r3, r7, r3
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	b21b      	sxth	r3, r3
     312:	4313      	orrs	r3, r2
     314:	b21a      	sxth	r2, r3
     316:	693b      	ldr	r3, [r7, #16]
     318:	811a      	strh	r2, [r3, #8]
	
	/* read the pressure calibration parameters */
	lsb = bmp280_read_register(i2c, BMP280_DIG_P1_LSB_REG);
     31a:	230f      	movs	r3, #15
     31c:	18fc      	adds	r4, r7, r3
     31e:	687b      	ldr	r3, [r7, #4]
     320:	218e      	movs	r1, #142	; 0x8e
     322:	0018      	movs	r0, r3
     324:	4bb9      	ldr	r3, [pc, #740]	; (60c <bmp280_init+0x40c>)
     326:	4798      	blx	r3
     328:	0003      	movs	r3, r0
     32a:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P1_MSB_REG);
     32c:	230e      	movs	r3, #14
     32e:	18fc      	adds	r4, r7, r3
     330:	687b      	ldr	r3, [r7, #4]
     332:	218f      	movs	r1, #143	; 0x8f
     334:	0018      	movs	r0, r3
     336:	4bb5      	ldr	r3, [pc, #724]	; (60c <bmp280_init+0x40c>)
     338:	4798      	blx	r3
     33a:	0003      	movs	r3, r0
     33c:	7023      	strb	r3, [r4, #0]
	dig_P1 = msb << 8 | lsb;
     33e:	230e      	movs	r3, #14
     340:	18fb      	adds	r3, r7, r3
     342:	781b      	ldrb	r3, [r3, #0]
     344:	021b      	lsls	r3, r3, #8
     346:	b21a      	sxth	r2, r3
     348:	230f      	movs	r3, #15
     34a:	18fb      	adds	r3, r7, r3
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	b21b      	sxth	r3, r3
     350:	4313      	orrs	r3, r2
     352:	b21b      	sxth	r3, r3
     354:	b29a      	uxth	r2, r3
     356:	693b      	ldr	r3, [r7, #16]
     358:	815a      	strh	r2, [r3, #10]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P2_LSB_REG);
     35a:	230f      	movs	r3, #15
     35c:	18fc      	adds	r4, r7, r3
     35e:	687b      	ldr	r3, [r7, #4]
     360:	2190      	movs	r1, #144	; 0x90
     362:	0018      	movs	r0, r3
     364:	4ba9      	ldr	r3, [pc, #676]	; (60c <bmp280_init+0x40c>)
     366:	4798      	blx	r3
     368:	0003      	movs	r3, r0
     36a:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P2_MSB_REG);
     36c:	230e      	movs	r3, #14
     36e:	18fc      	adds	r4, r7, r3
     370:	687b      	ldr	r3, [r7, #4]
     372:	2191      	movs	r1, #145	; 0x91
     374:	0018      	movs	r0, r3
     376:	4ba5      	ldr	r3, [pc, #660]	; (60c <bmp280_init+0x40c>)
     378:	4798      	blx	r3
     37a:	0003      	movs	r3, r0
     37c:	7023      	strb	r3, [r4, #0]
	dig_P2 = msb << 8 | lsb;
     37e:	230e      	movs	r3, #14
     380:	18fb      	adds	r3, r7, r3
     382:	781b      	ldrb	r3, [r3, #0]
     384:	021b      	lsls	r3, r3, #8
     386:	b21a      	sxth	r2, r3
     388:	230f      	movs	r3, #15
     38a:	18fb      	adds	r3, r7, r3
     38c:	781b      	ldrb	r3, [r3, #0]
     38e:	b21b      	sxth	r3, r3
     390:	4313      	orrs	r3, r2
     392:	b21a      	sxth	r2, r3
     394:	693b      	ldr	r3, [r7, #16]
     396:	819a      	strh	r2, [r3, #12]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P3_LSB_REG);
     398:	230f      	movs	r3, #15
     39a:	18fc      	adds	r4, r7, r3
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	2192      	movs	r1, #146	; 0x92
     3a0:	0018      	movs	r0, r3
     3a2:	4b9a      	ldr	r3, [pc, #616]	; (60c <bmp280_init+0x40c>)
     3a4:	4798      	blx	r3
     3a6:	0003      	movs	r3, r0
     3a8:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P3_MSB_REG);
     3aa:	230e      	movs	r3, #14
     3ac:	18fc      	adds	r4, r7, r3
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	2193      	movs	r1, #147	; 0x93
     3b2:	0018      	movs	r0, r3
     3b4:	4b95      	ldr	r3, [pc, #596]	; (60c <bmp280_init+0x40c>)
     3b6:	4798      	blx	r3
     3b8:	0003      	movs	r3, r0
     3ba:	7023      	strb	r3, [r4, #0]
	dig_P3 = msb << 8 | lsb;
     3bc:	230e      	movs	r3, #14
     3be:	18fb      	adds	r3, r7, r3
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	021b      	lsls	r3, r3, #8
     3c4:	b21a      	sxth	r2, r3
     3c6:	230f      	movs	r3, #15
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	b21b      	sxth	r3, r3
     3ce:	4313      	orrs	r3, r2
     3d0:	b21a      	sxth	r2, r3
     3d2:	693b      	ldr	r3, [r7, #16]
     3d4:	81da      	strh	r2, [r3, #14]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P4_LSB_REG);
     3d6:	230f      	movs	r3, #15
     3d8:	18fc      	adds	r4, r7, r3
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2194      	movs	r1, #148	; 0x94
     3de:	0018      	movs	r0, r3
     3e0:	4b8a      	ldr	r3, [pc, #552]	; (60c <bmp280_init+0x40c>)
     3e2:	4798      	blx	r3
     3e4:	0003      	movs	r3, r0
     3e6:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P4_MSB_REG);
     3e8:	230e      	movs	r3, #14
     3ea:	18fc      	adds	r4, r7, r3
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	2195      	movs	r1, #149	; 0x95
     3f0:	0018      	movs	r0, r3
     3f2:	4b86      	ldr	r3, [pc, #536]	; (60c <bmp280_init+0x40c>)
     3f4:	4798      	blx	r3
     3f6:	0003      	movs	r3, r0
     3f8:	7023      	strb	r3, [r4, #0]
	dig_P4 = msb << 8 | lsb;
     3fa:	230e      	movs	r3, #14
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	021b      	lsls	r3, r3, #8
     402:	b21a      	sxth	r2, r3
     404:	230f      	movs	r3, #15
     406:	18fb      	adds	r3, r7, r3
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	b21b      	sxth	r3, r3
     40c:	4313      	orrs	r3, r2
     40e:	b21a      	sxth	r2, r3
     410:	693b      	ldr	r3, [r7, #16]
     412:	821a      	strh	r2, [r3, #16]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P5_LSB_REG);
     414:	230f      	movs	r3, #15
     416:	18fc      	adds	r4, r7, r3
     418:	687b      	ldr	r3, [r7, #4]
     41a:	2196      	movs	r1, #150	; 0x96
     41c:	0018      	movs	r0, r3
     41e:	4b7b      	ldr	r3, [pc, #492]	; (60c <bmp280_init+0x40c>)
     420:	4798      	blx	r3
     422:	0003      	movs	r3, r0
     424:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P5_MSB_REG);
     426:	230e      	movs	r3, #14
     428:	18fc      	adds	r4, r7, r3
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	2197      	movs	r1, #151	; 0x97
     42e:	0018      	movs	r0, r3
     430:	4b76      	ldr	r3, [pc, #472]	; (60c <bmp280_init+0x40c>)
     432:	4798      	blx	r3
     434:	0003      	movs	r3, r0
     436:	7023      	strb	r3, [r4, #0]
	dig_P5 = msb << 8 | lsb;
     438:	230e      	movs	r3, #14
     43a:	18fb      	adds	r3, r7, r3
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	021b      	lsls	r3, r3, #8
     440:	b21a      	sxth	r2, r3
     442:	230f      	movs	r3, #15
     444:	18fb      	adds	r3, r7, r3
     446:	781b      	ldrb	r3, [r3, #0]
     448:	b21b      	sxth	r3, r3
     44a:	4313      	orrs	r3, r2
     44c:	b21a      	sxth	r2, r3
     44e:	693b      	ldr	r3, [r7, #16]
     450:	825a      	strh	r2, [r3, #18]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P6_LSB_REG);
     452:	230f      	movs	r3, #15
     454:	18fc      	adds	r4, r7, r3
     456:	687b      	ldr	r3, [r7, #4]
     458:	2198      	movs	r1, #152	; 0x98
     45a:	0018      	movs	r0, r3
     45c:	4b6b      	ldr	r3, [pc, #428]	; (60c <bmp280_init+0x40c>)
     45e:	4798      	blx	r3
     460:	0003      	movs	r3, r0
     462:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P6_MSB_REG);
     464:	230e      	movs	r3, #14
     466:	18fc      	adds	r4, r7, r3
     468:	687b      	ldr	r3, [r7, #4]
     46a:	2199      	movs	r1, #153	; 0x99
     46c:	0018      	movs	r0, r3
     46e:	4b67      	ldr	r3, [pc, #412]	; (60c <bmp280_init+0x40c>)
     470:	4798      	blx	r3
     472:	0003      	movs	r3, r0
     474:	7023      	strb	r3, [r4, #0]
	dig_P6 = msb << 8 | lsb;
     476:	230e      	movs	r3, #14
     478:	18fb      	adds	r3, r7, r3
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	021b      	lsls	r3, r3, #8
     47e:	b21a      	sxth	r2, r3
     480:	230f      	movs	r3, #15
     482:	18fb      	adds	r3, r7, r3
     484:	781b      	ldrb	r3, [r3, #0]
     486:	b21b      	sxth	r3, r3
     488:	4313      	orrs	r3, r2
     48a:	b21a      	sxth	r2, r3
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	829a      	strh	r2, [r3, #20]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P7_LSB_REG);
     490:	230f      	movs	r3, #15
     492:	18fc      	adds	r4, r7, r3
     494:	687b      	ldr	r3, [r7, #4]
     496:	219a      	movs	r1, #154	; 0x9a
     498:	0018      	movs	r0, r3
     49a:	4b5c      	ldr	r3, [pc, #368]	; (60c <bmp280_init+0x40c>)
     49c:	4798      	blx	r3
     49e:	0003      	movs	r3, r0
     4a0:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P7_MSB_REG);
     4a2:	230e      	movs	r3, #14
     4a4:	18fc      	adds	r4, r7, r3
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	219b      	movs	r1, #155	; 0x9b
     4aa:	0018      	movs	r0, r3
     4ac:	4b57      	ldr	r3, [pc, #348]	; (60c <bmp280_init+0x40c>)
     4ae:	4798      	blx	r3
     4b0:	0003      	movs	r3, r0
     4b2:	7023      	strb	r3, [r4, #0]
	dig_P7 = msb << 8 | lsb;
     4b4:	230e      	movs	r3, #14
     4b6:	18fb      	adds	r3, r7, r3
     4b8:	781b      	ldrb	r3, [r3, #0]
     4ba:	021b      	lsls	r3, r3, #8
     4bc:	b21a      	sxth	r2, r3
     4be:	230f      	movs	r3, #15
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	b21b      	sxth	r3, r3
     4c6:	4313      	orrs	r3, r2
     4c8:	b21a      	sxth	r2, r3
     4ca:	693b      	ldr	r3, [r7, #16]
     4cc:	82da      	strh	r2, [r3, #22]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P8_LSB_REG);
     4ce:	230f      	movs	r3, #15
     4d0:	18fc      	adds	r4, r7, r3
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	219c      	movs	r1, #156	; 0x9c
     4d6:	0018      	movs	r0, r3
     4d8:	4b4c      	ldr	r3, [pc, #304]	; (60c <bmp280_init+0x40c>)
     4da:	4798      	blx	r3
     4dc:	0003      	movs	r3, r0
     4de:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P8_MSB_REG);
     4e0:	230e      	movs	r3, #14
     4e2:	18fc      	adds	r4, r7, r3
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	219d      	movs	r1, #157	; 0x9d
     4e8:	0018      	movs	r0, r3
     4ea:	4b48      	ldr	r3, [pc, #288]	; (60c <bmp280_init+0x40c>)
     4ec:	4798      	blx	r3
     4ee:	0003      	movs	r3, r0
     4f0:	7023      	strb	r3, [r4, #0]
	dig_P8 = msb << 8 | lsb;
     4f2:	230e      	movs	r3, #14
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	781b      	ldrb	r3, [r3, #0]
     4f8:	021b      	lsls	r3, r3, #8
     4fa:	b21a      	sxth	r2, r3
     4fc:	230f      	movs	r3, #15
     4fe:	18fb      	adds	r3, r7, r3
     500:	781b      	ldrb	r3, [r3, #0]
     502:	b21b      	sxth	r3, r3
     504:	4313      	orrs	r3, r2
     506:	b21a      	sxth	r2, r3
     508:	693b      	ldr	r3, [r7, #16]
     50a:	831a      	strh	r2, [r3, #24]
	lsb = bmp280_read_register(i2c, BMP280_DIG_P9_LSB_REG);
     50c:	230f      	movs	r3, #15
     50e:	18fc      	adds	r4, r7, r3
     510:	687b      	ldr	r3, [r7, #4]
     512:	219e      	movs	r1, #158	; 0x9e
     514:	0018      	movs	r0, r3
     516:	4b3d      	ldr	r3, [pc, #244]	; (60c <bmp280_init+0x40c>)
     518:	4798      	blx	r3
     51a:	0003      	movs	r3, r0
     51c:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_P9_MSB_REG);
     51e:	230e      	movs	r3, #14
     520:	18fc      	adds	r4, r7, r3
     522:	687b      	ldr	r3, [r7, #4]
     524:	219f      	movs	r1, #159	; 0x9f
     526:	0018      	movs	r0, r3
     528:	4b38      	ldr	r3, [pc, #224]	; (60c <bmp280_init+0x40c>)
     52a:	4798      	blx	r3
     52c:	0003      	movs	r3, r0
     52e:	7023      	strb	r3, [r4, #0]
	dig_P9 = msb << 8 | lsb;
     530:	230e      	movs	r3, #14
     532:	18fb      	adds	r3, r7, r3
     534:	781b      	ldrb	r3, [r3, #0]
     536:	021b      	lsls	r3, r3, #8
     538:	b21a      	sxth	r2, r3
     53a:	230f      	movs	r3, #15
     53c:	18fb      	adds	r3, r7, r3
     53e:	781b      	ldrb	r3, [r3, #0]
     540:	b21b      	sxth	r3, r3
     542:	4313      	orrs	r3, r2
     544:	b21a      	sxth	r2, r3
     546:	693b      	ldr	r3, [r7, #16]
     548:	835a      	strh	r2, [r3, #26]
	
	/* read the humidity calibration parameters */
	lsb = bmp280_read_register(i2c, BMP280_DIG_H1_REG);
     54a:	230f      	movs	r3, #15
     54c:	18fc      	adds	r4, r7, r3
     54e:	687b      	ldr	r3, [r7, #4]
     550:	21a1      	movs	r1, #161	; 0xa1
     552:	0018      	movs	r0, r3
     554:	4b2d      	ldr	r3, [pc, #180]	; (60c <bmp280_init+0x40c>)
     556:	4798      	blx	r3
     558:	0003      	movs	r3, r0
     55a:	7023      	strb	r3, [r4, #0]
	dig_H1 = lsb;
     55c:	693b      	ldr	r3, [r7, #16]
     55e:	220f      	movs	r2, #15
     560:	18ba      	adds	r2, r7, r2
     562:	7812      	ldrb	r2, [r2, #0]
     564:	771a      	strb	r2, [r3, #28]
	lsb = bmp280_read_register(i2c, BMP280_DIG_H2_LSB_REG);
     566:	230f      	movs	r3, #15
     568:	18fc      	adds	r4, r7, r3
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	21e1      	movs	r1, #225	; 0xe1
     56e:	0018      	movs	r0, r3
     570:	4b26      	ldr	r3, [pc, #152]	; (60c <bmp280_init+0x40c>)
     572:	4798      	blx	r3
     574:	0003      	movs	r3, r0
     576:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_H2_MSB_REG);
     578:	230e      	movs	r3, #14
     57a:	18fc      	adds	r4, r7, r3
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	21e2      	movs	r1, #226	; 0xe2
     580:	0018      	movs	r0, r3
     582:	4b22      	ldr	r3, [pc, #136]	; (60c <bmp280_init+0x40c>)
     584:	4798      	blx	r3
     586:	0003      	movs	r3, r0
     588:	7023      	strb	r3, [r4, #0]
	dig_H2 = ((int16_t)msb) *256 + ((int16_t)lsb);
     58a:	230e      	movs	r3, #14
     58c:	18fb      	adds	r3, r7, r3
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	b29b      	uxth	r3, r3
     592:	021b      	lsls	r3, r3, #8
     594:	b29a      	uxth	r2, r3
     596:	230f      	movs	r3, #15
     598:	18fb      	adds	r3, r7, r3
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	b29b      	uxth	r3, r3
     59e:	18d3      	adds	r3, r2, r3
     5a0:	b29b      	uxth	r3, r3
     5a2:	b21a      	sxth	r2, r3
     5a4:	693b      	ldr	r3, [r7, #16]
     5a6:	83da      	strh	r2, [r3, #30]
	lsb = bmp280_read_register(i2c, BMP280_DIG_H3_REG);
     5a8:	230f      	movs	r3, #15
     5aa:	18fc      	adds	r4, r7, r3
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	21e3      	movs	r1, #227	; 0xe3
     5b0:	0018      	movs	r0, r3
     5b2:	4b16      	ldr	r3, [pc, #88]	; (60c <bmp280_init+0x40c>)
     5b4:	4798      	blx	r3
     5b6:	0003      	movs	r3, r0
     5b8:	7023      	strb	r3, [r4, #0]
	dig_H3 = lsb;
     5ba:	693b      	ldr	r3, [r7, #16]
     5bc:	220f      	movs	r2, #15
     5be:	18ba      	adds	r2, r7, r2
     5c0:	2120      	movs	r1, #32
     5c2:	7812      	ldrb	r2, [r2, #0]
     5c4:	545a      	strb	r2, [r3, r1]
	lsb = bmp280_read_register(i2c, BMP280_DIG_H4_LSB_REG);
     5c6:	230f      	movs	r3, #15
     5c8:	18fc      	adds	r4, r7, r3
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	21e4      	movs	r1, #228	; 0xe4
     5ce:	0018      	movs	r0, r3
     5d0:	4b0e      	ldr	r3, [pc, #56]	; (60c <bmp280_init+0x40c>)
     5d2:	4798      	blx	r3
     5d4:	0003      	movs	r3, r0
     5d6:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_H4_MSB_REG);
     5d8:	230e      	movs	r3, #14
     5da:	18fc      	adds	r4, r7, r3
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	21e5      	movs	r1, #229	; 0xe5
     5e0:	0018      	movs	r0, r3
     5e2:	4b0a      	ldr	r3, [pc, #40]	; (60c <bmp280_init+0x40c>)
     5e4:	4798      	blx	r3
     5e6:	0003      	movs	r3, r0
     5e8:	7023      	strb	r3, [r4, #0]
	msb &= 0x0f;
     5ea:	230e      	movs	r3, #14
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	220e      	movs	r2, #14
     5f0:	18ba      	adds	r2, r7, r2
     5f2:	7812      	ldrb	r2, [r2, #0]
     5f4:	210f      	movs	r1, #15
     5f6:	400a      	ands	r2, r1
     5f8:	701a      	strb	r2, [r3, #0]
	dig_H4 = ((int16_t)msb) + ((int16_t)lsb*16);
     5fa:	230e      	movs	r3, #14
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	b29a      	uxth	r2, r3
     602:	230f      	movs	r3, #15
     604:	18fb      	adds	r3, r7, r3
     606:	781b      	ldrb	r3, [r3, #0]
     608:	e004      	b.n	614 <bmp280_init+0x414>
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	00000119 	.word	0x00000119
     610:	000056b5 	.word	0x000056b5
     614:	b29b      	uxth	r3, r3
     616:	011b      	lsls	r3, r3, #4
     618:	b29b      	uxth	r3, r3
     61a:	18d3      	adds	r3, r2, r3
     61c:	b29b      	uxth	r3, r3
     61e:	b21a      	sxth	r2, r3
     620:	693b      	ldr	r3, [r7, #16]
     622:	845a      	strh	r2, [r3, #34]	; 0x22
	lsb = bmp280_read_register(i2c, BMP280_DIG_H5_LSB_REG);
     624:	230f      	movs	r3, #15
     626:	18fc      	adds	r4, r7, r3
     628:	687b      	ldr	r3, [r7, #4]
     62a:	21e5      	movs	r1, #229	; 0xe5
     62c:	0018      	movs	r0, r3
     62e:	4b3a      	ldr	r3, [pc, #232]	; (718 <bmp280_init+0x518>)
     630:	4798      	blx	r3
     632:	0003      	movs	r3, r0
     634:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(i2c, BMP280_DIG_H5_MSB_REG);
     636:	230e      	movs	r3, #14
     638:	18fc      	adds	r4, r7, r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	21e6      	movs	r1, #230	; 0xe6
     63e:	0018      	movs	r0, r3
     640:	4b35      	ldr	r3, [pc, #212]	; (718 <bmp280_init+0x518>)
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	7023      	strb	r3, [r4, #0]
	lsb &= 0xf0; 
     648:	230f      	movs	r3, #15
     64a:	18fb      	adds	r3, r7, r3
     64c:	220f      	movs	r2, #15
     64e:	18ba      	adds	r2, r7, r2
     650:	7812      	ldrb	r2, [r2, #0]
     652:	210f      	movs	r1, #15
     654:	438a      	bics	r2, r1
     656:	701a      	strb	r2, [r3, #0]
	lsb = lsb >> 4;
     658:	230f      	movs	r3, #15
     65a:	18fb      	adds	r3, r7, r3
     65c:	220f      	movs	r2, #15
     65e:	18ba      	adds	r2, r7, r2
     660:	7812      	ldrb	r2, [r2, #0]
     662:	0912      	lsrs	r2, r2, #4
     664:	701a      	strb	r2, [r3, #0]
	msb = msb << 4;
     666:	230e      	movs	r3, #14
     668:	18fb      	adds	r3, r7, r3
     66a:	220e      	movs	r2, #14
     66c:	18ba      	adds	r2, r7, r2
     66e:	7812      	ldrb	r2, [r2, #0]
     670:	0112      	lsls	r2, r2, #4
     672:	701a      	strb	r2, [r3, #0]
	dig_H5 = msb+lsb;
     674:	230e      	movs	r3, #14
     676:	18fb      	adds	r3, r7, r3
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	b29a      	uxth	r2, r3
     67c:	230f      	movs	r3, #15
     67e:	18fb      	adds	r3, r7, r3
     680:	781b      	ldrb	r3, [r3, #0]
     682:	b29b      	uxth	r3, r3
     684:	18d3      	adds	r3, r2, r3
     686:	b29b      	uxth	r3, r3
     688:	b21a      	sxth	r2, r3
     68a:	693b      	ldr	r3, [r7, #16]
     68c:	849a      	strh	r2, [r3, #36]	; 0x24
	lsb = bmp280_read_register(i2c, BMP280_DIG_H6_REG);
     68e:	230f      	movs	r3, #15
     690:	18fc      	adds	r4, r7, r3
     692:	687b      	ldr	r3, [r7, #4]
     694:	21e7      	movs	r1, #231	; 0xe7
     696:	0018      	movs	r0, r3
     698:	4b1f      	ldr	r3, [pc, #124]	; (718 <bmp280_init+0x518>)
     69a:	4798      	blx	r3
     69c:	0003      	movs	r3, r0
     69e:	7023      	strb	r3, [r4, #0]
	dig_H6 = (int16_t)lsb;
     6a0:	230f      	movs	r3, #15
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	781b      	ldrb	r3, [r3, #0]
     6a6:	b21a      	sxth	r2, r3
     6a8:	693b      	ldr	r3, [r7, #16]
     6aa:	84da      	strh	r2, [r3, #38]	; 0x26
	
	bmp280_reset(bmp280);
     6ac:	693b      	ldr	r3, [r7, #16]
     6ae:	0018      	movs	r0, r3
     6b0:	4b1a      	ldr	r3, [pc, #104]	; (71c <bmp280_init+0x51c>)
     6b2:	4798      	blx	r3

	uint8_t Temp = 0x11;												//hum
     6b4:	230d      	movs	r3, #13
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	2211      	movs	r2, #17
     6ba:	701a      	strb	r2, [r3, #0]
	bmp280_write_register(i2c, BMP280_CTRL_HUM, Temp);
     6bc:	230d      	movs	r3, #13
     6be:	18fb      	adds	r3, r7, r3
     6c0:	781a      	ldrb	r2, [r3, #0]
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	21f2      	movs	r1, #242	; 0xf2
     6c6:	0018      	movs	r0, r3
     6c8:	4b15      	ldr	r3, [pc, #84]	; (720 <bmp280_init+0x520>)
     6ca:	4798      	blx	r3
	
	ctrlmeas_reg = 0X93; // bmp280->t_oversampling << 5 | bmp280->p_oversampling << 2 | bmp280->mode;
     6cc:	230c      	movs	r3, #12
     6ce:	18fb      	adds	r3, r7, r3
     6d0:	2293      	movs	r2, #147	; 0x93
     6d2:	701a      	strb	r2, [r3, #0]
	config_reg = 0; // config_reg = bmp280->t_sb << 5 | bmp280->filter_coefficient << 2;
     6d4:	230b      	movs	r3, #11
     6d6:	18fb      	adds	r3, r7, r3
     6d8:	2200      	movs	r2, #0
     6da:	701a      	strb	r2, [r3, #0]
		
	bmp280_write_register(i2c, BMP280_CTRLMEAS_REG, ctrlmeas_reg);
     6dc:	230c      	movs	r3, #12
     6de:	18fb      	adds	r3, r7, r3
     6e0:	781a      	ldrb	r2, [r3, #0]
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	21f4      	movs	r1, #244	; 0xf4
     6e6:	0018      	movs	r0, r3
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <bmp280_init+0x520>)
     6ea:	4798      	blx	r3
	bmp280_write_register(i2c, BMP280_CONFIG_REG, config_reg);
     6ec:	230b      	movs	r3, #11
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	781a      	ldrb	r2, [r3, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	21f5      	movs	r1, #245	; 0xf5
     6f6:	0018      	movs	r0, r3
     6f8:	4b09      	ldr	r3, [pc, #36]	; (720 <bmp280_init+0x520>)
     6fa:	4798      	blx	r3
	
	delay_ms(100);
     6fc:	2064      	movs	r0, #100	; 0x64
     6fe:	4b09      	ldr	r3, [pc, #36]	; (724 <bmp280_init+0x524>)
     700:	4798      	blx	r3
	
	bmp280->valid = true;
     702:	693b      	ldr	r3, [r7, #16]
     704:	2231      	movs	r2, #49	; 0x31
     706:	2101      	movs	r1, #1
     708:	5499      	strb	r1, [r3, r2]
	
	return bmp280;
     70a:	693b      	ldr	r3, [r7, #16]
     70c:	e000      	b.n	710 <bmp280_init+0x510>
		return NULL;
     70e:	2300      	movs	r3, #0
}
     710:	0018      	movs	r0, r3
     712:	46bd      	mov	sp, r7
     714:	b007      	add	sp, #28
     716:	bd90      	pop	{r4, r7, pc}
     718:	00000119 	.word	0x00000119
     71c:	00000729 	.word	0x00000729
     720:	00000189 	.word	0x00000189
     724:	00001b51 	.word	0x00001b51

00000728 <bmp280_reset>:

void bmp280_reset(struct bmp280 *bmp280)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
	bmp280_write_register(bmp280->i2c, BMP280_RESET_REG, BMP280_RESET_VALUE);
     730:	687b      	ldr	r3, [r7, #4]
     732:	681b      	ldr	r3, [r3, #0]
     734:	22b6      	movs	r2, #182	; 0xb6
     736:	21e0      	movs	r1, #224	; 0xe0
     738:	0018      	movs	r0, r3
     73a:	4b03      	ldr	r3, [pc, #12]	; (748 <bmp280_reset+0x20>)
     73c:	4798      	blx	r3
}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	46bd      	mov	sp, r7
     742:	b002      	add	sp, #8
     744:	bd80      	pop	{r7, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00000189 	.word	0x00000189

0000074c <bmp280_compensate_temperature_double>:
	bmp280_write_register(bmp280->i2c, BMP280_CONFIG_REG, config_reg);
}

/* Returns temperature in DegC, double precision. Output value of “51.23” equals 51.23 DegC. */
static double bmp280_compensate_temperature_double(struct bmp280 *bmp280, int32_t adc_T)
{
     74c:	b5f0      	push	{r4, r5, r6, r7, lr}
     74e:	b08b      	sub	sp, #44	; 0x2c
     750:	af00      	add	r7, sp, #0
     752:	60f8      	str	r0, [r7, #12]
     754:	60b9      	str	r1, [r7, #8]
	double var1, var2, temperature;
	
	var1 = (((double) adc_T) / 16384.0 - ((double) dig_T1) / 1024.0)
     756:	4b5a      	ldr	r3, [pc, #360]	; (8c0 <bmp280_compensate_temperature_double+0x174>)
     758:	68b8      	ldr	r0, [r7, #8]
     75a:	4798      	blx	r3
     75c:	4c59      	ldr	r4, [pc, #356]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     75e:	2200      	movs	r2, #0
     760:	4b59      	ldr	r3, [pc, #356]	; (8c8 <bmp280_compensate_temperature_double+0x17c>)
     762:	47a0      	blx	r4
     764:	0003      	movs	r3, r0
     766:	000c      	movs	r4, r1
     768:	001d      	movs	r5, r3
     76a:	0026      	movs	r6, r4
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	889a      	ldrh	r2, [r3, #4]
     770:	4b56      	ldr	r3, [pc, #344]	; (8cc <bmp280_compensate_temperature_double+0x180>)
     772:	0010      	movs	r0, r2
     774:	4798      	blx	r3
     776:	4c53      	ldr	r4, [pc, #332]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     778:	2200      	movs	r2, #0
     77a:	4b55      	ldr	r3, [pc, #340]	; (8d0 <bmp280_compensate_temperature_double+0x184>)
     77c:	47a0      	blx	r4
     77e:	0003      	movs	r3, r0
     780:	000c      	movs	r4, r1
     782:	001a      	movs	r2, r3
     784:	0023      	movs	r3, r4
     786:	4c53      	ldr	r4, [pc, #332]	; (8d4 <bmp280_compensate_temperature_double+0x188>)
     788:	0028      	movs	r0, r5
     78a:	0031      	movs	r1, r6
     78c:	47a0      	blx	r4
     78e:	0003      	movs	r3, r0
     790:	000c      	movs	r4, r1
     792:	001d      	movs	r5, r3
     794:	0026      	movs	r6, r4
	* ((double) dig_T2);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	2206      	movs	r2, #6
     79a:	5e9a      	ldrsh	r2, [r3, r2]
     79c:	4b48      	ldr	r3, [pc, #288]	; (8c0 <bmp280_compensate_temperature_double+0x174>)
     79e:	0010      	movs	r0, r2
     7a0:	4798      	blx	r3
     7a2:	0002      	movs	r2, r0
     7a4:	000b      	movs	r3, r1
	var1 = (((double) adc_T) / 16384.0 - ((double) dig_T1) / 1024.0)
     7a6:	4c4c      	ldr	r4, [pc, #304]	; (8d8 <bmp280_compensate_temperature_double+0x18c>)
     7a8:	0028      	movs	r0, r5
     7aa:	0031      	movs	r1, r6
     7ac:	47a0      	blx	r4
     7ae:	0003      	movs	r3, r0
     7b0:	000c      	movs	r4, r1
     7b2:	623b      	str	r3, [r7, #32]
     7b4:	627c      	str	r4, [r7, #36]	; 0x24
	var2 = ((((double) adc_T) / 131072.0 - ((double) dig_T1) / 8192.0)
     7b6:	4b42      	ldr	r3, [pc, #264]	; (8c0 <bmp280_compensate_temperature_double+0x174>)
     7b8:	68b8      	ldr	r0, [r7, #8]
     7ba:	4798      	blx	r3
     7bc:	4c41      	ldr	r4, [pc, #260]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     7be:	2200      	movs	r2, #0
     7c0:	2382      	movs	r3, #130	; 0x82
     7c2:	05db      	lsls	r3, r3, #23
     7c4:	47a0      	blx	r4
     7c6:	0003      	movs	r3, r0
     7c8:	000c      	movs	r4, r1
     7ca:	001d      	movs	r5, r3
     7cc:	0026      	movs	r6, r4
     7ce:	68fb      	ldr	r3, [r7, #12]
     7d0:	889a      	ldrh	r2, [r3, #4]
     7d2:	4b3e      	ldr	r3, [pc, #248]	; (8cc <bmp280_compensate_temperature_double+0x180>)
     7d4:	0010      	movs	r0, r2
     7d6:	4798      	blx	r3
     7d8:	4c3a      	ldr	r4, [pc, #232]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     7da:	2200      	movs	r2, #0
     7dc:	4b3f      	ldr	r3, [pc, #252]	; (8dc <bmp280_compensate_temperature_double+0x190>)
     7de:	47a0      	blx	r4
     7e0:	0003      	movs	r3, r0
     7e2:	000c      	movs	r4, r1
     7e4:	001a      	movs	r2, r3
     7e6:	0023      	movs	r3, r4
     7e8:	4c3a      	ldr	r4, [pc, #232]	; (8d4 <bmp280_compensate_temperature_double+0x188>)
     7ea:	0028      	movs	r0, r5
     7ec:	0031      	movs	r1, r6
     7ee:	47a0      	blx	r4
     7f0:	0003      	movs	r3, r0
     7f2:	000c      	movs	r4, r1
     7f4:	001d      	movs	r5, r3
     7f6:	0026      	movs	r6, r4
	* (((double) adc_T) / 131072.0 - ((double) dig_T1) / 8192.0))
     7f8:	4b31      	ldr	r3, [pc, #196]	; (8c0 <bmp280_compensate_temperature_double+0x174>)
     7fa:	68b8      	ldr	r0, [r7, #8]
     7fc:	4798      	blx	r3
     7fe:	4c31      	ldr	r4, [pc, #196]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     800:	2200      	movs	r2, #0
     802:	2382      	movs	r3, #130	; 0x82
     804:	05db      	lsls	r3, r3, #23
     806:	47a0      	blx	r4
     808:	0003      	movs	r3, r0
     80a:	000c      	movs	r4, r1
     80c:	603b      	str	r3, [r7, #0]
     80e:	607c      	str	r4, [r7, #4]
     810:	68fb      	ldr	r3, [r7, #12]
     812:	889a      	ldrh	r2, [r3, #4]
     814:	4b2d      	ldr	r3, [pc, #180]	; (8cc <bmp280_compensate_temperature_double+0x180>)
     816:	0010      	movs	r0, r2
     818:	4798      	blx	r3
     81a:	4c2a      	ldr	r4, [pc, #168]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     81c:	2200      	movs	r2, #0
     81e:	4b2f      	ldr	r3, [pc, #188]	; (8dc <bmp280_compensate_temperature_double+0x190>)
     820:	47a0      	blx	r4
     822:	0003      	movs	r3, r0
     824:	000c      	movs	r4, r1
     826:	001a      	movs	r2, r3
     828:	0023      	movs	r3, r4
     82a:	4c2a      	ldr	r4, [pc, #168]	; (8d4 <bmp280_compensate_temperature_double+0x188>)
     82c:	6838      	ldr	r0, [r7, #0]
     82e:	6879      	ldr	r1, [r7, #4]
     830:	47a0      	blx	r4
     832:	0003      	movs	r3, r0
     834:	000c      	movs	r4, r1
     836:	001a      	movs	r2, r3
     838:	0023      	movs	r3, r4
     83a:	4c27      	ldr	r4, [pc, #156]	; (8d8 <bmp280_compensate_temperature_double+0x18c>)
     83c:	0028      	movs	r0, r5
     83e:	0031      	movs	r1, r6
     840:	47a0      	blx	r4
     842:	0003      	movs	r3, r0
     844:	000c      	movs	r4, r1
     846:	001d      	movs	r5, r3
     848:	0026      	movs	r6, r4
	* ((double) dig_T3);
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	2208      	movs	r2, #8
     84e:	5e9a      	ldrsh	r2, [r3, r2]
     850:	4b1b      	ldr	r3, [pc, #108]	; (8c0 <bmp280_compensate_temperature_double+0x174>)
     852:	0010      	movs	r0, r2
     854:	4798      	blx	r3
     856:	0002      	movs	r2, r0
     858:	000b      	movs	r3, r1
	var2 = ((((double) adc_T) / 131072.0 - ((double) dig_T1) / 8192.0)
     85a:	4c1f      	ldr	r4, [pc, #124]	; (8d8 <bmp280_compensate_temperature_double+0x18c>)
     85c:	0028      	movs	r0, r5
     85e:	0031      	movs	r1, r6
     860:	47a0      	blx	r4
     862:	0003      	movs	r3, r0
     864:	000c      	movs	r4, r1
     866:	61bb      	str	r3, [r7, #24]
     868:	61fc      	str	r4, [r7, #28]
	bmp280->t_fine = (int32_t) (var1 + var2);
     86a:	4c1d      	ldr	r4, [pc, #116]	; (8e0 <bmp280_compensate_temperature_double+0x194>)
     86c:	69ba      	ldr	r2, [r7, #24]
     86e:	69fb      	ldr	r3, [r7, #28]
     870:	6a38      	ldr	r0, [r7, #32]
     872:	6a79      	ldr	r1, [r7, #36]	; 0x24
     874:	47a0      	blx	r4
     876:	0003      	movs	r3, r0
     878:	000c      	movs	r4, r1
     87a:	0019      	movs	r1, r3
     87c:	0022      	movs	r2, r4
     87e:	4b19      	ldr	r3, [pc, #100]	; (8e4 <bmp280_compensate_temperature_double+0x198>)
     880:	0008      	movs	r0, r1
     882:	0011      	movs	r1, r2
     884:	4798      	blx	r3
     886:	0002      	movs	r2, r0
     888:	68fb      	ldr	r3, [r7, #12]
     88a:	629a      	str	r2, [r3, #40]	; 0x28
	temperature = (var1 + var2) / 5120.0;
     88c:	4c14      	ldr	r4, [pc, #80]	; (8e0 <bmp280_compensate_temperature_double+0x194>)
     88e:	69ba      	ldr	r2, [r7, #24]
     890:	69fb      	ldr	r3, [r7, #28]
     892:	6a38      	ldr	r0, [r7, #32]
     894:	6a79      	ldr	r1, [r7, #36]	; 0x24
     896:	47a0      	blx	r4
     898:	0003      	movs	r3, r0
     89a:	000c      	movs	r4, r1
     89c:	0018      	movs	r0, r3
     89e:	0021      	movs	r1, r4
     8a0:	4c08      	ldr	r4, [pc, #32]	; (8c4 <bmp280_compensate_temperature_double+0x178>)
     8a2:	2200      	movs	r2, #0
     8a4:	4b10      	ldr	r3, [pc, #64]	; (8e8 <bmp280_compensate_temperature_double+0x19c>)
     8a6:	47a0      	blx	r4
     8a8:	0003      	movs	r3, r0
     8aa:	000c      	movs	r4, r1
     8ac:	613b      	str	r3, [r7, #16]
     8ae:	617c      	str	r4, [r7, #20]
	
	return temperature;
     8b0:	693b      	ldr	r3, [r7, #16]
     8b2:	697c      	ldr	r4, [r7, #20]
}
     8b4:	0018      	movs	r0, r3
     8b6:	0021      	movs	r1, r4
     8b8:	46bd      	mov	sp, r7
     8ba:	b00b      	add	sp, #44	; 0x2c
     8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	0000553d 	.word	0x0000553d
     8c4:	00004141 	.word	0x00004141
     8c8:	40d00000 	.word	0x40d00000
     8cc:	000055c1 	.word	0x000055c1
     8d0:	40900000 	.word	0x40900000
     8d4:	00004ea9 	.word	0x00004ea9
     8d8:	000049a9 	.word	0x000049a9
     8dc:	40c00000 	.word	0x40c00000
     8e0:	00003b21 	.word	0x00003b21
     8e4:	000054d5 	.word	0x000054d5
     8e8:	40b40000 	.word	0x40b40000

000008ec <bmp280_compensate_pressure_double>:


/* Returns pressure in Pa as double. Output value of “96386.2” equals 96386.2 Pa = 963.862 hPa */
static double bmp280_compensate_pressure_double(struct bmp280 *bmp280, int32_t adc_P)
{
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	b089      	sub	sp, #36	; 0x24
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
     8f4:	6039      	str	r1, [r7, #0]
	double var1, var2, pressure;
	
	var1 = ((double) bmp280->t_fine / 2.0) - 64000.0;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     8fa:	4bb8      	ldr	r3, [pc, #736]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     8fc:	0010      	movs	r0, r2
     8fe:	4798      	blx	r3
     900:	4cb7      	ldr	r4, [pc, #732]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     902:	2200      	movs	r2, #0
     904:	2380      	movs	r3, #128	; 0x80
     906:	05db      	lsls	r3, r3, #23
     908:	47a0      	blx	r4
     90a:	0003      	movs	r3, r0
     90c:	000c      	movs	r4, r1
     90e:	0018      	movs	r0, r3
     910:	0021      	movs	r1, r4
     912:	4cb4      	ldr	r4, [pc, #720]	; (be4 <bmp280_compensate_pressure_double+0x2f8>)
     914:	2200      	movs	r2, #0
     916:	4bb4      	ldr	r3, [pc, #720]	; (be8 <bmp280_compensate_pressure_double+0x2fc>)
     918:	47a0      	blx	r4
     91a:	0003      	movs	r3, r0
     91c:	000c      	movs	r4, r1
     91e:	61bb      	str	r3, [r7, #24]
     920:	61fc      	str	r4, [r7, #28]
	var2 = var1 * var1 * ((double) dig_P6) / 32768.0;
     922:	4cb2      	ldr	r4, [pc, #712]	; (bec <bmp280_compensate_pressure_double+0x300>)
     924:	69ba      	ldr	r2, [r7, #24]
     926:	69fb      	ldr	r3, [r7, #28]
     928:	69b8      	ldr	r0, [r7, #24]
     92a:	69f9      	ldr	r1, [r7, #28]
     92c:	47a0      	blx	r4
     92e:	0003      	movs	r3, r0
     930:	000c      	movs	r4, r1
     932:	001d      	movs	r5, r3
     934:	0026      	movs	r6, r4
     936:	687b      	ldr	r3, [r7, #4]
     938:	2214      	movs	r2, #20
     93a:	5e9a      	ldrsh	r2, [r3, r2]
     93c:	4ba7      	ldr	r3, [pc, #668]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     93e:	0010      	movs	r0, r2
     940:	4798      	blx	r3
     942:	0002      	movs	r2, r0
     944:	000b      	movs	r3, r1
     946:	4ca9      	ldr	r4, [pc, #676]	; (bec <bmp280_compensate_pressure_double+0x300>)
     948:	0028      	movs	r0, r5
     94a:	0031      	movs	r1, r6
     94c:	47a0      	blx	r4
     94e:	0003      	movs	r3, r0
     950:	000c      	movs	r4, r1
     952:	0018      	movs	r0, r3
     954:	0021      	movs	r1, r4
     956:	4ca2      	ldr	r4, [pc, #648]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     958:	2200      	movs	r2, #0
     95a:	4ba5      	ldr	r3, [pc, #660]	; (bf0 <bmp280_compensate_pressure_double+0x304>)
     95c:	47a0      	blx	r4
     95e:	0003      	movs	r3, r0
     960:	000c      	movs	r4, r1
     962:	613b      	str	r3, [r7, #16]
     964:	617c      	str	r4, [r7, #20]
	var2 = var2 + var1 * ((double) dig_P5) * 2.0;
     966:	687b      	ldr	r3, [r7, #4]
     968:	2212      	movs	r2, #18
     96a:	5e9a      	ldrsh	r2, [r3, r2]
     96c:	4b9b      	ldr	r3, [pc, #620]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     96e:	0010      	movs	r0, r2
     970:	4798      	blx	r3
     972:	4c9e      	ldr	r4, [pc, #632]	; (bec <bmp280_compensate_pressure_double+0x300>)
     974:	69ba      	ldr	r2, [r7, #24]
     976:	69fb      	ldr	r3, [r7, #28]
     978:	47a0      	blx	r4
     97a:	0003      	movs	r3, r0
     97c:	000c      	movs	r4, r1
     97e:	0018      	movs	r0, r3
     980:	0021      	movs	r1, r4
     982:	4c9c      	ldr	r4, [pc, #624]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     984:	0002      	movs	r2, r0
     986:	000b      	movs	r3, r1
     988:	47a0      	blx	r4
     98a:	0003      	movs	r3, r0
     98c:	000c      	movs	r4, r1
     98e:	001a      	movs	r2, r3
     990:	0023      	movs	r3, r4
     992:	4c98      	ldr	r4, [pc, #608]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     994:	6938      	ldr	r0, [r7, #16]
     996:	6979      	ldr	r1, [r7, #20]
     998:	47a0      	blx	r4
     99a:	0003      	movs	r3, r0
     99c:	000c      	movs	r4, r1
     99e:	613b      	str	r3, [r7, #16]
     9a0:	617c      	str	r4, [r7, #20]
	var2 = (var2 / 4.0) + (((double) dig_P4) * 65536.0);
     9a2:	4c8f      	ldr	r4, [pc, #572]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     9a4:	2200      	movs	r2, #0
     9a6:	4b94      	ldr	r3, [pc, #592]	; (bf8 <bmp280_compensate_pressure_double+0x30c>)
     9a8:	6938      	ldr	r0, [r7, #16]
     9aa:	6979      	ldr	r1, [r7, #20]
     9ac:	47a0      	blx	r4
     9ae:	0003      	movs	r3, r0
     9b0:	000c      	movs	r4, r1
     9b2:	001d      	movs	r5, r3
     9b4:	0026      	movs	r6, r4
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	2210      	movs	r2, #16
     9ba:	5e9a      	ldrsh	r2, [r3, r2]
     9bc:	4b87      	ldr	r3, [pc, #540]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     9be:	0010      	movs	r0, r2
     9c0:	4798      	blx	r3
     9c2:	4c8a      	ldr	r4, [pc, #552]	; (bec <bmp280_compensate_pressure_double+0x300>)
     9c4:	2200      	movs	r2, #0
     9c6:	4b8d      	ldr	r3, [pc, #564]	; (bfc <bmp280_compensate_pressure_double+0x310>)
     9c8:	47a0      	blx	r4
     9ca:	0003      	movs	r3, r0
     9cc:	000c      	movs	r4, r1
     9ce:	001a      	movs	r2, r3
     9d0:	0023      	movs	r3, r4
     9d2:	4c88      	ldr	r4, [pc, #544]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     9d4:	0028      	movs	r0, r5
     9d6:	0031      	movs	r1, r6
     9d8:	47a0      	blx	r4
     9da:	0003      	movs	r3, r0
     9dc:	000c      	movs	r4, r1
     9de:	613b      	str	r3, [r7, #16]
     9e0:	617c      	str	r4, [r7, #20]
	var1 = (((double) dig_P3) * var1 * var1 / 524288.0
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	220e      	movs	r2, #14
     9e6:	5e9a      	ldrsh	r2, [r3, r2]
     9e8:	4b7c      	ldr	r3, [pc, #496]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     9ea:	0010      	movs	r0, r2
     9ec:	4798      	blx	r3
     9ee:	4c7f      	ldr	r4, [pc, #508]	; (bec <bmp280_compensate_pressure_double+0x300>)
     9f0:	69ba      	ldr	r2, [r7, #24]
     9f2:	69fb      	ldr	r3, [r7, #28]
     9f4:	47a0      	blx	r4
     9f6:	0003      	movs	r3, r0
     9f8:	000c      	movs	r4, r1
     9fa:	0018      	movs	r0, r3
     9fc:	0021      	movs	r1, r4
     9fe:	4c7b      	ldr	r4, [pc, #492]	; (bec <bmp280_compensate_pressure_double+0x300>)
     a00:	69ba      	ldr	r2, [r7, #24]
     a02:	69fb      	ldr	r3, [r7, #28]
     a04:	47a0      	blx	r4
     a06:	0003      	movs	r3, r0
     a08:	000c      	movs	r4, r1
     a0a:	0018      	movs	r0, r3
     a0c:	0021      	movs	r1, r4
     a0e:	4c74      	ldr	r4, [pc, #464]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     a10:	2200      	movs	r2, #0
     a12:	4b7b      	ldr	r3, [pc, #492]	; (c00 <bmp280_compensate_pressure_double+0x314>)
     a14:	47a0      	blx	r4
     a16:	0003      	movs	r3, r0
     a18:	000c      	movs	r4, r1
     a1a:	001d      	movs	r5, r3
     a1c:	0026      	movs	r6, r4
	+ ((double) dig_P2) * var1) / 524288.0;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	220c      	movs	r2, #12
     a22:	5e9a      	ldrsh	r2, [r3, r2]
     a24:	4b6d      	ldr	r3, [pc, #436]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     a26:	0010      	movs	r0, r2
     a28:	4798      	blx	r3
     a2a:	4c70      	ldr	r4, [pc, #448]	; (bec <bmp280_compensate_pressure_double+0x300>)
     a2c:	69ba      	ldr	r2, [r7, #24]
     a2e:	69fb      	ldr	r3, [r7, #28]
     a30:	47a0      	blx	r4
     a32:	0003      	movs	r3, r0
     a34:	000c      	movs	r4, r1
     a36:	001a      	movs	r2, r3
     a38:	0023      	movs	r3, r4
     a3a:	4c6e      	ldr	r4, [pc, #440]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     a3c:	0028      	movs	r0, r5
     a3e:	0031      	movs	r1, r6
     a40:	47a0      	blx	r4
     a42:	0003      	movs	r3, r0
     a44:	000c      	movs	r4, r1
     a46:	0018      	movs	r0, r3
     a48:	0021      	movs	r1, r4
	var1 = (((double) dig_P3) * var1 * var1 / 524288.0
     a4a:	4c65      	ldr	r4, [pc, #404]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     a4c:	2200      	movs	r2, #0
     a4e:	4b6c      	ldr	r3, [pc, #432]	; (c00 <bmp280_compensate_pressure_double+0x314>)
     a50:	47a0      	blx	r4
     a52:	0003      	movs	r3, r0
     a54:	000c      	movs	r4, r1
     a56:	61bb      	str	r3, [r7, #24]
     a58:	61fc      	str	r4, [r7, #28]
	var1 = (1.0 + var1 / 32768.0) * ((double) dig_P1);
     a5a:	4c61      	ldr	r4, [pc, #388]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     a5c:	2200      	movs	r2, #0
     a5e:	4b64      	ldr	r3, [pc, #400]	; (bf0 <bmp280_compensate_pressure_double+0x304>)
     a60:	69b8      	ldr	r0, [r7, #24]
     a62:	69f9      	ldr	r1, [r7, #28]
     a64:	47a0      	blx	r4
     a66:	0003      	movs	r3, r0
     a68:	000c      	movs	r4, r1
     a6a:	0018      	movs	r0, r3
     a6c:	0021      	movs	r1, r4
     a6e:	4c61      	ldr	r4, [pc, #388]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     a70:	2200      	movs	r2, #0
     a72:	4b64      	ldr	r3, [pc, #400]	; (c04 <bmp280_compensate_pressure_double+0x318>)
     a74:	47a0      	blx	r4
     a76:	0003      	movs	r3, r0
     a78:	000c      	movs	r4, r1
     a7a:	001d      	movs	r5, r3
     a7c:	0026      	movs	r6, r4
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	895a      	ldrh	r2, [r3, #10]
     a82:	4b61      	ldr	r3, [pc, #388]	; (c08 <bmp280_compensate_pressure_double+0x31c>)
     a84:	0010      	movs	r0, r2
     a86:	4798      	blx	r3
     a88:	0002      	movs	r2, r0
     a8a:	000b      	movs	r3, r1
     a8c:	4c57      	ldr	r4, [pc, #348]	; (bec <bmp280_compensate_pressure_double+0x300>)
     a8e:	0028      	movs	r0, r5
     a90:	0031      	movs	r1, r6
     a92:	47a0      	blx	r4
     a94:	0003      	movs	r3, r0
     a96:	000c      	movs	r4, r1
     a98:	61bb      	str	r3, [r7, #24]
     a9a:	61fc      	str	r4, [r7, #28]
	
	if (var1 == 0.0) {
     a9c:	4c5b      	ldr	r4, [pc, #364]	; (c0c <bmp280_compensate_pressure_double+0x320>)
     a9e:	2200      	movs	r2, #0
     aa0:	2300      	movs	r3, #0
     aa2:	69b8      	ldr	r0, [r7, #24]
     aa4:	69f9      	ldr	r1, [r7, #28]
     aa6:	47a0      	blx	r4
     aa8:	1e03      	subs	r3, r0, #0
     aaa:	d002      	beq.n	ab2 <bmp280_compensate_pressure_double+0x1c6>
		return 0; // avoid exception caused by division by zero
     aac:	2300      	movs	r3, #0
     aae:	2400      	movs	r4, #0
     ab0:	e08e      	b.n	bd0 <bmp280_compensate_pressure_double+0x2e4>
	}
	
	pressure = 1048576.0 - (double) adc_P;
     ab2:	4b4a      	ldr	r3, [pc, #296]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     ab4:	6838      	ldr	r0, [r7, #0]
     ab6:	4798      	blx	r3
     ab8:	0002      	movs	r2, r0
     aba:	000b      	movs	r3, r1
     abc:	4c49      	ldr	r4, [pc, #292]	; (be4 <bmp280_compensate_pressure_double+0x2f8>)
     abe:	2000      	movs	r0, #0
     ac0:	4953      	ldr	r1, [pc, #332]	; (c10 <bmp280_compensate_pressure_double+0x324>)
     ac2:	47a0      	blx	r4
     ac4:	0003      	movs	r3, r0
     ac6:	000c      	movs	r4, r1
     ac8:	60bb      	str	r3, [r7, #8]
     aca:	60fc      	str	r4, [r7, #12]
	pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
     acc:	4c44      	ldr	r4, [pc, #272]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     ace:	2200      	movs	r2, #0
     ad0:	4b50      	ldr	r3, [pc, #320]	; (c14 <bmp280_compensate_pressure_double+0x328>)
     ad2:	6938      	ldr	r0, [r7, #16]
     ad4:	6979      	ldr	r1, [r7, #20]
     ad6:	47a0      	blx	r4
     ad8:	0003      	movs	r3, r0
     ada:	000c      	movs	r4, r1
     adc:	001a      	movs	r2, r3
     ade:	0023      	movs	r3, r4
     ae0:	4c40      	ldr	r4, [pc, #256]	; (be4 <bmp280_compensate_pressure_double+0x2f8>)
     ae2:	68b8      	ldr	r0, [r7, #8]
     ae4:	68f9      	ldr	r1, [r7, #12]
     ae6:	47a0      	blx	r4
     ae8:	0003      	movs	r3, r0
     aea:	000c      	movs	r4, r1
     aec:	0018      	movs	r0, r3
     aee:	0021      	movs	r1, r4
     af0:	4c3e      	ldr	r4, [pc, #248]	; (bec <bmp280_compensate_pressure_double+0x300>)
     af2:	2200      	movs	r2, #0
     af4:	4b48      	ldr	r3, [pc, #288]	; (c18 <bmp280_compensate_pressure_double+0x32c>)
     af6:	47a0      	blx	r4
     af8:	0003      	movs	r3, r0
     afa:	000c      	movs	r4, r1
     afc:	0018      	movs	r0, r3
     afe:	0021      	movs	r1, r4
     b00:	4c37      	ldr	r4, [pc, #220]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     b02:	69ba      	ldr	r2, [r7, #24]
     b04:	69fb      	ldr	r3, [r7, #28]
     b06:	47a0      	blx	r4
     b08:	0003      	movs	r3, r0
     b0a:	000c      	movs	r4, r1
     b0c:	60bb      	str	r3, [r7, #8]
     b0e:	60fc      	str	r4, [r7, #12]
	var1 = ((double) dig_P9) * pressure * pressure / 2147483648.0;
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	221a      	movs	r2, #26
     b14:	5e9a      	ldrsh	r2, [r3, r2]
     b16:	4b31      	ldr	r3, [pc, #196]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     b18:	0010      	movs	r0, r2
     b1a:	4798      	blx	r3
     b1c:	4c33      	ldr	r4, [pc, #204]	; (bec <bmp280_compensate_pressure_double+0x300>)
     b1e:	68ba      	ldr	r2, [r7, #8]
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	47a0      	blx	r4
     b24:	0003      	movs	r3, r0
     b26:	000c      	movs	r4, r1
     b28:	0018      	movs	r0, r3
     b2a:	0021      	movs	r1, r4
     b2c:	4c2f      	ldr	r4, [pc, #188]	; (bec <bmp280_compensate_pressure_double+0x300>)
     b2e:	68ba      	ldr	r2, [r7, #8]
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	47a0      	blx	r4
     b34:	0003      	movs	r3, r0
     b36:	000c      	movs	r4, r1
     b38:	0018      	movs	r0, r3
     b3a:	0021      	movs	r1, r4
     b3c:	4c28      	ldr	r4, [pc, #160]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     b3e:	2200      	movs	r2, #0
     b40:	4b36      	ldr	r3, [pc, #216]	; (c1c <bmp280_compensate_pressure_double+0x330>)
     b42:	47a0      	blx	r4
     b44:	0003      	movs	r3, r0
     b46:	000c      	movs	r4, r1
     b48:	61bb      	str	r3, [r7, #24]
     b4a:	61fc      	str	r4, [r7, #28]
	var2 = pressure * ((double) dig_P8) / 32768.0;
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	2218      	movs	r2, #24
     b50:	5e9a      	ldrsh	r2, [r3, r2]
     b52:	4b22      	ldr	r3, [pc, #136]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     b54:	0010      	movs	r0, r2
     b56:	4798      	blx	r3
     b58:	4c24      	ldr	r4, [pc, #144]	; (bec <bmp280_compensate_pressure_double+0x300>)
     b5a:	68ba      	ldr	r2, [r7, #8]
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	47a0      	blx	r4
     b60:	0003      	movs	r3, r0
     b62:	000c      	movs	r4, r1
     b64:	0018      	movs	r0, r3
     b66:	0021      	movs	r1, r4
     b68:	4c1d      	ldr	r4, [pc, #116]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     b6a:	2200      	movs	r2, #0
     b6c:	4b20      	ldr	r3, [pc, #128]	; (bf0 <bmp280_compensate_pressure_double+0x304>)
     b6e:	47a0      	blx	r4
     b70:	0003      	movs	r3, r0
     b72:	000c      	movs	r4, r1
     b74:	613b      	str	r3, [r7, #16]
     b76:	617c      	str	r4, [r7, #20]
	pressure = pressure + (var1 + var2 + ((double) dig_P7)) / 16.0;
     b78:	4c1e      	ldr	r4, [pc, #120]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     b7a:	693a      	ldr	r2, [r7, #16]
     b7c:	697b      	ldr	r3, [r7, #20]
     b7e:	69b8      	ldr	r0, [r7, #24]
     b80:	69f9      	ldr	r1, [r7, #28]
     b82:	47a0      	blx	r4
     b84:	0003      	movs	r3, r0
     b86:	000c      	movs	r4, r1
     b88:	001d      	movs	r5, r3
     b8a:	0026      	movs	r6, r4
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	2216      	movs	r2, #22
     b90:	5e9a      	ldrsh	r2, [r3, r2]
     b92:	4b12      	ldr	r3, [pc, #72]	; (bdc <bmp280_compensate_pressure_double+0x2f0>)
     b94:	0010      	movs	r0, r2
     b96:	4798      	blx	r3
     b98:	0002      	movs	r2, r0
     b9a:	000b      	movs	r3, r1
     b9c:	4c15      	ldr	r4, [pc, #84]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     b9e:	0028      	movs	r0, r5
     ba0:	0031      	movs	r1, r6
     ba2:	47a0      	blx	r4
     ba4:	0003      	movs	r3, r0
     ba6:	000c      	movs	r4, r1
     ba8:	0018      	movs	r0, r3
     baa:	0021      	movs	r1, r4
     bac:	4c0c      	ldr	r4, [pc, #48]	; (be0 <bmp280_compensate_pressure_double+0x2f4>)
     bae:	2200      	movs	r2, #0
     bb0:	4b1b      	ldr	r3, [pc, #108]	; (c20 <bmp280_compensate_pressure_double+0x334>)
     bb2:	47a0      	blx	r4
     bb4:	0003      	movs	r3, r0
     bb6:	000c      	movs	r4, r1
     bb8:	001a      	movs	r2, r3
     bba:	0023      	movs	r3, r4
     bbc:	4c0d      	ldr	r4, [pc, #52]	; (bf4 <bmp280_compensate_pressure_double+0x308>)
     bbe:	68b8      	ldr	r0, [r7, #8]
     bc0:	68f9      	ldr	r1, [r7, #12]
     bc2:	47a0      	blx	r4
     bc4:	0003      	movs	r3, r0
     bc6:	000c      	movs	r4, r1
     bc8:	60bb      	str	r3, [r7, #8]
     bca:	60fc      	str	r4, [r7, #12]
	
	return pressure;
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	68fc      	ldr	r4, [r7, #12]
}
     bd0:	0018      	movs	r0, r3
     bd2:	0021      	movs	r1, r4
     bd4:	46bd      	mov	sp, r7
     bd6:	b009      	add	sp, #36	; 0x24
     bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	0000553d 	.word	0x0000553d
     be0:	00004141 	.word	0x00004141
     be4:	00004ea9 	.word	0x00004ea9
     be8:	40ef4000 	.word	0x40ef4000
     bec:	000049a9 	.word	0x000049a9
     bf0:	40e00000 	.word	0x40e00000
     bf4:	00003b21 	.word	0x00003b21
     bf8:	40100000 	.word	0x40100000
     bfc:	40f00000 	.word	0x40f00000
     c00:	41200000 	.word	0x41200000
     c04:	3ff00000 	.word	0x3ff00000
     c08:	000055c1 	.word	0x000055c1
     c0c:	00003ac5 	.word	0x00003ac5
     c10:	41300000 	.word	0x41300000
     c14:	40b00000 	.word	0x40b00000
     c18:	40b86a00 	.word	0x40b86a00
     c1c:	41e00000 	.word	0x41e00000
     c20:	40300000 	.word	0x40300000

00000c24 <bmp280_get_temperature>:
}
#endif

/* Returns temperature in DegC, double precision. Output value of “51.23” equals 51.23 DegC. */
double bmp280_get_temperature(struct bmp280 *bmp280)
{
     c24:	b590      	push	{r4, r7, lr}
     c26:	b087      	sub	sp, #28
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
	uint8_t lsb, msb, xlsb;
	int32_t adc_T;
	double temperature;
	
	xlsb = bmp280_read_register(bmp280->i2c, BMP280_TEMPERATURE_XLSB_REG);
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	2217      	movs	r2, #23
     c32:	18bc      	adds	r4, r7, r2
     c34:	21fc      	movs	r1, #252	; 0xfc
     c36:	0018      	movs	r0, r3
     c38:	4b1c      	ldr	r3, [pc, #112]	; (cac <bmp280_get_temperature+0x88>)
     c3a:	4798      	blx	r3
     c3c:	0003      	movs	r3, r0
     c3e:	7023      	strb	r3, [r4, #0]
	lsb = bmp280_read_register(bmp280->i2c, BMP280_TEMPERATURE_LSB_REG);
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	2216      	movs	r2, #22
     c46:	18bc      	adds	r4, r7, r2
     c48:	21fb      	movs	r1, #251	; 0xfb
     c4a:	0018      	movs	r0, r3
     c4c:	4b17      	ldr	r3, [pc, #92]	; (cac <bmp280_get_temperature+0x88>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(bmp280->i2c, BMP280_TEMPERATURE_MSB_REG);
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	2215      	movs	r2, #21
     c5a:	18bc      	adds	r4, r7, r2
     c5c:	21fa      	movs	r1, #250	; 0xfa
     c5e:	0018      	movs	r0, r3
     c60:	4b12      	ldr	r3, [pc, #72]	; (cac <bmp280_get_temperature+0x88>)
     c62:	4798      	blx	r3
     c64:	0003      	movs	r3, r0
     c66:	7023      	strb	r3, [r4, #0]
	
	adc_T = (msb << 12) | (lsb << 4) | (xlsb >> 4);
     c68:	2315      	movs	r3, #21
     c6a:	18fb      	adds	r3, r7, r3
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	031a      	lsls	r2, r3, #12
     c70:	2316      	movs	r3, #22
     c72:	18fb      	adds	r3, r7, r3
     c74:	781b      	ldrb	r3, [r3, #0]
     c76:	011b      	lsls	r3, r3, #4
     c78:	4313      	orrs	r3, r2
     c7a:	2217      	movs	r2, #23
     c7c:	18ba      	adds	r2, r7, r2
     c7e:	7812      	ldrb	r2, [r2, #0]
     c80:	0912      	lsrs	r2, r2, #4
     c82:	b2d2      	uxtb	r2, r2
     c84:	4313      	orrs	r3, r2
     c86:	613b      	str	r3, [r7, #16]
	temperature = bmp280_compensate_temperature_double(bmp280, adc_T);
     c88:	693a      	ldr	r2, [r7, #16]
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	0011      	movs	r1, r2
     c8e:	0018      	movs	r0, r3
     c90:	4b07      	ldr	r3, [pc, #28]	; (cb0 <bmp280_get_temperature+0x8c>)
     c92:	4798      	blx	r3
     c94:	0003      	movs	r3, r0
     c96:	000c      	movs	r4, r1
     c98:	60bb      	str	r3, [r7, #8]
     c9a:	60fc      	str	r4, [r7, #12]
	
	return temperature;
     c9c:	68bb      	ldr	r3, [r7, #8]
     c9e:	68fc      	ldr	r4, [r7, #12]
}
     ca0:	0018      	movs	r0, r3
     ca2:	0021      	movs	r1, r4
     ca4:	46bd      	mov	sp, r7
     ca6:	b007      	add	sp, #28
     ca8:	bd90      	pop	{r4, r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	00000119 	.word	0x00000119
     cb0:	0000074d 	.word	0x0000074d

00000cb4 <bmp280_get_humidity>:
double bmp280_get_humidity(struct bmp280 *bmp280)
{
     cb4:	b590      	push	{r4, r7, lr}
     cb6:	b087      	sub	sp, #28
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
	uint8_t lsb, msb, xlsb;
	int32_t adc_T;
	double temperature;
	
	lsb = bmp280_read_register(bmp280->i2c, BMP280_HUMIDITY_LSB_REG);
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	2217      	movs	r2, #23
     cc2:	18bc      	adds	r4, r7, r2
     cc4:	21fe      	movs	r1, #254	; 0xfe
     cc6:	0018      	movs	r0, r3
     cc8:	4b13      	ldr	r3, [pc, #76]	; (d18 <bmp280_get_humidity+0x64>)
     cca:	4798      	blx	r3
     ccc:	0003      	movs	r3, r0
     cce:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(bmp280->i2c, BMP280_HUMIDITY_MSB_REG);
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	2216      	movs	r2, #22
     cd6:	18bc      	adds	r4, r7, r2
     cd8:	21fd      	movs	r1, #253	; 0xfd
     cda:	0018      	movs	r0, r3
     cdc:	4b0e      	ldr	r3, [pc, #56]	; (d18 <bmp280_get_humidity+0x64>)
     cde:	4798      	blx	r3
     ce0:	0003      	movs	r3, r0
     ce2:	7023      	strb	r3, [r4, #0]
	
	adc_T = (msb << 8) | lsb;
     ce4:	2316      	movs	r3, #22
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	021a      	lsls	r2, r3, #8
     cec:	2317      	movs	r3, #23
     cee:	18fb      	adds	r3, r7, r3
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	4313      	orrs	r3, r2
     cf4:	613b      	str	r3, [r7, #16]
	temperature = bme280_compensate_H_double(bmp280, adc_T);
     cf6:	693a      	ldr	r2, [r7, #16]
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	0011      	movs	r1, r2
     cfc:	0018      	movs	r0, r3
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <bmp280_get_humidity+0x68>)
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	000c      	movs	r4, r1
     d06:	60bb      	str	r3, [r7, #8]
     d08:	60fc      	str	r4, [r7, #12]
	
	return temperature;
     d0a:	68bb      	ldr	r3, [r7, #8]
     d0c:	68fc      	ldr	r4, [r7, #12]
}
     d0e:	0018      	movs	r0, r3
     d10:	0021      	movs	r1, r4
     d12:	46bd      	mov	sp, r7
     d14:	b007      	add	sp, #28
     d16:	bd90      	pop	{r4, r7, pc}
     d18:	00000119 	.word	0x00000119
     d1c:	00000db1 	.word	0x00000db1

00000d20 <bmp280_get_pressure>:
/* Returns pressure in Pa as double. Output value of “96386.2” equals 96386.2 Pa = 963.862 hPa */
double bmp280_get_pressure(struct bmp280 *bmp280)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b087      	sub	sp, #28
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	uint8_t lsb, msb, xlsb;
	int32_t adc_P;
	double pressure;
	
	
	xlsb = bmp280_read_register(bmp280->i2c, BMP280_PRESSURE_XLSB_REG);
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	2217      	movs	r2, #23
     d2e:	18bc      	adds	r4, r7, r2
     d30:	21f9      	movs	r1, #249	; 0xf9
     d32:	0018      	movs	r0, r3
     d34:	4b1c      	ldr	r3, [pc, #112]	; (da8 <bmp280_get_pressure+0x88>)
     d36:	4798      	blx	r3
     d38:	0003      	movs	r3, r0
     d3a:	7023      	strb	r3, [r4, #0]
	lsb = bmp280_read_register(bmp280->i2c, BMP280_PRESSURE_LSB_REG);
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	2216      	movs	r2, #22
     d42:	18bc      	adds	r4, r7, r2
     d44:	21f8      	movs	r1, #248	; 0xf8
     d46:	0018      	movs	r0, r3
     d48:	4b17      	ldr	r3, [pc, #92]	; (da8 <bmp280_get_pressure+0x88>)
     d4a:	4798      	blx	r3
     d4c:	0003      	movs	r3, r0
     d4e:	7023      	strb	r3, [r4, #0]
	msb = bmp280_read_register(bmp280->i2c, BMP280_PRESSURE_MSB_REG);
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	2215      	movs	r2, #21
     d56:	18bc      	adds	r4, r7, r2
     d58:	21f7      	movs	r1, #247	; 0xf7
     d5a:	0018      	movs	r0, r3
     d5c:	4b12      	ldr	r3, [pc, #72]	; (da8 <bmp280_get_pressure+0x88>)
     d5e:	4798      	blx	r3
     d60:	0003      	movs	r3, r0
     d62:	7023      	strb	r3, [r4, #0]
	
	adc_P = (msb << 12) | (lsb << 4) | (xlsb >> 4);
     d64:	2315      	movs	r3, #21
     d66:	18fb      	adds	r3, r7, r3
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	031a      	lsls	r2, r3, #12
     d6c:	2316      	movs	r3, #22
     d6e:	18fb      	adds	r3, r7, r3
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	011b      	lsls	r3, r3, #4
     d74:	4313      	orrs	r3, r2
     d76:	2217      	movs	r2, #23
     d78:	18ba      	adds	r2, r7, r2
     d7a:	7812      	ldrb	r2, [r2, #0]
     d7c:	0912      	lsrs	r2, r2, #4
     d7e:	b2d2      	uxtb	r2, r2
     d80:	4313      	orrs	r3, r2
     d82:	613b      	str	r3, [r7, #16]
	pressure = bmp280_compensate_pressure_double(bmp280, adc_P);
     d84:	693a      	ldr	r2, [r7, #16]
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	0011      	movs	r1, r2
     d8a:	0018      	movs	r0, r3
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <bmp280_get_pressure+0x8c>)
     d8e:	4798      	blx	r3
     d90:	0003      	movs	r3, r0
     d92:	000c      	movs	r4, r1
     d94:	60bb      	str	r3, [r7, #8]
     d96:	60fc      	str	r4, [r7, #12]
	
	return pressure;
     d98:	68bb      	ldr	r3, [r7, #8]
     d9a:	68fc      	ldr	r4, [r7, #12]
}
     d9c:	0018      	movs	r0, r3
     d9e:	0021      	movs	r1, r4
     da0:	46bd      	mov	sp, r7
     da2:	b007      	add	sp, #28
     da4:	bd90      	pop	{r4, r7, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00000119 	.word	0x00000119
     dac:	000008ed 	.word	0x000008ed

00000db0 <bme280_compensate_H_double>:
// Returns humidity in %RH as unsigned 32 bit integer Q22.10 format (22 and 10 fractional bits).
// Output value of “47 445” represents 47445/1024 = 46.333 %RH
double bme280_compensate_H_double(struct bmp280 *bmp280, int32_t adc_H)
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	b089      	sub	sp, #36	; 0x24
     db4:	af00      	add	r7, sp, #0
     db6:	6178      	str	r0, [r7, #20]
     db8:	6139      	str	r1, [r7, #16]
	double var_H;
	var_H = ((( double )bmp280->t_fine) - 76800.0);
     dba:	697b      	ldr	r3, [r7, #20]
     dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     dbe:	4b75      	ldr	r3, [pc, #468]	; (f94 <bme280_compensate_H_double+0x1e4>)
     dc0:	0010      	movs	r0, r2
     dc2:	4798      	blx	r3
     dc4:	4c74      	ldr	r4, [pc, #464]	; (f98 <bme280_compensate_H_double+0x1e8>)
     dc6:	2200      	movs	r2, #0
     dc8:	4b74      	ldr	r3, [pc, #464]	; (f9c <bme280_compensate_H_double+0x1ec>)
     dca:	47a0      	blx	r4
     dcc:	0003      	movs	r3, r0
     dce:	000c      	movs	r4, r1
     dd0:	61bb      	str	r3, [r7, #24]
     dd2:	61fc      	str	r4, [r7, #28]
	var_H = (adc_H- ((( double )dig_H4) * 64.0 + (( double )dig_H5) / 16384.0 * var_H)) * ((( double )dig_H2) / 65536.0 * (1.0 + (( double )dig_H6) / 67108864.0 * var_H *(1.0 + (( double )dig_H3) / 67108864.0 * var_H)));
     dd4:	4b6f      	ldr	r3, [pc, #444]	; (f94 <bme280_compensate_H_double+0x1e4>)
     dd6:	6938      	ldr	r0, [r7, #16]
     dd8:	4798      	blx	r3
     dda:	0005      	movs	r5, r0
     ddc:	000e      	movs	r6, r1
     dde:	697b      	ldr	r3, [r7, #20]
     de0:	2222      	movs	r2, #34	; 0x22
     de2:	5e9a      	ldrsh	r2, [r3, r2]
     de4:	4b6b      	ldr	r3, [pc, #428]	; (f94 <bme280_compensate_H_double+0x1e4>)
     de6:	0010      	movs	r0, r2
     de8:	4798      	blx	r3
     dea:	4c6d      	ldr	r4, [pc, #436]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     dec:	2200      	movs	r2, #0
     dee:	4b6d      	ldr	r3, [pc, #436]	; (fa4 <bme280_compensate_H_double+0x1f4>)
     df0:	47a0      	blx	r4
     df2:	0003      	movs	r3, r0
     df4:	000c      	movs	r4, r1
     df6:	60bb      	str	r3, [r7, #8]
     df8:	60fc      	str	r4, [r7, #12]
     dfa:	697b      	ldr	r3, [r7, #20]
     dfc:	2124      	movs	r1, #36	; 0x24
     dfe:	5e5a      	ldrsh	r2, [r3, r1]
     e00:	4b64      	ldr	r3, [pc, #400]	; (f94 <bme280_compensate_H_double+0x1e4>)
     e02:	0010      	movs	r0, r2
     e04:	4798      	blx	r3
     e06:	4c68      	ldr	r4, [pc, #416]	; (fa8 <bme280_compensate_H_double+0x1f8>)
     e08:	2200      	movs	r2, #0
     e0a:	4b68      	ldr	r3, [pc, #416]	; (fac <bme280_compensate_H_double+0x1fc>)
     e0c:	47a0      	blx	r4
     e0e:	0003      	movs	r3, r0
     e10:	000c      	movs	r4, r1
     e12:	0018      	movs	r0, r3
     e14:	0021      	movs	r1, r4
     e16:	4c62      	ldr	r4, [pc, #392]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     e18:	69ba      	ldr	r2, [r7, #24]
     e1a:	69fb      	ldr	r3, [r7, #28]
     e1c:	47a0      	blx	r4
     e1e:	0003      	movs	r3, r0
     e20:	000c      	movs	r4, r1
     e22:	001a      	movs	r2, r3
     e24:	0023      	movs	r3, r4
     e26:	4c62      	ldr	r4, [pc, #392]	; (fb0 <bme280_compensate_H_double+0x200>)
     e28:	68b8      	ldr	r0, [r7, #8]
     e2a:	68f9      	ldr	r1, [r7, #12]
     e2c:	47a0      	blx	r4
     e2e:	0003      	movs	r3, r0
     e30:	000c      	movs	r4, r1
     e32:	001a      	movs	r2, r3
     e34:	0023      	movs	r3, r4
     e36:	4c58      	ldr	r4, [pc, #352]	; (f98 <bme280_compensate_H_double+0x1e8>)
     e38:	0028      	movs	r0, r5
     e3a:	0031      	movs	r1, r6
     e3c:	47a0      	blx	r4
     e3e:	0003      	movs	r3, r0
     e40:	000c      	movs	r4, r1
     e42:	001d      	movs	r5, r3
     e44:	0026      	movs	r6, r4
     e46:	697b      	ldr	r3, [r7, #20]
     e48:	221e      	movs	r2, #30
     e4a:	5e9a      	ldrsh	r2, [r3, r2]
     e4c:	4b51      	ldr	r3, [pc, #324]	; (f94 <bme280_compensate_H_double+0x1e4>)
     e4e:	0010      	movs	r0, r2
     e50:	4798      	blx	r3
     e52:	4c55      	ldr	r4, [pc, #340]	; (fa8 <bme280_compensate_H_double+0x1f8>)
     e54:	2200      	movs	r2, #0
     e56:	4b57      	ldr	r3, [pc, #348]	; (fb4 <bme280_compensate_H_double+0x204>)
     e58:	47a0      	blx	r4
     e5a:	0003      	movs	r3, r0
     e5c:	000c      	movs	r4, r1
     e5e:	60bb      	str	r3, [r7, #8]
     e60:	60fc      	str	r4, [r7, #12]
     e62:	697b      	ldr	r3, [r7, #20]
     e64:	2126      	movs	r1, #38	; 0x26
     e66:	5e5a      	ldrsh	r2, [r3, r1]
     e68:	4b4a      	ldr	r3, [pc, #296]	; (f94 <bme280_compensate_H_double+0x1e4>)
     e6a:	0010      	movs	r0, r2
     e6c:	4798      	blx	r3
     e6e:	4c4e      	ldr	r4, [pc, #312]	; (fa8 <bme280_compensate_H_double+0x1f8>)
     e70:	2200      	movs	r2, #0
     e72:	4b51      	ldr	r3, [pc, #324]	; (fb8 <bme280_compensate_H_double+0x208>)
     e74:	47a0      	blx	r4
     e76:	0003      	movs	r3, r0
     e78:	000c      	movs	r4, r1
     e7a:	0018      	movs	r0, r3
     e7c:	0021      	movs	r1, r4
     e7e:	4c48      	ldr	r4, [pc, #288]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     e80:	69ba      	ldr	r2, [r7, #24]
     e82:	69fb      	ldr	r3, [r7, #28]
     e84:	47a0      	blx	r4
     e86:	0003      	movs	r3, r0
     e88:	000c      	movs	r4, r1
     e8a:	603b      	str	r3, [r7, #0]
     e8c:	607c      	str	r4, [r7, #4]
     e8e:	697b      	ldr	r3, [r7, #20]
     e90:	2220      	movs	r2, #32
     e92:	5c9a      	ldrb	r2, [r3, r2]
     e94:	4b49      	ldr	r3, [pc, #292]	; (fbc <bme280_compensate_H_double+0x20c>)
     e96:	0010      	movs	r0, r2
     e98:	4798      	blx	r3
     e9a:	4c43      	ldr	r4, [pc, #268]	; (fa8 <bme280_compensate_H_double+0x1f8>)
     e9c:	2200      	movs	r2, #0
     e9e:	4b46      	ldr	r3, [pc, #280]	; (fb8 <bme280_compensate_H_double+0x208>)
     ea0:	47a0      	blx	r4
     ea2:	0003      	movs	r3, r0
     ea4:	000c      	movs	r4, r1
     ea6:	0018      	movs	r0, r3
     ea8:	0021      	movs	r1, r4
     eaa:	4c3d      	ldr	r4, [pc, #244]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     eac:	69ba      	ldr	r2, [r7, #24]
     eae:	69fb      	ldr	r3, [r7, #28]
     eb0:	47a0      	blx	r4
     eb2:	0003      	movs	r3, r0
     eb4:	000c      	movs	r4, r1
     eb6:	0018      	movs	r0, r3
     eb8:	0021      	movs	r1, r4
     eba:	4c3d      	ldr	r4, [pc, #244]	; (fb0 <bme280_compensate_H_double+0x200>)
     ebc:	2200      	movs	r2, #0
     ebe:	4b40      	ldr	r3, [pc, #256]	; (fc0 <bme280_compensate_H_double+0x210>)
     ec0:	47a0      	blx	r4
     ec2:	0003      	movs	r3, r0
     ec4:	000c      	movs	r4, r1
     ec6:	001a      	movs	r2, r3
     ec8:	0023      	movs	r3, r4
     eca:	4c35      	ldr	r4, [pc, #212]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     ecc:	6838      	ldr	r0, [r7, #0]
     ece:	6879      	ldr	r1, [r7, #4]
     ed0:	47a0      	blx	r4
     ed2:	0003      	movs	r3, r0
     ed4:	000c      	movs	r4, r1
     ed6:	0018      	movs	r0, r3
     ed8:	0021      	movs	r1, r4
     eda:	4c35      	ldr	r4, [pc, #212]	; (fb0 <bme280_compensate_H_double+0x200>)
     edc:	2200      	movs	r2, #0
     ede:	4b38      	ldr	r3, [pc, #224]	; (fc0 <bme280_compensate_H_double+0x210>)
     ee0:	47a0      	blx	r4
     ee2:	0003      	movs	r3, r0
     ee4:	000c      	movs	r4, r1
     ee6:	001a      	movs	r2, r3
     ee8:	0023      	movs	r3, r4
     eea:	4c2d      	ldr	r4, [pc, #180]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     eec:	68b8      	ldr	r0, [r7, #8]
     eee:	68f9      	ldr	r1, [r7, #12]
     ef0:	47a0      	blx	r4
     ef2:	0003      	movs	r3, r0
     ef4:	000c      	movs	r4, r1
     ef6:	001a      	movs	r2, r3
     ef8:	0023      	movs	r3, r4
     efa:	4c29      	ldr	r4, [pc, #164]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     efc:	0028      	movs	r0, r5
     efe:	0031      	movs	r1, r6
     f00:	47a0      	blx	r4
     f02:	0003      	movs	r3, r0
     f04:	000c      	movs	r4, r1
     f06:	61bb      	str	r3, [r7, #24]
     f08:	61fc      	str	r4, [r7, #28]
	var_H = var_H * (1.0 - (( double )dig_H1) * var_H / 524288.0);
     f0a:	697b      	ldr	r3, [r7, #20]
     f0c:	7f1a      	ldrb	r2, [r3, #28]
     f0e:	4b2b      	ldr	r3, [pc, #172]	; (fbc <bme280_compensate_H_double+0x20c>)
     f10:	0010      	movs	r0, r2
     f12:	4798      	blx	r3
     f14:	4c22      	ldr	r4, [pc, #136]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     f16:	69ba      	ldr	r2, [r7, #24]
     f18:	69fb      	ldr	r3, [r7, #28]
     f1a:	47a0      	blx	r4
     f1c:	0003      	movs	r3, r0
     f1e:	000c      	movs	r4, r1
     f20:	0018      	movs	r0, r3
     f22:	0021      	movs	r1, r4
     f24:	4c20      	ldr	r4, [pc, #128]	; (fa8 <bme280_compensate_H_double+0x1f8>)
     f26:	2200      	movs	r2, #0
     f28:	4b26      	ldr	r3, [pc, #152]	; (fc4 <bme280_compensate_H_double+0x214>)
     f2a:	47a0      	blx	r4
     f2c:	0003      	movs	r3, r0
     f2e:	000c      	movs	r4, r1
     f30:	001a      	movs	r2, r3
     f32:	0023      	movs	r3, r4
     f34:	4c18      	ldr	r4, [pc, #96]	; (f98 <bme280_compensate_H_double+0x1e8>)
     f36:	2000      	movs	r0, #0
     f38:	4921      	ldr	r1, [pc, #132]	; (fc0 <bme280_compensate_H_double+0x210>)
     f3a:	47a0      	blx	r4
     f3c:	0003      	movs	r3, r0
     f3e:	000c      	movs	r4, r1
     f40:	001a      	movs	r2, r3
     f42:	0023      	movs	r3, r4
     f44:	4c16      	ldr	r4, [pc, #88]	; (fa0 <bme280_compensate_H_double+0x1f0>)
     f46:	69b8      	ldr	r0, [r7, #24]
     f48:	69f9      	ldr	r1, [r7, #28]
     f4a:	47a0      	blx	r4
     f4c:	0003      	movs	r3, r0
     f4e:	000c      	movs	r4, r1
     f50:	61bb      	str	r3, [r7, #24]
     f52:	61fc      	str	r4, [r7, #28]
	
	if (var_H > 100.0)
     f54:	4c1c      	ldr	r4, [pc, #112]	; (fc8 <bme280_compensate_H_double+0x218>)
     f56:	2200      	movs	r2, #0
     f58:	4b1c      	ldr	r3, [pc, #112]	; (fcc <bme280_compensate_H_double+0x21c>)
     f5a:	69b8      	ldr	r0, [r7, #24]
     f5c:	69f9      	ldr	r1, [r7, #28]
     f5e:	47a0      	blx	r4
     f60:	1e03      	subs	r3, r0, #0
     f62:	d004      	beq.n	f6e <bme280_compensate_H_double+0x1be>
	var_H = 100.0;
     f64:	2300      	movs	r3, #0
     f66:	4c19      	ldr	r4, [pc, #100]	; (fcc <bme280_compensate_H_double+0x21c>)
     f68:	61bb      	str	r3, [r7, #24]
     f6a:	61fc      	str	r4, [r7, #28]
     f6c:	e00b      	b.n	f86 <bme280_compensate_H_double+0x1d6>
	else if (var_H < 0.0)
     f6e:	4c18      	ldr	r4, [pc, #96]	; (fd0 <bme280_compensate_H_double+0x220>)
     f70:	2200      	movs	r2, #0
     f72:	2300      	movs	r3, #0
     f74:	69b8      	ldr	r0, [r7, #24]
     f76:	69f9      	ldr	r1, [r7, #28]
     f78:	47a0      	blx	r4
     f7a:	1e03      	subs	r3, r0, #0
     f7c:	d003      	beq.n	f86 <bme280_compensate_H_double+0x1d6>
	var_H = 0.0;
     f7e:	2300      	movs	r3, #0
     f80:	2400      	movs	r4, #0
     f82:	61bb      	str	r3, [r7, #24]
     f84:	61fc      	str	r4, [r7, #28]
	return var_H;
     f86:	69bb      	ldr	r3, [r7, #24]
     f88:	69fc      	ldr	r4, [r7, #28]
}
     f8a:	0018      	movs	r0, r3
     f8c:	0021      	movs	r1, r4
     f8e:	46bd      	mov	sp, r7
     f90:	b009      	add	sp, #36	; 0x24
     f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f94:	0000553d 	.word	0x0000553d
     f98:	00004ea9 	.word	0x00004ea9
     f9c:	40f2c000 	.word	0x40f2c000
     fa0:	000049a9 	.word	0x000049a9
     fa4:	40500000 	.word	0x40500000
     fa8:	00004141 	.word	0x00004141
     fac:	40d00000 	.word	0x40d00000
     fb0:	00003b21 	.word	0x00003b21
     fb4:	40f00000 	.word	0x40f00000
     fb8:	41900000 	.word	0x41900000
     fbc:	000055c1 	.word	0x000055c1
     fc0:	3ff00000 	.word	0x3ff00000
     fc4:	41200000 	.word	0x41200000
     fc8:	00003af9 	.word	0x00003af9
     fcc:	40590000 	.word	0x40590000
     fd0:	00003ad1 	.word	0x00003ad1

00000fd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     fd4:	b580      	push	{r7, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     fda:	4b19      	ldr	r3, [pc, #100]	; (1040 <Reset_Handler+0x6c>)
     fdc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     fde:	4b19      	ldr	r3, [pc, #100]	; (1044 <Reset_Handler+0x70>)
     fe0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     fe2:	687a      	ldr	r2, [r7, #4]
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	429a      	cmp	r2, r3
     fe8:	d00c      	beq.n	1004 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     fea:	e007      	b.n	ffc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	1d1a      	adds	r2, r3, #4
     ff0:	603a      	str	r2, [r7, #0]
     ff2:	687a      	ldr	r2, [r7, #4]
     ff4:	1d11      	adds	r1, r2, #4
     ff6:	6079      	str	r1, [r7, #4]
     ff8:	6812      	ldr	r2, [r2, #0]
     ffa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     ffc:	683a      	ldr	r2, [r7, #0]
     ffe:	4b12      	ldr	r3, [pc, #72]	; (1048 <Reset_Handler+0x74>)
    1000:	429a      	cmp	r2, r3
    1002:	d3f3      	bcc.n	fec <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1004:	4b11      	ldr	r3, [pc, #68]	; (104c <Reset_Handler+0x78>)
    1006:	603b      	str	r3, [r7, #0]
    1008:	e004      	b.n	1014 <Reset_Handler+0x40>
                *pDest++ = 0;
    100a:	683b      	ldr	r3, [r7, #0]
    100c:	1d1a      	adds	r2, r3, #4
    100e:	603a      	str	r2, [r7, #0]
    1010:	2200      	movs	r2, #0
    1012:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1014:	683a      	ldr	r2, [r7, #0]
    1016:	4b0e      	ldr	r3, [pc, #56]	; (1050 <Reset_Handler+0x7c>)
    1018:	429a      	cmp	r2, r3
    101a:	d3f6      	bcc.n	100a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    101c:	4b0d      	ldr	r3, [pc, #52]	; (1054 <Reset_Handler+0x80>)
    101e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1020:	4b0d      	ldr	r3, [pc, #52]	; (1058 <Reset_Handler+0x84>)
    1022:	687a      	ldr	r2, [r7, #4]
    1024:	21ff      	movs	r1, #255	; 0xff
    1026:	438a      	bics	r2, r1
    1028:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    102a:	4a0c      	ldr	r2, [pc, #48]	; (105c <Reset_Handler+0x88>)
    102c:	6853      	ldr	r3, [r2, #4]
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	430b      	orrs	r3, r1
    1032:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1034:	4b0a      	ldr	r3, [pc, #40]	; (1060 <Reset_Handler+0x8c>)
    1036:	4798      	blx	r3

        /* Branch to main function */
        main();
    1038:	4b0a      	ldr	r3, [pc, #40]	; (1064 <Reset_Handler+0x90>)
    103a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    103c:	e7fe      	b.n	103c <Reset_Handler+0x68>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00006194 	.word	0x00006194
    1044:	20000000 	.word	0x20000000
    1048:	2000008c 	.word	0x2000008c
    104c:	2000008c 	.word	0x2000008c
    1050:	200000e8 	.word	0x200000e8
    1054:	00000000 	.word	0x00000000
    1058:	e000ed00 	.word	0xe000ed00
    105c:	41004000 	.word	0x41004000
    1060:	0000566d 	.word	0x0000566d
    1064:	000034d5 	.word	0x000034d5

00001068 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1068:	b580      	push	{r7, lr}
    106a:	af00      	add	r7, sp, #0
        while (1) {
    106c:	e7fe      	b.n	106c <Dummy_Handler+0x4>

0000106e <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
    106e:	b580      	push	{r7, lr}
    1070:	b082      	sub	sp, #8
    1072:	af00      	add	r7, sp, #0
    1074:	6078      	str	r0, [r7, #4]
    1076:	000a      	movs	r2, r1
    1078:	1cbb      	adds	r3, r7, #2
    107a:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	1cba      	adds	r2, r7, #2
    1080:	8812      	ldrh	r2, [r2, #0]
    1082:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1084:	46c0      	nop			; (mov r8, r8)
    1086:	46bd      	mov	sp, r7
    1088:	b002      	add	sp, #8
    108a:	bd80      	pop	{r7, pc}

0000108c <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    108c:	b580      	push	{r7, lr}
    108e:	b084      	sub	sp, #16
    1090:	af00      	add	r7, sp, #0
    1092:	60f8      	str	r0, [r7, #12]
    1094:	607a      	str	r2, [r7, #4]
    1096:	230b      	movs	r3, #11
    1098:	18fb      	adds	r3, r7, r3
    109a:	1c0a      	adds	r2, r1, #0
    109c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    109e:	230b      	movs	r3, #11
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	68fa      	ldr	r2, [r7, #12]
    10a6:	01db      	lsls	r3, r3, #7
    10a8:	18d3      	adds	r3, r2, r3
    10aa:	3308      	adds	r3, #8
    10ac:	687a      	ldr	r2, [r7, #4]
    10ae:	601a      	str	r2, [r3, #0]
}
    10b0:	46c0      	nop			; (mov r8, r8)
    10b2:	46bd      	mov	sp, r7
    10b4:	b004      	add	sp, #16
    10b6:	bd80      	pop	{r7, pc}

000010b8 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b084      	sub	sp, #16
    10bc:	af00      	add	r7, sp, #0
    10be:	60f8      	str	r0, [r7, #12]
    10c0:	607a      	str	r2, [r7, #4]
    10c2:	230b      	movs	r3, #11
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	1c0a      	adds	r2, r1, #0
    10c8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10ca:	230b      	movs	r3, #11
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	781b      	ldrb	r3, [r3, #0]
    10d0:	68fa      	ldr	r2, [r7, #12]
    10d2:	01db      	lsls	r3, r3, #7
    10d4:	18d3      	adds	r3, r2, r3
    10d6:	3304      	adds	r3, #4
    10d8:	687a      	ldr	r2, [r7, #4]
    10da:	601a      	str	r2, [r3, #0]
}
    10dc:	46c0      	nop			; (mov r8, r8)
    10de:	46bd      	mov	sp, r7
    10e0:	b004      	add	sp, #16
    10e2:	bd80      	pop	{r7, pc}

000010e4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	b084      	sub	sp, #16
    10e8:	af00      	add	r7, sp, #0
    10ea:	60f8      	str	r0, [r7, #12]
    10ec:	607a      	str	r2, [r7, #4]
    10ee:	230b      	movs	r3, #11
    10f0:	18fb      	adds	r3, r7, r3
    10f2:	1c0a      	adds	r2, r1, #0
    10f4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10f6:	230b      	movs	r3, #11
    10f8:	18fb      	adds	r3, r7, r3
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	68fa      	ldr	r2, [r7, #12]
    10fe:	01db      	lsls	r3, r3, #7
    1100:	18d3      	adds	r3, r2, r3
    1102:	3318      	adds	r3, #24
    1104:	687a      	ldr	r2, [r7, #4]
    1106:	601a      	str	r2, [r3, #0]
}
    1108:	46c0      	nop			; (mov r8, r8)
    110a:	46bd      	mov	sp, r7
    110c:	b004      	add	sp, #16
    110e:	bd80      	pop	{r7, pc}

00001110 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1110:	b580      	push	{r7, lr}
    1112:	b084      	sub	sp, #16
    1114:	af00      	add	r7, sp, #0
    1116:	60f8      	str	r0, [r7, #12]
    1118:	607a      	str	r2, [r7, #4]
    111a:	230b      	movs	r3, #11
    111c:	18fb      	adds	r3, r7, r3
    111e:	1c0a      	adds	r2, r1, #0
    1120:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1122:	230b      	movs	r3, #11
    1124:	18fb      	adds	r3, r7, r3
    1126:	781b      	ldrb	r3, [r3, #0]
    1128:	68fa      	ldr	r2, [r7, #12]
    112a:	01db      	lsls	r3, r3, #7
    112c:	18d3      	adds	r3, r2, r3
    112e:	3314      	adds	r3, #20
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	601a      	str	r2, [r3, #0]
}
    1134:	46c0      	nop			; (mov r8, r8)
    1136:	46bd      	mov	sp, r7
    1138:	b004      	add	sp, #16
    113a:	bd80      	pop	{r7, pc}

0000113c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    113c:	b590      	push	{r4, r7, lr}
    113e:	b085      	sub	sp, #20
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	000c      	movs	r4, r1
    1146:	0010      	movs	r0, r2
    1148:	0019      	movs	r1, r3
    114a:	1cfb      	adds	r3, r7, #3
    114c:	1c22      	adds	r2, r4, #0
    114e:	701a      	strb	r2, [r3, #0]
    1150:	1cbb      	adds	r3, r7, #2
    1152:	1c02      	adds	r2, r0, #0
    1154:	701a      	strb	r2, [r3, #0]
    1156:	1c7b      	adds	r3, r7, #1
    1158:	1c0a      	adds	r2, r1, #0
    115a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    115c:	1cfb      	adds	r3, r7, #3
    115e:	7819      	ldrb	r1, [r3, #0]
    1160:	1cbb      	adds	r3, r7, #2
    1162:	781a      	ldrb	r2, [r3, #0]
    1164:	230f      	movs	r3, #15
    1166:	18fb      	adds	r3, r7, r3
    1168:	6878      	ldr	r0, [r7, #4]
    116a:	2430      	movs	r4, #48	; 0x30
    116c:	01c9      	lsls	r1, r1, #7
    116e:	1841      	adds	r1, r0, r1
    1170:	188a      	adds	r2, r1, r2
    1172:	1912      	adds	r2, r2, r4
    1174:	7812      	ldrb	r2, [r2, #0]
    1176:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1178:	230f      	movs	r3, #15
    117a:	18fb      	adds	r3, r7, r3
    117c:	220f      	movs	r2, #15
    117e:	18ba      	adds	r2, r7, r2
    1180:	7812      	ldrb	r2, [r2, #0]
    1182:	210f      	movs	r1, #15
    1184:	438a      	bics	r2, r1
    1186:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    1188:	1c7b      	adds	r3, r7, #1
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	220f      	movs	r2, #15
    118e:	4013      	ands	r3, r2
    1190:	b2d9      	uxtb	r1, r3
    1192:	230f      	movs	r3, #15
    1194:	18fb      	adds	r3, r7, r3
    1196:	220f      	movs	r2, #15
    1198:	18ba      	adds	r2, r7, r2
    119a:	7812      	ldrb	r2, [r2, #0]
    119c:	430a      	orrs	r2, r1
    119e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11a0:	1cfb      	adds	r3, r7, #3
    11a2:	781a      	ldrb	r2, [r3, #0]
    11a4:	1cbb      	adds	r3, r7, #2
    11a6:	781b      	ldrb	r3, [r3, #0]
    11a8:	6879      	ldr	r1, [r7, #4]
    11aa:	2030      	movs	r0, #48	; 0x30
    11ac:	01d2      	lsls	r2, r2, #7
    11ae:	188a      	adds	r2, r1, r2
    11b0:	18d3      	adds	r3, r2, r3
    11b2:	181b      	adds	r3, r3, r0
    11b4:	220f      	movs	r2, #15
    11b6:	18ba      	adds	r2, r7, r2
    11b8:	7812      	ldrb	r2, [r2, #0]
    11ba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    11bc:	46c0      	nop			; (mov r8, r8)
    11be:	46bd      	mov	sp, r7
    11c0:	b005      	add	sp, #20
    11c2:	bd90      	pop	{r4, r7, pc}

000011c4 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    11c4:	b590      	push	{r4, r7, lr}
    11c6:	b085      	sub	sp, #20
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
    11cc:	000c      	movs	r4, r1
    11ce:	0010      	movs	r0, r2
    11d0:	0019      	movs	r1, r3
    11d2:	1cfb      	adds	r3, r7, #3
    11d4:	1c22      	adds	r2, r4, #0
    11d6:	701a      	strb	r2, [r3, #0]
    11d8:	1cbb      	adds	r3, r7, #2
    11da:	1c02      	adds	r2, r0, #0
    11dc:	701a      	strb	r2, [r3, #0]
    11de:	1c7b      	adds	r3, r7, #1
    11e0:	1c0a      	adds	r2, r1, #0
    11e2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11e4:	1cfb      	adds	r3, r7, #3
    11e6:	7819      	ldrb	r1, [r3, #0]
    11e8:	1cbb      	adds	r3, r7, #2
    11ea:	781a      	ldrb	r2, [r3, #0]
    11ec:	230f      	movs	r3, #15
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	6878      	ldr	r0, [r7, #4]
    11f2:	2430      	movs	r4, #48	; 0x30
    11f4:	01c9      	lsls	r1, r1, #7
    11f6:	1841      	adds	r1, r0, r1
    11f8:	188a      	adds	r2, r1, r2
    11fa:	1912      	adds	r2, r2, r4
    11fc:	7812      	ldrb	r2, [r2, #0]
    11fe:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1200:	230f      	movs	r3, #15
    1202:	18fb      	adds	r3, r7, r3
    1204:	220f      	movs	r2, #15
    1206:	18ba      	adds	r2, r7, r2
    1208:	7812      	ldrb	r2, [r2, #0]
    120a:	210f      	movs	r1, #15
    120c:	400a      	ands	r2, r1
    120e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    1210:	1c7b      	adds	r3, r7, #1
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	011b      	lsls	r3, r3, #4
    1216:	b2d9      	uxtb	r1, r3
    1218:	230f      	movs	r3, #15
    121a:	18fb      	adds	r3, r7, r3
    121c:	220f      	movs	r2, #15
    121e:	18ba      	adds	r2, r7, r2
    1220:	7812      	ldrb	r2, [r2, #0]
    1222:	430a      	orrs	r2, r1
    1224:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1226:	1cfb      	adds	r3, r7, #3
    1228:	781a      	ldrb	r2, [r3, #0]
    122a:	1cbb      	adds	r3, r7, #2
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	6879      	ldr	r1, [r7, #4]
    1230:	2030      	movs	r0, #48	; 0x30
    1232:	01d2      	lsls	r2, r2, #7
    1234:	188a      	adds	r2, r1, r2
    1236:	18d3      	adds	r3, r2, r3
    1238:	181b      	adds	r3, r3, r0
    123a:	220f      	movs	r2, #15
    123c:	18ba      	adds	r2, r7, r2
    123e:	7812      	ldrb	r2, [r2, #0]
    1240:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	46bd      	mov	sp, r7
    1246:	b005      	add	sp, #20
    1248:	bd90      	pop	{r4, r7, pc}

0000124a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    124a:	b590      	push	{r4, r7, lr}
    124c:	b085      	sub	sp, #20
    124e:	af00      	add	r7, sp, #0
    1250:	6078      	str	r0, [r7, #4]
    1252:	000c      	movs	r4, r1
    1254:	0010      	movs	r0, r2
    1256:	0019      	movs	r1, r3
    1258:	1cfb      	adds	r3, r7, #3
    125a:	1c22      	adds	r2, r4, #0
    125c:	701a      	strb	r2, [r3, #0]
    125e:	1cbb      	adds	r3, r7, #2
    1260:	1c02      	adds	r2, r0, #0
    1262:	701a      	strb	r2, [r3, #0]
    1264:	1c7b      	adds	r3, r7, #1
    1266:	1c0a      	adds	r2, r1, #0
    1268:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    126a:	1cfb      	adds	r3, r7, #3
    126c:	7819      	ldrb	r1, [r3, #0]
    126e:	1cbb      	adds	r3, r7, #2
    1270:	781a      	ldrb	r2, [r3, #0]
    1272:	230f      	movs	r3, #15
    1274:	18fb      	adds	r3, r7, r3
    1276:	6878      	ldr	r0, [r7, #4]
    1278:	2440      	movs	r4, #64	; 0x40
    127a:	01c9      	lsls	r1, r1, #7
    127c:	1841      	adds	r1, r0, r1
    127e:	188a      	adds	r2, r1, r2
    1280:	1912      	adds	r2, r2, r4
    1282:	7812      	ldrb	r2, [r2, #0]
    1284:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1286:	230f      	movs	r3, #15
    1288:	18fb      	adds	r3, r7, r3
    128a:	220f      	movs	r2, #15
    128c:	18ba      	adds	r2, r7, r2
    128e:	7812      	ldrb	r2, [r2, #0]
    1290:	2101      	movs	r1, #1
    1292:	438a      	bics	r2, r1
    1294:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1296:	1c7b      	adds	r3, r7, #1
    1298:	7819      	ldrb	r1, [r3, #0]
    129a:	230f      	movs	r3, #15
    129c:	18fb      	adds	r3, r7, r3
    129e:	220f      	movs	r2, #15
    12a0:	18ba      	adds	r2, r7, r2
    12a2:	7812      	ldrb	r2, [r2, #0]
    12a4:	430a      	orrs	r2, r1
    12a6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a8:	1cfb      	adds	r3, r7, #3
    12aa:	781a      	ldrb	r2, [r3, #0]
    12ac:	1cbb      	adds	r3, r7, #2
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	6879      	ldr	r1, [r7, #4]
    12b2:	2040      	movs	r0, #64	; 0x40
    12b4:	01d2      	lsls	r2, r2, #7
    12b6:	188a      	adds	r2, r1, r2
    12b8:	18d3      	adds	r3, r2, r3
    12ba:	181b      	adds	r3, r3, r0
    12bc:	220f      	movs	r2, #15
    12be:	18ba      	adds	r2, r7, r2
    12c0:	7812      	ldrb	r2, [r2, #0]
    12c2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12c4:	46c0      	nop			; (mov r8, r8)
    12c6:	46bd      	mov	sp, r7
    12c8:	b005      	add	sp, #20
    12ca:	bd90      	pop	{r4, r7, pc}

000012cc <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    12cc:	b5b0      	push	{r4, r5, r7, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
    12d4:	0008      	movs	r0, r1
    12d6:	0011      	movs	r1, r2
    12d8:	1cfb      	adds	r3, r7, #3
    12da:	1c02      	adds	r2, r0, #0
    12dc:	701a      	strb	r2, [r3, #0]
    12de:	1cbb      	adds	r3, r7, #2
    12e0:	1c0a      	adds	r2, r1, #0
    12e2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    12e4:	1cfb      	adds	r3, r7, #3
    12e6:	781a      	ldrb	r2, [r3, #0]
    12e8:	1cbb      	adds	r3, r7, #2
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	1cf9      	adds	r1, r7, #3
    12ee:	7808      	ldrb	r0, [r1, #0]
    12f0:	1cb9      	adds	r1, r7, #2
    12f2:	7809      	ldrb	r1, [r1, #0]
    12f4:	687c      	ldr	r4, [r7, #4]
    12f6:	2540      	movs	r5, #64	; 0x40
    12f8:	01c0      	lsls	r0, r0, #7
    12fa:	1820      	adds	r0, r4, r0
    12fc:	1841      	adds	r1, r0, r1
    12fe:	1949      	adds	r1, r1, r5
    1300:	7809      	ldrb	r1, [r1, #0]
    1302:	b2c9      	uxtb	r1, r1
    1304:	2004      	movs	r0, #4
    1306:	4301      	orrs	r1, r0
    1308:	b2cc      	uxtb	r4, r1
    130a:	6879      	ldr	r1, [r7, #4]
    130c:	2040      	movs	r0, #64	; 0x40
    130e:	01d2      	lsls	r2, r2, #7
    1310:	188a      	adds	r2, r1, r2
    1312:	18d3      	adds	r3, r2, r3
    1314:	181b      	adds	r3, r3, r0
    1316:	1c22      	adds	r2, r4, #0
    1318:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	46bd      	mov	sp, r7
    131e:	b002      	add	sp, #8
    1320:	bdb0      	pop	{r4, r5, r7, pc}

00001322 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1322:	b5b0      	push	{r4, r5, r7, lr}
    1324:	b082      	sub	sp, #8
    1326:	af00      	add	r7, sp, #0
    1328:	6078      	str	r0, [r7, #4]
    132a:	0008      	movs	r0, r1
    132c:	0011      	movs	r1, r2
    132e:	1cfb      	adds	r3, r7, #3
    1330:	1c02      	adds	r2, r0, #0
    1332:	701a      	strb	r2, [r3, #0]
    1334:	1cbb      	adds	r3, r7, #2
    1336:	1c0a      	adds	r2, r1, #0
    1338:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    133a:	1cfb      	adds	r3, r7, #3
    133c:	781a      	ldrb	r2, [r3, #0]
    133e:	1cbb      	adds	r3, r7, #2
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	1cf9      	adds	r1, r7, #3
    1344:	7808      	ldrb	r0, [r1, #0]
    1346:	1cb9      	adds	r1, r7, #2
    1348:	7809      	ldrb	r1, [r1, #0]
    134a:	687c      	ldr	r4, [r7, #4]
    134c:	2540      	movs	r5, #64	; 0x40
    134e:	01c0      	lsls	r0, r0, #7
    1350:	1820      	adds	r0, r4, r0
    1352:	1841      	adds	r1, r0, r1
    1354:	1949      	adds	r1, r1, r5
    1356:	7809      	ldrb	r1, [r1, #0]
    1358:	b2c9      	uxtb	r1, r1
    135a:	2004      	movs	r0, #4
    135c:	4381      	bics	r1, r0
    135e:	b2cc      	uxtb	r4, r1
    1360:	6879      	ldr	r1, [r7, #4]
    1362:	2040      	movs	r0, #64	; 0x40
    1364:	01d2      	lsls	r2, r2, #7
    1366:	188a      	adds	r2, r1, r2
    1368:	18d3      	adds	r3, r2, r3
    136a:	181b      	adds	r3, r3, r0
    136c:	1c22      	adds	r2, r4, #0
    136e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1370:	46c0      	nop			; (mov r8, r8)
    1372:	46bd      	mov	sp, r7
    1374:	b002      	add	sp, #8
    1376:	bdb0      	pop	{r4, r5, r7, pc}

00001378 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1378:	b580      	push	{r7, lr}
    137a:	b084      	sub	sp, #16
    137c:	af00      	add	r7, sp, #0
    137e:	60f8      	str	r0, [r7, #12]
    1380:	607a      	str	r2, [r7, #4]
    1382:	230b      	movs	r3, #11
    1384:	18fb      	adds	r3, r7, r3
    1386:	1c0a      	adds	r2, r1, #0
    1388:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    138a:	230b      	movs	r3, #11
    138c:	18fb      	adds	r3, r7, r3
    138e:	781b      	ldrb	r3, [r3, #0]
    1390:	68fa      	ldr	r2, [r7, #12]
    1392:	01db      	lsls	r3, r3, #7
    1394:	18d3      	adds	r3, r2, r3
    1396:	3328      	adds	r3, #40	; 0x28
    1398:	687a      	ldr	r2, [r7, #4]
    139a:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    139c:	46c0      	nop			; (mov r8, r8)
    139e:	46bd      	mov	sp, r7
    13a0:	b004      	add	sp, #16
    13a2:	bd80      	pop	{r7, pc}

000013a4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	b082      	sub	sp, #8
    13a8:	af00      	add	r7, sp, #0
    13aa:	6039      	str	r1, [r7, #0]
    13ac:	0011      	movs	r1, r2
    13ae:	1dfb      	adds	r3, r7, #7
    13b0:	1c02      	adds	r2, r0, #0
    13b2:	701a      	strb	r2, [r3, #0]
    13b4:	1dbb      	adds	r3, r7, #6
    13b6:	1c0a      	adds	r2, r1, #0
    13b8:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    13ba:	1dbb      	adds	r3, r7, #6
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	2b01      	cmp	r3, #1
    13c0:	d023      	beq.n	140a <_gpio_set_direction+0x66>
    13c2:	2b02      	cmp	r3, #2
    13c4:	d03f      	beq.n	1446 <_gpio_set_direction+0xa2>
    13c6:	2b00      	cmp	r3, #0
    13c8:	d15d      	bne.n	1486 <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    13ca:	683a      	ldr	r2, [r7, #0]
    13cc:	1dfb      	adds	r3, r7, #7
    13ce:	7819      	ldrb	r1, [r3, #0]
    13d0:	23c0      	movs	r3, #192	; 0xc0
    13d2:	05db      	lsls	r3, r3, #23
    13d4:	0018      	movs	r0, r3
    13d6:	4b31      	ldr	r3, [pc, #196]	; (149c <_gpio_set_direction+0xf8>)
    13d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    13da:	683b      	ldr	r3, [r7, #0]
    13dc:	041b      	lsls	r3, r3, #16
    13de:	0c1b      	lsrs	r3, r3, #16
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	05d2      	lsls	r2, r2, #23
    13e4:	431a      	orrs	r2, r3
    13e6:	1dfb      	adds	r3, r7, #7
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	482d      	ldr	r0, [pc, #180]	; (14a0 <_gpio_set_direction+0xfc>)
    13ec:	0019      	movs	r1, r3
    13ee:	4b2d      	ldr	r3, [pc, #180]	; (14a4 <_gpio_set_direction+0x100>)
    13f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    13f2:	683b      	ldr	r3, [r7, #0]
    13f4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    13f6:	22c0      	movs	r2, #192	; 0xc0
    13f8:	0612      	lsls	r2, r2, #24
    13fa:	431a      	orrs	r2, r3
    13fc:	1dfb      	adds	r3, r7, #7
    13fe:	781b      	ldrb	r3, [r3, #0]
    1400:	4827      	ldr	r0, [pc, #156]	; (14a0 <_gpio_set_direction+0xfc>)
    1402:	0019      	movs	r1, r3
    1404:	4b27      	ldr	r3, [pc, #156]	; (14a4 <_gpio_set_direction+0x100>)
    1406:	4798      	blx	r3
		break;
    1408:	e043      	b.n	1492 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    140a:	683a      	ldr	r2, [r7, #0]
    140c:	1dfb      	adds	r3, r7, #7
    140e:	7819      	ldrb	r1, [r3, #0]
    1410:	23c0      	movs	r3, #192	; 0xc0
    1412:	05db      	lsls	r3, r3, #23
    1414:	0018      	movs	r0, r3
    1416:	4b21      	ldr	r3, [pc, #132]	; (149c <_gpio_set_direction+0xf8>)
    1418:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    141a:	683b      	ldr	r3, [r7, #0]
    141c:	041b      	lsls	r3, r3, #16
    141e:	0c1b      	lsrs	r3, r3, #16
    1420:	4a21      	ldr	r2, [pc, #132]	; (14a8 <_gpio_set_direction+0x104>)
    1422:	431a      	orrs	r2, r3
    1424:	1dfb      	adds	r3, r7, #7
    1426:	781b      	ldrb	r3, [r3, #0]
    1428:	481d      	ldr	r0, [pc, #116]	; (14a0 <_gpio_set_direction+0xfc>)
    142a:	0019      	movs	r1, r3
    142c:	4b1d      	ldr	r3, [pc, #116]	; (14a4 <_gpio_set_direction+0x100>)
    142e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1430:	683b      	ldr	r3, [r7, #0]
    1432:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1434:	4a1d      	ldr	r2, [pc, #116]	; (14ac <_gpio_set_direction+0x108>)
    1436:	431a      	orrs	r2, r3
    1438:	1dfb      	adds	r3, r7, #7
    143a:	781b      	ldrb	r3, [r3, #0]
    143c:	4818      	ldr	r0, [pc, #96]	; (14a0 <_gpio_set_direction+0xfc>)
    143e:	0019      	movs	r1, r3
    1440:	4b18      	ldr	r3, [pc, #96]	; (14a4 <_gpio_set_direction+0x100>)
    1442:	4798      	blx	r3
		break;
    1444:	e025      	b.n	1492 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    1446:	683a      	ldr	r2, [r7, #0]
    1448:	1dfb      	adds	r3, r7, #7
    144a:	7819      	ldrb	r1, [r3, #0]
    144c:	23c0      	movs	r3, #192	; 0xc0
    144e:	05db      	lsls	r3, r3, #23
    1450:	0018      	movs	r0, r3
    1452:	4b17      	ldr	r3, [pc, #92]	; (14b0 <_gpio_set_direction+0x10c>)
    1454:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1456:	683b      	ldr	r3, [r7, #0]
    1458:	041b      	lsls	r3, r3, #16
    145a:	0c1b      	lsrs	r3, r3, #16
    145c:	2280      	movs	r2, #128	; 0x80
    145e:	05d2      	lsls	r2, r2, #23
    1460:	431a      	orrs	r2, r3
    1462:	1dfb      	adds	r3, r7, #7
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	480e      	ldr	r0, [pc, #56]	; (14a0 <_gpio_set_direction+0xfc>)
    1468:	0019      	movs	r1, r3
    146a:	4b0e      	ldr	r3, [pc, #56]	; (14a4 <_gpio_set_direction+0x100>)
    146c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    146e:	683b      	ldr	r3, [r7, #0]
    1470:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1472:	22c0      	movs	r2, #192	; 0xc0
    1474:	0612      	lsls	r2, r2, #24
    1476:	431a      	orrs	r2, r3
    1478:	1dfb      	adds	r3, r7, #7
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	4808      	ldr	r0, [pc, #32]	; (14a0 <_gpio_set_direction+0xfc>)
    147e:	0019      	movs	r1, r3
    1480:	4b08      	ldr	r3, [pc, #32]	; (14a4 <_gpio_set_direction+0x100>)
    1482:	4798      	blx	r3
		break;
    1484:	e005      	b.n	1492 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    1486:	4b0b      	ldr	r3, [pc, #44]	; (14b4 <_gpio_set_direction+0x110>)
    1488:	2245      	movs	r2, #69	; 0x45
    148a:	0019      	movs	r1, r3
    148c:	2000      	movs	r0, #0
    148e:	4b0a      	ldr	r3, [pc, #40]	; (14b8 <_gpio_set_direction+0x114>)
    1490:	4798      	blx	r3
	}
}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	46bd      	mov	sp, r7
    1496:	b002      	add	sp, #8
    1498:	bd80      	pop	{r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	000010b9 	.word	0x000010b9
    14a0:	41004400 	.word	0x41004400
    14a4:	00001379 	.word	0x00001379
    14a8:	40020000 	.word	0x40020000
    14ac:	c0020000 	.word	0xc0020000
    14b0:	0000108d 	.word	0x0000108d
    14b4:	00005f34 	.word	0x00005f34
    14b8:	0000204d 	.word	0x0000204d

000014bc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    14bc:	b580      	push	{r7, lr}
    14be:	b082      	sub	sp, #8
    14c0:	af00      	add	r7, sp, #0
    14c2:	6039      	str	r1, [r7, #0]
    14c4:	0011      	movs	r1, r2
    14c6:	1dfb      	adds	r3, r7, #7
    14c8:	1c02      	adds	r2, r0, #0
    14ca:	701a      	strb	r2, [r3, #0]
    14cc:	1dbb      	adds	r3, r7, #6
    14ce:	1c0a      	adds	r2, r1, #0
    14d0:	701a      	strb	r2, [r3, #0]
	if (level) {
    14d2:	1dbb      	adds	r3, r7, #6
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d008      	beq.n	14ec <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    14da:	683a      	ldr	r2, [r7, #0]
    14dc:	1dfb      	adds	r3, r7, #7
    14de:	7819      	ldrb	r1, [r3, #0]
    14e0:	23c0      	movs	r3, #192	; 0xc0
    14e2:	05db      	lsls	r3, r3, #23
    14e4:	0018      	movs	r0, r3
    14e6:	4b07      	ldr	r3, [pc, #28]	; (1504 <_gpio_set_level+0x48>)
    14e8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    14ea:	e007      	b.n	14fc <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    14ec:	683a      	ldr	r2, [r7, #0]
    14ee:	1dfb      	adds	r3, r7, #7
    14f0:	7819      	ldrb	r1, [r3, #0]
    14f2:	23c0      	movs	r3, #192	; 0xc0
    14f4:	05db      	lsls	r3, r3, #23
    14f6:	0018      	movs	r0, r3
    14f8:	4b03      	ldr	r3, [pc, #12]	; (1508 <_gpio_set_level+0x4c>)
    14fa:	4798      	blx	r3
}
    14fc:	46c0      	nop			; (mov r8, r8)
    14fe:	46bd      	mov	sp, r7
    1500:	b002      	add	sp, #8
    1502:	bd80      	pop	{r7, pc}
    1504:	000010e5 	.word	0x000010e5
    1508:	00001111 	.word	0x00001111

0000150c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    150c:	b590      	push	{r4, r7, lr}
    150e:	b083      	sub	sp, #12
    1510:	af00      	add	r7, sp, #0
    1512:	0004      	movs	r4, r0
    1514:	0008      	movs	r0, r1
    1516:	0011      	movs	r1, r2
    1518:	1dfb      	adds	r3, r7, #7
    151a:	1c22      	adds	r2, r4, #0
    151c:	701a      	strb	r2, [r3, #0]
    151e:	1dbb      	adds	r3, r7, #6
    1520:	1c02      	adds	r2, r0, #0
    1522:	701a      	strb	r2, [r3, #0]
    1524:	1d7b      	adds	r3, r7, #5
    1526:	1c0a      	adds	r2, r1, #0
    1528:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    152a:	1d7b      	adds	r3, r7, #5
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	2b01      	cmp	r3, #1
    1530:	d00c      	beq.n	154c <_gpio_set_pin_pull_mode+0x40>
    1532:	2b02      	cmp	r3, #2
    1534:	d029      	beq.n	158a <_gpio_set_pin_pull_mode+0x7e>
    1536:	2b00      	cmp	r3, #0
    1538:	d146      	bne.n	15c8 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    153a:	1dbb      	adds	r3, r7, #6
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	1dfb      	adds	r3, r7, #7
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	4827      	ldr	r0, [pc, #156]	; (15e0 <_gpio_set_pin_pull_mode+0xd4>)
    1544:	0019      	movs	r1, r3
    1546:	4b27      	ldr	r3, [pc, #156]	; (15e4 <_gpio_set_pin_pull_mode+0xd8>)
    1548:	4798      	blx	r3
		break;
    154a:	e044      	b.n	15d6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    154c:	1dbb      	adds	r3, r7, #6
    154e:	781b      	ldrb	r3, [r3, #0]
    1550:	2201      	movs	r2, #1
    1552:	409a      	lsls	r2, r3
    1554:	1dfb      	adds	r3, r7, #7
    1556:	7819      	ldrb	r1, [r3, #0]
    1558:	23c0      	movs	r3, #192	; 0xc0
    155a:	05db      	lsls	r3, r3, #23
    155c:	0018      	movs	r0, r3
    155e:	4b22      	ldr	r3, [pc, #136]	; (15e8 <_gpio_set_pin_pull_mode+0xdc>)
    1560:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1562:	1dbb      	adds	r3, r7, #6
    1564:	781a      	ldrb	r2, [r3, #0]
    1566:	1dfb      	adds	r3, r7, #7
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	481d      	ldr	r0, [pc, #116]	; (15e0 <_gpio_set_pin_pull_mode+0xd4>)
    156c:	0019      	movs	r1, r3
    156e:	4b1f      	ldr	r3, [pc, #124]	; (15ec <_gpio_set_pin_pull_mode+0xe0>)
    1570:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    1572:	1dbb      	adds	r3, r7, #6
    1574:	781b      	ldrb	r3, [r3, #0]
    1576:	2201      	movs	r2, #1
    1578:	409a      	lsls	r2, r3
    157a:	1dfb      	adds	r3, r7, #7
    157c:	7819      	ldrb	r1, [r3, #0]
    157e:	23c0      	movs	r3, #192	; 0xc0
    1580:	05db      	lsls	r3, r3, #23
    1582:	0018      	movs	r0, r3
    1584:	4b1a      	ldr	r3, [pc, #104]	; (15f0 <_gpio_set_pin_pull_mode+0xe4>)
    1586:	4798      	blx	r3
		break;
    1588:	e025      	b.n	15d6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    158a:	1dbb      	adds	r3, r7, #6
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	2201      	movs	r2, #1
    1590:	409a      	lsls	r2, r3
    1592:	1dfb      	adds	r3, r7, #7
    1594:	7819      	ldrb	r1, [r3, #0]
    1596:	23c0      	movs	r3, #192	; 0xc0
    1598:	05db      	lsls	r3, r3, #23
    159a:	0018      	movs	r0, r3
    159c:	4b12      	ldr	r3, [pc, #72]	; (15e8 <_gpio_set_pin_pull_mode+0xdc>)
    159e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    15a0:	1dbb      	adds	r3, r7, #6
    15a2:	781a      	ldrb	r2, [r3, #0]
    15a4:	1dfb      	adds	r3, r7, #7
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	480d      	ldr	r0, [pc, #52]	; (15e0 <_gpio_set_pin_pull_mode+0xd4>)
    15aa:	0019      	movs	r1, r3
    15ac:	4b0f      	ldr	r3, [pc, #60]	; (15ec <_gpio_set_pin_pull_mode+0xe0>)
    15ae:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    15b0:	1dbb      	adds	r3, r7, #6
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	2201      	movs	r2, #1
    15b6:	409a      	lsls	r2, r3
    15b8:	1dfb      	adds	r3, r7, #7
    15ba:	7819      	ldrb	r1, [r3, #0]
    15bc:	23c0      	movs	r3, #192	; 0xc0
    15be:	05db      	lsls	r3, r3, #23
    15c0:	0018      	movs	r0, r3
    15c2:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <_gpio_set_pin_pull_mode+0xe8>)
    15c4:	4798      	blx	r3
		break;
    15c6:	e006      	b.n	15d6 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    15c8:	4b0b      	ldr	r3, [pc, #44]	; (15f8 <_gpio_set_pin_pull_mode+0xec>)
    15ca:	2288      	movs	r2, #136	; 0x88
    15cc:	0019      	movs	r1, r3
    15ce:	2000      	movs	r0, #0
    15d0:	4b0a      	ldr	r3, [pc, #40]	; (15fc <_gpio_set_pin_pull_mode+0xf0>)
    15d2:	4798      	blx	r3
		break;
    15d4:	46c0      	nop			; (mov r8, r8)
	}
}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	46bd      	mov	sp, r7
    15da:	b003      	add	sp, #12
    15dc:	bd90      	pop	{r4, r7, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	41004400 	.word	0x41004400
    15e4:	00001323 	.word	0x00001323
    15e8:	000010b9 	.word	0x000010b9
    15ec:	000012cd 	.word	0x000012cd
    15f0:	000010e5 	.word	0x000010e5
    15f4:	00001111 	.word	0x00001111
    15f8:	00005f34 	.word	0x00005f34
    15fc:	0000204d 	.word	0x0000204d

00001600 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1600:	b590      	push	{r4, r7, lr}
    1602:	b085      	sub	sp, #20
    1604:	af00      	add	r7, sp, #0
    1606:	6078      	str	r0, [r7, #4]
    1608:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	095a      	lsrs	r2, r3, #5
    160e:	230f      	movs	r3, #15
    1610:	18fb      	adds	r3, r7, r3
    1612:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	b2da      	uxtb	r2, r3
    1618:	230e      	movs	r3, #14
    161a:	18fb      	adds	r3, r7, r3
    161c:	211f      	movs	r1, #31
    161e:	400a      	ands	r2, r1
    1620:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1622:	683b      	ldr	r3, [r7, #0]
    1624:	3301      	adds	r3, #1
    1626:	d10a      	bne.n	163e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1628:	230e      	movs	r3, #14
    162a:	18fb      	adds	r3, r7, r3
    162c:	781a      	ldrb	r2, [r3, #0]
    162e:	230f      	movs	r3, #15
    1630:	18fb      	adds	r3, r7, r3
    1632:	7819      	ldrb	r1, [r3, #0]
    1634:	481b      	ldr	r0, [pc, #108]	; (16a4 <_gpio_set_pin_function+0xa4>)
    1636:	2300      	movs	r3, #0
    1638:	4c1b      	ldr	r4, [pc, #108]	; (16a8 <_gpio_set_pin_function+0xa8>)
    163a:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    163c:	e02e      	b.n	169c <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    163e:	230e      	movs	r3, #14
    1640:	18fb      	adds	r3, r7, r3
    1642:	781a      	ldrb	r2, [r3, #0]
    1644:	230f      	movs	r3, #15
    1646:	18fb      	adds	r3, r7, r3
    1648:	7819      	ldrb	r1, [r3, #0]
    164a:	4816      	ldr	r0, [pc, #88]	; (16a4 <_gpio_set_pin_function+0xa4>)
    164c:	2301      	movs	r3, #1
    164e:	4c16      	ldr	r4, [pc, #88]	; (16a8 <_gpio_set_pin_function+0xa8>)
    1650:	47a0      	blx	r4
		if (pin & 1) {
    1652:	230e      	movs	r3, #14
    1654:	18fb      	adds	r3, r7, r3
    1656:	781b      	ldrb	r3, [r3, #0]
    1658:	2201      	movs	r2, #1
    165a:	4013      	ands	r3, r2
    165c:	d00f      	beq.n	167e <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    165e:	230e      	movs	r3, #14
    1660:	18fb      	adds	r3, r7, r3
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	085b      	lsrs	r3, r3, #1
    1666:	b2da      	uxtb	r2, r3
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	b2d8      	uxtb	r0, r3
    166c:	230f      	movs	r3, #15
    166e:	18fb      	adds	r3, r7, r3
    1670:	7819      	ldrb	r1, [r3, #0]
    1672:	4c0c      	ldr	r4, [pc, #48]	; (16a4 <_gpio_set_pin_function+0xa4>)
    1674:	0003      	movs	r3, r0
    1676:	0020      	movs	r0, r4
    1678:	4c0c      	ldr	r4, [pc, #48]	; (16ac <_gpio_set_pin_function+0xac>)
    167a:	47a0      	blx	r4
}
    167c:	e00e      	b.n	169c <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    167e:	230e      	movs	r3, #14
    1680:	18fb      	adds	r3, r7, r3
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	085b      	lsrs	r3, r3, #1
    1686:	b2da      	uxtb	r2, r3
    1688:	683b      	ldr	r3, [r7, #0]
    168a:	b2d8      	uxtb	r0, r3
    168c:	230f      	movs	r3, #15
    168e:	18fb      	adds	r3, r7, r3
    1690:	7819      	ldrb	r1, [r3, #0]
    1692:	4c04      	ldr	r4, [pc, #16]	; (16a4 <_gpio_set_pin_function+0xa4>)
    1694:	0003      	movs	r3, r0
    1696:	0020      	movs	r0, r4
    1698:	4c05      	ldr	r4, [pc, #20]	; (16b0 <_gpio_set_pin_function+0xb0>)
    169a:	47a0      	blx	r4
}
    169c:	46c0      	nop			; (mov r8, r8)
    169e:	46bd      	mov	sp, r7
    16a0:	b005      	add	sp, #20
    16a2:	bd90      	pop	{r4, r7, pc}
    16a4:	41004400 	.word	0x41004400
    16a8:	0000124b 	.word	0x0000124b
    16ac:	000011c5 	.word	0x000011c5
    16b0:	0000113d 	.word	0x0000113d

000016b4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	b082      	sub	sp, #8
    16b8:	af00      	add	r7, sp, #0
    16ba:	0002      	movs	r2, r0
    16bc:	1dfb      	adds	r3, r7, #7
    16be:	701a      	strb	r2, [r3, #0]
    16c0:	1dbb      	adds	r3, r7, #6
    16c2:	1c0a      	adds	r2, r1, #0
    16c4:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    16c6:	1dfb      	adds	r3, r7, #7
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	095b      	lsrs	r3, r3, #5
    16cc:	b2d8      	uxtb	r0, r3
    16ce:	1dfb      	adds	r3, r7, #7
    16d0:	781b      	ldrb	r3, [r3, #0]
    16d2:	221f      	movs	r2, #31
    16d4:	4013      	ands	r3, r2
    16d6:	b2d9      	uxtb	r1, r3
    16d8:	1dbb      	adds	r3, r7, #6
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	001a      	movs	r2, r3
    16de:	4b03      	ldr	r3, [pc, #12]	; (16ec <gpio_set_pin_pull_mode+0x38>)
    16e0:	4798      	blx	r3
}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	46bd      	mov	sp, r7
    16e6:	b002      	add	sp, #8
    16e8:	bd80      	pop	{r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	0000150d 	.word	0x0000150d

000016f0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
    16f8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    16fa:	683a      	ldr	r2, [r7, #0]
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	0011      	movs	r1, r2
    1700:	0018      	movs	r0, r3
    1702:	4b03      	ldr	r3, [pc, #12]	; (1710 <gpio_set_pin_function+0x20>)
    1704:	4798      	blx	r3
}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	46bd      	mov	sp, r7
    170a:	b002      	add	sp, #8
    170c:	bd80      	pop	{r7, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	00001601 	.word	0x00001601

00001714 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	0002      	movs	r2, r0
    171c:	1dfb      	adds	r3, r7, #7
    171e:	701a      	strb	r2, [r3, #0]
    1720:	1dbb      	adds	r3, r7, #6
    1722:	1c0a      	adds	r2, r1, #0
    1724:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1726:	1dfb      	adds	r3, r7, #7
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	095b      	lsrs	r3, r3, #5
    172c:	b2d8      	uxtb	r0, r3
    172e:	1dfb      	adds	r3, r7, #7
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	221f      	movs	r2, #31
    1734:	4013      	ands	r3, r2
    1736:	2201      	movs	r2, #1
    1738:	409a      	lsls	r2, r3
    173a:	0011      	movs	r1, r2
    173c:	1dbb      	adds	r3, r7, #6
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	001a      	movs	r2, r3
    1742:	4b03      	ldr	r3, [pc, #12]	; (1750 <gpio_set_pin_direction+0x3c>)
    1744:	4798      	blx	r3
}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	46bd      	mov	sp, r7
    174a:	b002      	add	sp, #8
    174c:	bd80      	pop	{r7, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	000013a5 	.word	0x000013a5

00001754 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1754:	b580      	push	{r7, lr}
    1756:	b082      	sub	sp, #8
    1758:	af00      	add	r7, sp, #0
    175a:	0002      	movs	r2, r0
    175c:	1dfb      	adds	r3, r7, #7
    175e:	701a      	strb	r2, [r3, #0]
    1760:	1dbb      	adds	r3, r7, #6
    1762:	1c0a      	adds	r2, r1, #0
    1764:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1766:	1dfb      	adds	r3, r7, #7
    1768:	781b      	ldrb	r3, [r3, #0]
    176a:	095b      	lsrs	r3, r3, #5
    176c:	b2d8      	uxtb	r0, r3
    176e:	1dfb      	adds	r3, r7, #7
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	221f      	movs	r2, #31
    1774:	4013      	ands	r3, r2
    1776:	2201      	movs	r2, #1
    1778:	409a      	lsls	r2, r3
    177a:	0011      	movs	r1, r2
    177c:	1dbb      	adds	r3, r7, #6
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	001a      	movs	r2, r3
    1782:	4b03      	ldr	r3, [pc, #12]	; (1790 <gpio_set_pin_level+0x3c>)
    1784:	4798      	blx	r3
}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	46bd      	mov	sp, r7
    178a:	b002      	add	sp, #8
    178c:	bd80      	pop	{r7, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	000014bd 	.word	0x000014bd

00001794 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1794:	b580      	push	{r7, lr}
    1796:	af00      	add	r7, sp, #0
	_init_chip();
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <init_mcu+0x10>)
    179a:	4798      	blx	r3
}
    179c:	46c0      	nop			; (mov r8, r8)
    179e:	46bd      	mov	sp, r7
    17a0:	bd80      	pop	{r7, pc}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	000022f5 	.word	0x000022f5

000017a8 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	b082      	sub	sp, #8
    17ac:	af00      	add	r7, sp, #0
    17ae:	0002      	movs	r2, r0
    17b0:	1dfb      	adds	r3, r7, #7
    17b2:	701a      	strb	r2, [r3, #0]
    17b4:	1dbb      	adds	r3, r7, #6
    17b6:	1c0a      	adds	r2, r1, #0
    17b8:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
    17ba:	1dfb      	adds	r3, r7, #7
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	b29b      	uxth	r3, r3
    17c0:	223f      	movs	r2, #63	; 0x3f
    17c2:	4013      	ands	r3, r2
    17c4:	b29a      	uxth	r2, r3
    17c6:	1dbb      	adds	r3, r7, #6
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	b29b      	uxth	r3, r3
    17cc:	021b      	lsls	r3, r3, #8
    17ce:	b299      	uxth	r1, r3
    17d0:	23f0      	movs	r3, #240	; 0xf0
    17d2:	011b      	lsls	r3, r3, #4
    17d4:	400b      	ands	r3, r1
    17d6:	b29b      	uxth	r3, r3
    17d8:	4313      	orrs	r3, r2
    17da:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
    17dc:	2280      	movs	r2, #128	; 0x80
    17de:	01d2      	lsls	r2, r2, #7
    17e0:	4313      	orrs	r3, r2
    17e2:	b29b      	uxth	r3, r3
    17e4:	4a04      	ldr	r2, [pc, #16]	; (17f8 <_gclk_enable_channel+0x50>)
    17e6:	0019      	movs	r1, r3
    17e8:	0010      	movs	r0, r2
    17ea:	4b04      	ldr	r3, [pc, #16]	; (17fc <_gclk_enable_channel+0x54>)
    17ec:	4798      	blx	r3
}
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	46bd      	mov	sp, r7
    17f2:	b002      	add	sp, #8
    17f4:	bd80      	pop	{r7, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	40000c00 	.word	0x40000c00
    17fc:	0000106f 	.word	0x0000106f

00001800 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
    1800:	b580      	push	{r7, lr}
    1802:	b082      	sub	sp, #8
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	2b01      	cmp	r3, #1
    180c:	d101      	bne.n	1812 <_pm_get_ahb_index+0x12>
		return 0;
    180e:	2300      	movs	r3, #0
    1810:	e017      	b.n	1842 <_pm_get_ahb_index+0x42>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	2b02      	cmp	r3, #2
    1816:	d101      	bne.n	181c <_pm_get_ahb_index+0x1c>
		return 1;
    1818:	2301      	movs	r3, #1
    181a:	e012      	b.n	1842 <_pm_get_ahb_index+0x42>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	2b03      	cmp	r3, #3
    1820:	d101      	bne.n	1826 <_pm_get_ahb_index+0x26>
		return 2;
    1822:	2302      	movs	r3, #2
    1824:	e00d      	b.n	1842 <_pm_get_ahb_index+0x42>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	4a08      	ldr	r2, [pc, #32]	; (184c <_pm_get_ahb_index+0x4c>)
    182a:	4293      	cmp	r3, r2
    182c:	d101      	bne.n	1832 <_pm_get_ahb_index+0x32>
		return 3;
    182e:	2303      	movs	r3, #3
    1830:	e007      	b.n	1842 <_pm_get_ahb_index+0x42>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	4a06      	ldr	r2, [pc, #24]	; (1850 <_pm_get_ahb_index+0x50>)
    1836:	4293      	cmp	r3, r2
    1838:	d101      	bne.n	183e <_pm_get_ahb_index+0x3e>
		return 4;
    183a:	2304      	movs	r3, #4
    183c:	e001      	b.n	1842 <_pm_get_ahb_index+0x42>
	}

	return ERR_INVALID_ARG;
    183e:	230d      	movs	r3, #13
    1840:	425b      	negs	r3, r3
}
    1842:	0018      	movs	r0, r3
    1844:	46bd      	mov	sp, r7
    1846:	b002      	add	sp, #8
    1848:	bd80      	pop	{r7, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	41002000 	.word	0x41002000
    1850:	41004000 	.word	0x41004000

00001854 <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
    1854:	b580      	push	{r7, lr}
    1856:	b082      	sub	sp, #8
    1858:	af00      	add	r7, sp, #0
    185a:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
    185c:	687a      	ldr	r2, [r7, #4]
    185e:	2382      	movs	r3, #130	; 0x82
    1860:	05db      	lsls	r3, r3, #23
    1862:	429a      	cmp	r2, r3
    1864:	d101      	bne.n	186a <_pm_get_apbb_index+0x16>
		return 0;
    1866:	2300      	movs	r3, #0
    1868:	e013      	b.n	1892 <_pm_get_apbb_index+0x3e>
	} else if ((uint32_t)module == (uint32_t)DSU) {
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	4a0b      	ldr	r2, [pc, #44]	; (189c <_pm_get_apbb_index+0x48>)
    186e:	4293      	cmp	r3, r2
    1870:	d101      	bne.n	1876 <_pm_get_apbb_index+0x22>
		return 1;
    1872:	2301      	movs	r3, #1
    1874:	e00d      	b.n	1892 <_pm_get_apbb_index+0x3e>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	4a09      	ldr	r2, [pc, #36]	; (18a0 <_pm_get_apbb_index+0x4c>)
    187a:	4293      	cmp	r3, r2
    187c:	d101      	bne.n	1882 <_pm_get_apbb_index+0x2e>
		return 2;
    187e:	2302      	movs	r3, #2
    1880:	e007      	b.n	1892 <_pm_get_apbb_index+0x3e>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	4a07      	ldr	r2, [pc, #28]	; (18a4 <_pm_get_apbb_index+0x50>)
    1886:	4293      	cmp	r3, r2
    1888:	d101      	bne.n	188e <_pm_get_apbb_index+0x3a>
		return 3;
    188a:	2303      	movs	r3, #3
    188c:	e001      	b.n	1892 <_pm_get_apbb_index+0x3e>
	}

	return ERR_INVALID_ARG;
    188e:	230d      	movs	r3, #13
    1890:	425b      	negs	r3, r3
}
    1892:	0018      	movs	r0, r3
    1894:	46bd      	mov	sp, r7
    1896:	b002      	add	sp, #8
    1898:	bd80      	pop	{r7, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	41002000 	.word	0x41002000
    18a0:	41004000 	.word	0x41004000
    18a4:	41004400 	.word	0x41004400

000018a8 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	b084      	sub	sp, #16
    18ac:	af00      	add	r7, sp, #0
    18ae:	0002      	movs	r2, r0
    18b0:	6039      	str	r1, [r7, #0]
    18b2:	1dfb      	adds	r3, r7, #7
    18b4:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
    18b6:	683b      	ldr	r3, [r7, #0]
    18b8:	0a9b      	lsrs	r3, r3, #10
    18ba:	223f      	movs	r2, #63	; 0x3f
    18bc:	4013      	ands	r3, r2
    18be:	60fb      	str	r3, [r7, #12]

	switch (bus) {
    18c0:	1dfb      	adds	r3, r7, #7
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	2b01      	cmp	r3, #1
    18c6:	d01e      	beq.n	1906 <_pm_enable_bus_clock+0x5e>
    18c8:	dc02      	bgt.n	18d0 <_pm_enable_bus_clock+0x28>
    18ca:	2b00      	cmp	r3, #0
    18cc:	d005      	beq.n	18da <_pm_enable_bus_clock+0x32>
    18ce:	e044      	b.n	195a <_pm_enable_bus_clock+0xb2>
    18d0:	2b02      	cmp	r3, #2
    18d2:	d022      	beq.n	191a <_pm_enable_bus_clock+0x72>
    18d4:	2b03      	cmp	r3, #3
    18d6:	d036      	beq.n	1946 <_pm_enable_bus_clock+0x9e>
    18d8:	e03f      	b.n	195a <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
    18da:	683b      	ldr	r3, [r7, #0]
    18dc:	0018      	movs	r0, r3
    18de:	4b26      	ldr	r3, [pc, #152]	; (1978 <_pm_enable_bus_clock+0xd0>)
    18e0:	4798      	blx	r3
    18e2:	1e03      	subs	r3, r0, #0
    18e4:	db40      	blt.n	1968 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
    18e6:	683b      	ldr	r3, [r7, #0]
    18e8:	0018      	movs	r0, r3
    18ea:	4b23      	ldr	r3, [pc, #140]	; (1978 <_pm_enable_bus_clock+0xd0>)
    18ec:	4798      	blx	r3
    18ee:	0003      	movs	r3, r0
    18f0:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
    18f2:	4b22      	ldr	r3, [pc, #136]	; (197c <_pm_enable_bus_clock+0xd4>)
    18f4:	4a21      	ldr	r2, [pc, #132]	; (197c <_pm_enable_bus_clock+0xd4>)
    18f6:	6952      	ldr	r2, [r2, #20]
    18f8:	2001      	movs	r0, #1
    18fa:	68f9      	ldr	r1, [r7, #12]
    18fc:	4088      	lsls	r0, r1
    18fe:	0001      	movs	r1, r0
    1900:	430a      	orrs	r2, r1
    1902:	615a      	str	r2, [r3, #20]
		}
		break;
    1904:	e030      	b.n	1968 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1906:	4b1d      	ldr	r3, [pc, #116]	; (197c <_pm_enable_bus_clock+0xd4>)
    1908:	4a1c      	ldr	r2, [pc, #112]	; (197c <_pm_enable_bus_clock+0xd4>)
    190a:	6992      	ldr	r2, [r2, #24]
    190c:	2001      	movs	r0, #1
    190e:	68f9      	ldr	r1, [r7, #12]
    1910:	4088      	lsls	r0, r1
    1912:	0001      	movs	r1, r0
    1914:	430a      	orrs	r2, r1
    1916:	619a      	str	r2, [r3, #24]
		break;
    1918:	e029      	b.n	196e <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
    191a:	683b      	ldr	r3, [r7, #0]
    191c:	0018      	movs	r0, r3
    191e:	4b18      	ldr	r3, [pc, #96]	; (1980 <_pm_enable_bus_clock+0xd8>)
    1920:	4798      	blx	r3
    1922:	1e03      	subs	r3, r0, #0
    1924:	db22      	blt.n	196c <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
    1926:	683b      	ldr	r3, [r7, #0]
    1928:	0018      	movs	r0, r3
    192a:	4b15      	ldr	r3, [pc, #84]	; (1980 <_pm_enable_bus_clock+0xd8>)
    192c:	4798      	blx	r3
    192e:	0003      	movs	r3, r0
    1930:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
    1932:	4b12      	ldr	r3, [pc, #72]	; (197c <_pm_enable_bus_clock+0xd4>)
    1934:	4a11      	ldr	r2, [pc, #68]	; (197c <_pm_enable_bus_clock+0xd4>)
    1936:	69d2      	ldr	r2, [r2, #28]
    1938:	2001      	movs	r0, #1
    193a:	68f9      	ldr	r1, [r7, #12]
    193c:	4088      	lsls	r0, r1
    193e:	0001      	movs	r1, r0
    1940:	430a      	orrs	r2, r1
    1942:	61da      	str	r2, [r3, #28]
		}
		break;
    1944:	e012      	b.n	196c <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1946:	4b0d      	ldr	r3, [pc, #52]	; (197c <_pm_enable_bus_clock+0xd4>)
    1948:	4a0c      	ldr	r2, [pc, #48]	; (197c <_pm_enable_bus_clock+0xd4>)
    194a:	6a12      	ldr	r2, [r2, #32]
    194c:	2001      	movs	r0, #1
    194e:	68f9      	ldr	r1, [r7, #12]
    1950:	4088      	lsls	r0, r1
    1952:	0001      	movs	r1, r0
    1954:	430a      	orrs	r2, r1
    1956:	621a      	str	r2, [r3, #32]
		break;
    1958:	e009      	b.n	196e <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
    195a:	4b0a      	ldr	r3, [pc, #40]	; (1984 <_pm_enable_bus_clock+0xdc>)
    195c:	228d      	movs	r2, #141	; 0x8d
    195e:	0019      	movs	r1, r3
    1960:	2000      	movs	r0, #0
    1962:	4b09      	ldr	r3, [pc, #36]	; (1988 <_pm_enable_bus_clock+0xe0>)
    1964:	4798      	blx	r3
		break;
    1966:	e002      	b.n	196e <_pm_enable_bus_clock+0xc6>
		break;
    1968:	46c0      	nop			; (mov r8, r8)
    196a:	e000      	b.n	196e <_pm_enable_bus_clock+0xc6>
		break;
    196c:	46c0      	nop			; (mov r8, r8)
	}
}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	46bd      	mov	sp, r7
    1972:	b004      	add	sp, #16
    1974:	bd80      	pop	{r7, pc}
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	00001801 	.word	0x00001801
    197c:	40000400 	.word	0x40000400
    1980:	00001855 	.word	0x00001855
    1984:	00005f50 	.word	0x00005f50
    1988:	0000204d 	.word	0x0000204d

0000198c <I2C_0_PORT_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor USART_0;

void I2C_0_PORT_init(void)
{
    198c:	b580      	push	{r7, lr}
    198e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1990:	2100      	movs	r1, #0
    1992:	2010      	movs	r0, #16
    1994:	4b09      	ldr	r3, [pc, #36]	; (19bc <I2C_0_PORT_init+0x30>)
    1996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1998:	4b09      	ldr	r3, [pc, #36]	; (19c0 <I2C_0_PORT_init+0x34>)
    199a:	0019      	movs	r1, r3
    199c:	2010      	movs	r0, #16
    199e:	4b09      	ldr	r3, [pc, #36]	; (19c4 <I2C_0_PORT_init+0x38>)
    19a0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    19a2:	2100      	movs	r1, #0
    19a4:	2011      	movs	r0, #17
    19a6:	4b05      	ldr	r3, [pc, #20]	; (19bc <I2C_0_PORT_init+0x30>)
    19a8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    19aa:	4b07      	ldr	r3, [pc, #28]	; (19c8 <I2C_0_PORT_init+0x3c>)
    19ac:	0019      	movs	r1, r3
    19ae:	2011      	movs	r0, #17
    19b0:	4b04      	ldr	r3, [pc, #16]	; (19c4 <I2C_0_PORT_init+0x38>)
    19b2:	4798      	blx	r3
}
    19b4:	46c0      	nop			; (mov r8, r8)
    19b6:	46bd      	mov	sp, r7
    19b8:	bd80      	pop	{r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	000016b5 	.word	0x000016b5
    19c0:	00100002 	.word	0x00100002
    19c4:	000016f1 	.word	0x000016f1
    19c8:	00110002 	.word	0x00110002

000019cc <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
    19d0:	4b07      	ldr	r3, [pc, #28]	; (19f0 <I2C_0_CLOCK_init+0x24>)
    19d2:	0019      	movs	r1, r3
    19d4:	2003      	movs	r0, #3
    19d6:	4b07      	ldr	r3, [pc, #28]	; (19f4 <I2C_0_CLOCK_init+0x28>)
    19d8:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
    19da:	2100      	movs	r1, #0
    19dc:	200e      	movs	r0, #14
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <I2C_0_CLOCK_init+0x2c>)
    19e0:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
    19e2:	2103      	movs	r1, #3
    19e4:	200c      	movs	r0, #12
    19e6:	4b04      	ldr	r3, [pc, #16]	; (19f8 <I2C_0_CLOCK_init+0x2c>)
    19e8:	4798      	blx	r3
}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	46bd      	mov	sp, r7
    19ee:	bd80      	pop	{r7, pc}
    19f0:	42000c00 	.word	0x42000c00
    19f4:	000018a9 	.word	0x000018a9
    19f8:	000017a9 	.word	0x000017a9

000019fc <I2C_0_init>:

void I2C_0_init(void)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
    1a00:	4b06      	ldr	r3, [pc, #24]	; (1a1c <I2C_0_init+0x20>)
    1a02:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
    1a04:	4a06      	ldr	r2, [pc, #24]	; (1a20 <I2C_0_init+0x24>)
    1a06:	4b07      	ldr	r3, [pc, #28]	; (1a24 <I2C_0_init+0x28>)
    1a08:	0011      	movs	r1, r2
    1a0a:	0018      	movs	r0, r3
    1a0c:	4b06      	ldr	r3, [pc, #24]	; (1a28 <I2C_0_init+0x2c>)
    1a0e:	4798      	blx	r3
	I2C_0_PORT_init();
    1a10:	4b06      	ldr	r3, [pc, #24]	; (1a2c <I2C_0_init+0x30>)
    1a12:	4798      	blx	r3
}
    1a14:	46c0      	nop			; (mov r8, r8)
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	000019cd 	.word	0x000019cd
    1a20:	42000c00 	.word	0x42000c00
    1a24:	200000c4 	.word	0x200000c4
    1a28:	00001c59 	.word	0x00001c59
    1a2c:	0000198d 	.word	0x0000198d

00001a30 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB22, PINMUX_PB22D_SERCOM5_PAD2);
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <USART_0_PORT_init+0x20>)
    1a36:	0019      	movs	r1, r3
    1a38:	2036      	movs	r0, #54	; 0x36
    1a3a:	4b06      	ldr	r3, [pc, #24]	; (1a54 <USART_0_PORT_init+0x24>)
    1a3c:	4798      	blx	r3

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <USART_0_PORT_init+0x28>)
    1a40:	0019      	movs	r1, r3
    1a42:	2037      	movs	r0, #55	; 0x37
    1a44:	4b03      	ldr	r3, [pc, #12]	; (1a54 <USART_0_PORT_init+0x24>)
    1a46:	4798      	blx	r3
}
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46bd      	mov	sp, r7
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	00360003 	.word	0x00360003
    1a54:	000016f1 	.word	0x000016f1
    1a58:	00370003 	.word	0x00370003

00001a5c <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
    1a60:	4b05      	ldr	r3, [pc, #20]	; (1a78 <USART_0_CLOCK_init+0x1c>)
    1a62:	0019      	movs	r1, r3
    1a64:	2003      	movs	r0, #3
    1a66:	4b05      	ldr	r3, [pc, #20]	; (1a7c <USART_0_CLOCK_init+0x20>)
    1a68:	4798      	blx	r3
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
    1a6a:	2100      	movs	r1, #0
    1a6c:	2012      	movs	r0, #18
    1a6e:	4b04      	ldr	r3, [pc, #16]	; (1a80 <USART_0_CLOCK_init+0x24>)
    1a70:	4798      	blx	r3
}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	46bd      	mov	sp, r7
    1a76:	bd80      	pop	{r7, pc}
    1a78:	42001c00 	.word	0x42001c00
    1a7c:	000018a9 	.word	0x000018a9
    1a80:	000017a9 	.word	0x000017a9

00001a84 <USART_0_init>:

void USART_0_init(void)
{
    1a84:	b580      	push	{r7, lr}
    1a86:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
    1a88:	4b06      	ldr	r3, [pc, #24]	; (1aa4 <USART_0_init+0x20>)
    1a8a:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
    1a8c:	4906      	ldr	r1, [pc, #24]	; (1aa8 <USART_0_init+0x24>)
    1a8e:	4b07      	ldr	r3, [pc, #28]	; (1aac <USART_0_init+0x28>)
    1a90:	2200      	movs	r2, #0
    1a92:	0018      	movs	r0, r3
    1a94:	4b06      	ldr	r3, [pc, #24]	; (1ab0 <USART_0_init+0x2c>)
    1a96:	4798      	blx	r3
	USART_0_PORT_init();
    1a98:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <USART_0_init+0x30>)
    1a9a:	4798      	blx	r3
}
    1a9c:	46c0      	nop			; (mov r8, r8)
    1a9e:	46bd      	mov	sp, r7
    1aa0:	bd80      	pop	{r7, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	00001a5d 	.word	0x00001a5d
    1aa8:	42001c00 	.word	0x42001c00
    1aac:	200000b8 	.word	0x200000b8
    1ab0:	00001de1 	.word	0x00001de1
    1ab4:	00001a31 	.word	0x00001a31

00001ab8 <delay_driver_init>:

void delay_driver_init(void)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    1abc:	4b03      	ldr	r3, [pc, #12]	; (1acc <delay_driver_init+0x14>)
    1abe:	0018      	movs	r0, r3
    1ac0:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <delay_driver_init+0x18>)
    1ac2:	4798      	blx	r3
}
    1ac4:	46c0      	nop			; (mov r8, r8)
    1ac6:	46bd      	mov	sp, r7
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	e000e010 	.word	0xe000e010
    1ad0:	00001b29 	.word	0x00001b29

00001ad4 <system_init>:

void system_init(void)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	af00      	add	r7, sp, #0
	init_mcu();
    1ad8:	4b0c      	ldr	r3, [pc, #48]	; (1b0c <system_init+0x38>)
    1ada:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(LED,
    1adc:	2100      	movs	r1, #0
    1ade:	200f      	movs	r0, #15
    1ae0:	4b0b      	ldr	r3, [pc, #44]	; (1b10 <system_init+0x3c>)
    1ae2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED, GPIO_DIRECTION_OUT);
    1ae4:	2102      	movs	r1, #2
    1ae6:	200f      	movs	r0, #15
    1ae8:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <system_init+0x40>)
    1aea:	4798      	blx	r3

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);
    1aec:	2301      	movs	r3, #1
    1aee:	425b      	negs	r3, r3
    1af0:	0019      	movs	r1, r3
    1af2:	200f      	movs	r0, #15
    1af4:	4b08      	ldr	r3, [pc, #32]	; (1b18 <system_init+0x44>)
    1af6:	4798      	blx	r3

	I2C_0_init();
    1af8:	4b08      	ldr	r3, [pc, #32]	; (1b1c <system_init+0x48>)
    1afa:	4798      	blx	r3

	USART_0_init();
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <system_init+0x4c>)
    1afe:	4798      	blx	r3

	delay_driver_init();
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <system_init+0x50>)
    1b02:	4798      	blx	r3
}
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46bd      	mov	sp, r7
    1b08:	bd80      	pop	{r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	00001795 	.word	0x00001795
    1b10:	00001755 	.word	0x00001755
    1b14:	00001715 	.word	0x00001715
    1b18:	000016f1 	.word	0x000016f1
    1b1c:	000019fd 	.word	0x000019fd
    1b20:	00001a85 	.word	0x00001a85
    1b24:	00001ab9 	.word	0x00001ab9

00001b28 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <delay_init+0x20>)
    1b32:	687a      	ldr	r2, [r7, #4]
    1b34:	601a      	str	r2, [r3, #0]
    1b36:	4b04      	ldr	r3, [pc, #16]	; (1b48 <delay_init+0x20>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b03      	ldr	r3, [pc, #12]	; (1b4c <delay_init+0x24>)
    1b3e:	4798      	blx	r3
}
    1b40:	46c0      	nop			; (mov r8, r8)
    1b42:	46bd      	mov	sp, r7
    1b44:	b002      	add	sp, #8
    1b46:	bd80      	pop	{r7, pc}
    1b48:	200000a8 	.word	0x200000a8
    1b4c:	00003439 	.word	0x00003439

00001b50 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b50:	b590      	push	{r4, r7, lr}
    1b52:	b083      	sub	sp, #12
    1b54:	af00      	add	r7, sp, #0
    1b56:	0002      	movs	r2, r0
    1b58:	1dbb      	adds	r3, r7, #6
    1b5a:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b5c:	4b07      	ldr	r3, [pc, #28]	; (1b7c <delay_ms+0x2c>)
    1b5e:	681c      	ldr	r4, [r3, #0]
    1b60:	1dbb      	adds	r3, r7, #6
    1b62:	881b      	ldrh	r3, [r3, #0]
    1b64:	0018      	movs	r0, r3
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <delay_ms+0x30>)
    1b68:	4798      	blx	r3
    1b6a:	0003      	movs	r3, r0
    1b6c:	0019      	movs	r1, r3
    1b6e:	0020      	movs	r0, r4
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <delay_ms+0x34>)
    1b72:	4798      	blx	r3
}
    1b74:	46c0      	nop			; (mov r8, r8)
    1b76:	46bd      	mov	sp, r7
    1b78:	b003      	add	sp, #12
    1b7a:	bd90      	pop	{r4, r7, pc}
    1b7c:	200000a8 	.word	0x200000a8
    1b80:	000022a5 	.word	0x000022a5
    1b84:	00003455 	.word	0x00003455

00001b88 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	b08a      	sub	sp, #40	; 0x28
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	60f8      	str	r0, [r7, #12]
    1b90:	60b9      	str	r1, [r7, #8]
    1b92:	1dbb      	adds	r3, r7, #6
    1b94:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1b96:	68fb      	ldr	r3, [r7, #12]
    1b98:	3b14      	subs	r3, #20
    1b9a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b9e:	8b9a      	ldrh	r2, [r3, #28]
    1ba0:	2314      	movs	r3, #20
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1ba6:	1dbb      	adds	r3, r7, #6
    1ba8:	881a      	ldrh	r2, [r3, #0]
    1baa:	2314      	movs	r3, #20
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1bb0:	2314      	movs	r3, #20
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	4a0c      	ldr	r2, [pc, #48]	; (1be8 <i2c_m_sync_read+0x60>)
    1bb6:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    1bb8:	2314      	movs	r3, #20
    1bba:	18fb      	adds	r3, r7, r3
    1bbc:	68ba      	ldr	r2, [r7, #8]
    1bbe:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bc2:	2214      	movs	r2, #20
    1bc4:	18ba      	adds	r2, r7, r2
    1bc6:	0011      	movs	r1, r2
    1bc8:	0018      	movs	r0, r3
    1bca:	4b08      	ldr	r3, [pc, #32]	; (1bec <i2c_m_sync_read+0x64>)
    1bcc:	4798      	blx	r3
    1bce:	0003      	movs	r3, r0
    1bd0:	623b      	str	r3, [r7, #32]

	if (ret) {
    1bd2:	6a3b      	ldr	r3, [r7, #32]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d001      	beq.n	1bdc <i2c_m_sync_read+0x54>
		return ret;
    1bd8:	6a3b      	ldr	r3, [r7, #32]
    1bda:	e001      	b.n	1be0 <i2c_m_sync_read+0x58>
	}

	return n;
    1bdc:	1dbb      	adds	r3, r7, #6
    1bde:	881b      	ldrh	r3, [r3, #0]
}
    1be0:	0018      	movs	r0, r3
    1be2:	46bd      	mov	sp, r7
    1be4:	b00a      	add	sp, #40	; 0x28
    1be6:	bd80      	pop	{r7, pc}
    1be8:	ffff8001 	.word	0xffff8001
    1bec:	000030d9 	.word	0x000030d9

00001bf0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b08a      	sub	sp, #40	; 0x28
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	60f8      	str	r0, [r7, #12]
    1bf8:	60b9      	str	r1, [r7, #8]
    1bfa:	1dbb      	adds	r3, r7, #6
    1bfc:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1bfe:	68fb      	ldr	r3, [r7, #12]
    1c00:	3b14      	subs	r3, #20
    1c02:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c06:	8b9a      	ldrh	r2, [r3, #28]
    1c08:	2314      	movs	r3, #20
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1c0e:	1dbb      	adds	r3, r7, #6
    1c10:	881a      	ldrh	r2, [r3, #0]
    1c12:	2314      	movs	r3, #20
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    1c18:	2314      	movs	r3, #20
    1c1a:	18fb      	adds	r3, r7, r3
    1c1c:	4a0c      	ldr	r2, [pc, #48]	; (1c50 <i2c_m_sync_write+0x60>)
    1c1e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1c20:	2314      	movs	r3, #20
    1c22:	18fb      	adds	r3, r7, r3
    1c24:	68ba      	ldr	r2, [r7, #8]
    1c26:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c2a:	2214      	movs	r2, #20
    1c2c:	18ba      	adds	r2, r7, r2
    1c2e:	0011      	movs	r1, r2
    1c30:	0018      	movs	r0, r3
    1c32:	4b08      	ldr	r3, [pc, #32]	; (1c54 <i2c_m_sync_write+0x64>)
    1c34:	4798      	blx	r3
    1c36:	0003      	movs	r3, r0
    1c38:	623b      	str	r3, [r7, #32]

	if (ret) {
    1c3a:	6a3b      	ldr	r3, [r7, #32]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d001      	beq.n	1c44 <i2c_m_sync_write+0x54>
		return ret;
    1c40:	6a3b      	ldr	r3, [r7, #32]
    1c42:	e001      	b.n	1c48 <i2c_m_sync_write+0x58>
	}

	return n;
    1c44:	1dbb      	adds	r3, r7, #6
    1c46:	881b      	ldrh	r3, [r3, #0]
}
    1c48:	0018      	movs	r0, r3
    1c4a:	46bd      	mov	sp, r7
    1c4c:	b00a      	add	sp, #40	; 0x28
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	ffff8000 	.word	0xffff8000
    1c54:	000030d9 	.word	0x000030d9

00001c58 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	b084      	sub	sp, #16
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	1e5a      	subs	r2, r3, #1
    1c66:	4193      	sbcs	r3, r2
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	490e      	ldr	r1, [pc, #56]	; (1ca4 <i2c_m_sync_init+0x4c>)
    1c6c:	225e      	movs	r2, #94	; 0x5e
    1c6e:	0018      	movs	r0, r3
    1c70:	4b0d      	ldr	r3, [pc, #52]	; (1ca8 <i2c_m_sync_init+0x50>)
    1c72:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	683a      	ldr	r2, [r7, #0]
    1c78:	0011      	movs	r1, r2
    1c7a:	0018      	movs	r0, r3
    1c7c:	4b0b      	ldr	r3, [pc, #44]	; (1cac <i2c_m_sync_init+0x54>)
    1c7e:	4798      	blx	r3
    1c80:	0003      	movs	r3, r0
    1c82:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d001      	beq.n	1c8e <i2c_m_sync_init+0x36>
		return init_status;
    1c8a:	68fb      	ldr	r3, [r7, #12]
    1c8c:	e006      	b.n	1c9c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	4a07      	ldr	r2, [pc, #28]	; (1cb0 <i2c_m_sync_init+0x58>)
    1c92:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	4a07      	ldr	r2, [pc, #28]	; (1cb4 <i2c_m_sync_init+0x5c>)
    1c98:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1c9a:	2300      	movs	r3, #0
}
    1c9c:	0018      	movs	r0, r3
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b004      	add	sp, #16
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	00005f68 	.word	0x00005f68
    1ca8:	0000204d 	.word	0x0000204d
    1cac:	00002e3d 	.word	0x00002e3d
    1cb0:	00001b89 	.word	0x00001b89
    1cb4:	00001bf1 	.word	0x00001bf1

00001cb8 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b082      	sub	sp, #8
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	0018      	movs	r0, r3
    1cc4:	4b03      	ldr	r3, [pc, #12]	; (1cd4 <i2c_m_sync_enable+0x1c>)
    1cc6:	4798      	blx	r3
    1cc8:	0003      	movs	r3, r0
}
    1cca:	0018      	movs	r0, r3
    1ccc:	46bd      	mov	sp, r7
    1cce:	b002      	add	sp, #8
    1cd0:	bd80      	pop	{r7, pc}
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	00002f5d 	.word	0x00002f5d

00001cd8 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    1cd8:	b580      	push	{r7, lr}
    1cda:	b084      	sub	sp, #16
    1cdc:	af00      	add	r7, sp, #0
    1cde:	60f8      	str	r0, [r7, #12]
    1ce0:	607a      	str	r2, [r7, #4]
    1ce2:	230a      	movs	r3, #10
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	1c0a      	adds	r2, r1, #0
    1ce8:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1cea:	230a      	movs	r3, #10
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	881b      	ldrh	r3, [r3, #0]
    1cf0:	059b      	lsls	r3, r3, #22
    1cf2:	0d9b      	lsrs	r3, r3, #22
    1cf4:	b21a      	sxth	r2, r3
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	b219      	sxth	r1, r3
    1cfa:	2380      	movs	r3, #128	; 0x80
    1cfc:	00db      	lsls	r3, r3, #3
    1cfe:	400b      	ands	r3, r1
    1d00:	b21b      	sxth	r3, r3
    1d02:	4313      	orrs	r3, r2
    1d04:	b21b      	sxth	r3, r3
    1d06:	b29a      	uxth	r2, r3
    1d08:	68fb      	ldr	r3, [r7, #12]
    1d0a:	839a      	strh	r2, [r3, #28]
    1d0c:	68fb      	ldr	r3, [r7, #12]
    1d0e:	8b9b      	ldrh	r3, [r3, #28]
}
    1d10:	0018      	movs	r0, r3
    1d12:	46bd      	mov	sp, r7
    1d14:	b004      	add	sp, #16
    1d16:	bd80      	pop	{r7, pc}

00001d18 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b082      	sub	sp, #8
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    1d20:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	3314      	adds	r3, #20
    1d26:	001a      	movs	r2, r3
    1d28:	683b      	ldr	r3, [r7, #0]
    1d2a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1d2c:	2300      	movs	r3, #0
}
    1d2e:	0018      	movs	r0, r3
    1d30:	46bd      	mov	sp, r7
    1d32:	b002      	add	sp, #8
    1d34:	bd80      	pop	{r7, pc}
	...

00001d38 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	b084      	sub	sp, #16
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	60f8      	str	r0, [r7, #12]
    1d40:	60b9      	str	r1, [r7, #8]
    1d42:	1dbb      	adds	r3, r7, #6
    1d44:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1d46:	68fb      	ldr	r3, [r7, #12]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d004      	beq.n	1d56 <io_write+0x1e>
    1d4c:	68bb      	ldr	r3, [r7, #8]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d001      	beq.n	1d56 <io_write+0x1e>
    1d52:	2301      	movs	r3, #1
    1d54:	e000      	b.n	1d58 <io_write+0x20>
    1d56:	2300      	movs	r3, #0
    1d58:	1c1a      	adds	r2, r3, #0
    1d5a:	2301      	movs	r3, #1
    1d5c:	4013      	ands	r3, r2
    1d5e:	b2db      	uxtb	r3, r3
    1d60:	4908      	ldr	r1, [pc, #32]	; (1d84 <io_write+0x4c>)
    1d62:	2234      	movs	r2, #52	; 0x34
    1d64:	0018      	movs	r0, r3
    1d66:	4b08      	ldr	r3, [pc, #32]	; (1d88 <io_write+0x50>)
    1d68:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1d6a:	68fb      	ldr	r3, [r7, #12]
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	1dba      	adds	r2, r7, #6
    1d70:	8812      	ldrh	r2, [r2, #0]
    1d72:	68b9      	ldr	r1, [r7, #8]
    1d74:	68f8      	ldr	r0, [r7, #12]
    1d76:	4798      	blx	r3
    1d78:	0003      	movs	r3, r0
}
    1d7a:	0018      	movs	r0, r3
    1d7c:	46bd      	mov	sp, r7
    1d7e:	b004      	add	sp, #16
    1d80:	bd80      	pop	{r7, pc}
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	00005f84 	.word	0x00005f84
    1d88:	0000204d 	.word	0x0000204d

00001d8c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b084      	sub	sp, #16
    1d90:	af00      	add	r7, sp, #0
    1d92:	60f8      	str	r0, [r7, #12]
    1d94:	60b9      	str	r1, [r7, #8]
    1d96:	1dbb      	adds	r3, r7, #6
    1d98:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1d9a:	68fb      	ldr	r3, [r7, #12]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d004      	beq.n	1daa <io_read+0x1e>
    1da0:	68bb      	ldr	r3, [r7, #8]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d001      	beq.n	1daa <io_read+0x1e>
    1da6:	2301      	movs	r3, #1
    1da8:	e000      	b.n	1dac <io_read+0x20>
    1daa:	2300      	movs	r3, #0
    1dac:	1c1a      	adds	r2, r3, #0
    1dae:	2301      	movs	r3, #1
    1db0:	4013      	ands	r3, r2
    1db2:	b2db      	uxtb	r3, r3
    1db4:	4908      	ldr	r1, [pc, #32]	; (1dd8 <io_read+0x4c>)
    1db6:	223d      	movs	r2, #61	; 0x3d
    1db8:	0018      	movs	r0, r3
    1dba:	4b08      	ldr	r3, [pc, #32]	; (1ddc <io_read+0x50>)
    1dbc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	685b      	ldr	r3, [r3, #4]
    1dc2:	1dba      	adds	r2, r7, #6
    1dc4:	8812      	ldrh	r2, [r2, #0]
    1dc6:	68b9      	ldr	r1, [r7, #8]
    1dc8:	68f8      	ldr	r0, [r7, #12]
    1dca:	4798      	blx	r3
    1dcc:	0003      	movs	r3, r0
}
    1dce:	0018      	movs	r0, r3
    1dd0:	46bd      	mov	sp, r7
    1dd2:	b004      	add	sp, #16
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00005f84 	.word	0x00005f84
    1ddc:	0000204d 	.word	0x0000204d

00001de0 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b086      	sub	sp, #24
    1de4:	af00      	add	r7, sp, #0
    1de6:	60f8      	str	r0, [r7, #12]
    1de8:	60b9      	str	r1, [r7, #8]
    1dea:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d004      	beq.n	1dfc <usart_sync_init+0x1c>
    1df2:	68bb      	ldr	r3, [r7, #8]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d001      	beq.n	1dfc <usart_sync_init+0x1c>
    1df8:	2301      	movs	r3, #1
    1dfa:	e000      	b.n	1dfe <usart_sync_init+0x1e>
    1dfc:	2300      	movs	r3, #0
    1dfe:	1c1a      	adds	r2, r3, #0
    1e00:	2301      	movs	r3, #1
    1e02:	4013      	ands	r3, r2
    1e04:	b2db      	uxtb	r3, r3
    1e06:	490f      	ldr	r1, [pc, #60]	; (1e44 <usart_sync_init+0x64>)
    1e08:	2234      	movs	r2, #52	; 0x34
    1e0a:	0018      	movs	r0, r3
    1e0c:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <usart_sync_init+0x68>)
    1e0e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	3308      	adds	r3, #8
    1e14:	68ba      	ldr	r2, [r7, #8]
    1e16:	0011      	movs	r1, r2
    1e18:	0018      	movs	r0, r3
    1e1a:	4b0c      	ldr	r3, [pc, #48]	; (1e4c <usart_sync_init+0x6c>)
    1e1c:	4798      	blx	r3
    1e1e:	0003      	movs	r3, r0
    1e20:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1e22:	697b      	ldr	r3, [r7, #20]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d001      	beq.n	1e2c <usart_sync_init+0x4c>
		return init_status;
    1e28:	697b      	ldr	r3, [r7, #20]
    1e2a:	e006      	b.n	1e3a <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	4a08      	ldr	r2, [pc, #32]	; (1e50 <usart_sync_init+0x70>)
    1e30:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	4a07      	ldr	r2, [pc, #28]	; (1e54 <usart_sync_init+0x74>)
    1e36:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1e38:	2300      	movs	r3, #0
}
    1e3a:	0018      	movs	r0, r3
    1e3c:	46bd      	mov	sp, r7
    1e3e:	b006      	add	sp, #24
    1e40:	bd80      	pop	{r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00005f98 	.word	0x00005f98
    1e48:	0000204d 	.word	0x0000204d
    1e4c:	0000291d 	.word	0x0000291d
    1e50:	00001fb1 	.word	0x00001fb1
    1e54:	00001edd 	.word	0x00001edd

00001e58 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b082      	sub	sp, #8
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1e60:	687b      	ldr	r3, [r7, #4]
    1e62:	1e5a      	subs	r2, r3, #1
    1e64:	4193      	sbcs	r3, r2
    1e66:	b2db      	uxtb	r3, r3
    1e68:	4907      	ldr	r1, [pc, #28]	; (1e88 <usart_sync_enable+0x30>)
    1e6a:	2253      	movs	r2, #83	; 0x53
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b07      	ldr	r3, [pc, #28]	; (1e8c <usart_sync_enable+0x34>)
    1e70:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	3308      	adds	r3, #8
    1e76:	0018      	movs	r0, r3
    1e78:	4b05      	ldr	r3, [pc, #20]	; (1e90 <usart_sync_enable+0x38>)
    1e7a:	4798      	blx	r3

	return ERR_NONE;
    1e7c:	2300      	movs	r3, #0
}
    1e7e:	0018      	movs	r0, r3
    1e80:	46bd      	mov	sp, r7
    1e82:	b002      	add	sp, #8
    1e84:	bd80      	pop	{r7, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00005f98 	.word	0x00005f98
    1e8c:	0000204d 	.word	0x0000204d
    1e90:	0000295d 	.word	0x0000295d

00001e94 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b082      	sub	sp, #8
    1e98:	af00      	add	r7, sp, #0
    1e9a:	6078      	str	r0, [r7, #4]
    1e9c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    1e9e:	687b      	ldr	r3, [r7, #4]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d004      	beq.n	1eae <usart_sync_get_io_descriptor+0x1a>
    1ea4:	683b      	ldr	r3, [r7, #0]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d001      	beq.n	1eae <usart_sync_get_io_descriptor+0x1a>
    1eaa:	2301      	movs	r3, #1
    1eac:	e000      	b.n	1eb0 <usart_sync_get_io_descriptor+0x1c>
    1eae:	2300      	movs	r3, #0
    1eb0:	1c1a      	adds	r2, r3, #0
    1eb2:	2301      	movs	r3, #1
    1eb4:	4013      	ands	r3, r2
    1eb6:	b2db      	uxtb	r3, r3
    1eb8:	4906      	ldr	r1, [pc, #24]	; (1ed4 <usart_sync_get_io_descriptor+0x40>)
    1eba:	2269      	movs	r2, #105	; 0x69
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <usart_sync_get_io_descriptor+0x44>)
    1ec0:	4798      	blx	r3

	*io = &descr->io;
    1ec2:	687a      	ldr	r2, [r7, #4]
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1ec8:	2300      	movs	r3, #0
}
    1eca:	0018      	movs	r0, r3
    1ecc:	46bd      	mov	sp, r7
    1ece:	b002      	add	sp, #8
    1ed0:	bd80      	pop	{r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00005f98 	.word	0x00005f98
    1ed8:	0000204d 	.word	0x0000204d

00001edc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b086      	sub	sp, #24
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	60f8      	str	r0, [r7, #12]
    1ee4:	60b9      	str	r1, [r7, #8]
    1ee6:	1dbb      	adds	r3, r7, #6
    1ee8:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1eea:	2300      	movs	r3, #0
    1eec:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1eee:	68fb      	ldr	r3, [r7, #12]
    1ef0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1ef2:	68fb      	ldr	r3, [r7, #12]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d008      	beq.n	1f0a <usart_sync_write+0x2e>
    1ef8:	68bb      	ldr	r3, [r7, #8]
    1efa:	2b00      	cmp	r3, #0
    1efc:	d005      	beq.n	1f0a <usart_sync_write+0x2e>
    1efe:	1dbb      	adds	r3, r7, #6
    1f00:	881b      	ldrh	r3, [r3, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d001      	beq.n	1f0a <usart_sync_write+0x2e>
    1f06:	2301      	movs	r3, #1
    1f08:	e000      	b.n	1f0c <usart_sync_write+0x30>
    1f0a:	2300      	movs	r3, #0
    1f0c:	1c1a      	adds	r2, r3, #0
    1f0e:	2301      	movs	r3, #1
    1f10:	4013      	ands	r3, r2
    1f12:	b2db      	uxtb	r3, r3
    1f14:	4921      	ldr	r1, [pc, #132]	; (1f9c <usart_sync_write+0xc0>)
    1f16:	22f1      	movs	r2, #241	; 0xf1
    1f18:	0018      	movs	r0, r3
    1f1a:	4b21      	ldr	r3, [pc, #132]	; (1fa0 <usart_sync_write+0xc4>)
    1f1c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	693b      	ldr	r3, [r7, #16]
    1f22:	3308      	adds	r3, #8
    1f24:	0018      	movs	r0, r3
    1f26:	4b1f      	ldr	r3, [pc, #124]	; (1fa4 <usart_sync_write+0xc8>)
    1f28:	4798      	blx	r3
    1f2a:	0003      	movs	r3, r0
    1f2c:	001a      	movs	r2, r3
    1f2e:	2301      	movs	r3, #1
    1f30:	4053      	eors	r3, r2
    1f32:	b2db      	uxtb	r3, r3
    1f34:	2b00      	cmp	r3, #0
    1f36:	d1f3      	bne.n	1f20 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1f38:	693b      	ldr	r3, [r7, #16]
    1f3a:	3308      	adds	r3, #8
    1f3c:	0018      	movs	r0, r3
    1f3e:	68ba      	ldr	r2, [r7, #8]
    1f40:	697b      	ldr	r3, [r7, #20]
    1f42:	18d3      	adds	r3, r2, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	0019      	movs	r1, r3
    1f48:	4b17      	ldr	r3, [pc, #92]	; (1fa8 <usart_sync_write+0xcc>)
    1f4a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f4c:	46c0      	nop			; (mov r8, r8)
    1f4e:	693b      	ldr	r3, [r7, #16]
    1f50:	3308      	adds	r3, #8
    1f52:	0018      	movs	r0, r3
    1f54:	4b13      	ldr	r3, [pc, #76]	; (1fa4 <usart_sync_write+0xc8>)
    1f56:	4798      	blx	r3
    1f58:	0003      	movs	r3, r0
    1f5a:	001a      	movs	r2, r3
    1f5c:	2301      	movs	r3, #1
    1f5e:	4053      	eors	r3, r2
    1f60:	b2db      	uxtb	r3, r3
    1f62:	2b00      	cmp	r3, #0
    1f64:	d1f3      	bne.n	1f4e <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	3301      	adds	r3, #1
    1f6a:	617b      	str	r3, [r7, #20]
    1f6c:	1dbb      	adds	r3, r7, #6
    1f6e:	881b      	ldrh	r3, [r3, #0]
    1f70:	697a      	ldr	r2, [r7, #20]
    1f72:	429a      	cmp	r2, r3
    1f74:	d3e0      	bcc.n	1f38 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	693b      	ldr	r3, [r7, #16]
    1f7a:	3308      	adds	r3, #8
    1f7c:	0018      	movs	r0, r3
    1f7e:	4b0b      	ldr	r3, [pc, #44]	; (1fac <usart_sync_write+0xd0>)
    1f80:	4798      	blx	r3
    1f82:	0003      	movs	r3, r0
    1f84:	001a      	movs	r2, r3
    1f86:	2301      	movs	r3, #1
    1f88:	4053      	eors	r3, r2
    1f8a:	b2db      	uxtb	r3, r3
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d1f3      	bne.n	1f78 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1f90:	697b      	ldr	r3, [r7, #20]
}
    1f92:	0018      	movs	r0, r3
    1f94:	46bd      	mov	sp, r7
    1f96:	b006      	add	sp, #24
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00005f98 	.word	0x00005f98
    1fa0:	0000204d 	.word	0x0000204d
    1fa4:	000029cd 	.word	0x000029cd
    1fa8:	0000297d 	.word	0x0000297d
    1fac:	000029ed 	.word	0x000029ed

00001fb0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1fb0:	b590      	push	{r4, r7, lr}
    1fb2:	b087      	sub	sp, #28
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	60f8      	str	r0, [r7, #12]
    1fb8:	60b9      	str	r1, [r7, #8]
    1fba:	1dbb      	adds	r3, r7, #6
    1fbc:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1fbe:	2300      	movs	r3, #0
    1fc0:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1fc6:	68fb      	ldr	r3, [r7, #12]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d008      	beq.n	1fde <usart_sync_read+0x2e>
    1fcc:	68bb      	ldr	r3, [r7, #8]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d005      	beq.n	1fde <usart_sync_read+0x2e>
    1fd2:	1dbb      	adds	r3, r7, #6
    1fd4:	881b      	ldrh	r3, [r3, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d001      	beq.n	1fde <usart_sync_read+0x2e>
    1fda:	2301      	movs	r3, #1
    1fdc:	e000      	b.n	1fe0 <usart_sync_read+0x30>
    1fde:	2300      	movs	r3, #0
    1fe0:	1c1a      	adds	r2, r3, #0
    1fe2:	2301      	movs	r3, #1
    1fe4:	4013      	ands	r3, r2
    1fe6:	b2d8      	uxtb	r0, r3
    1fe8:	2386      	movs	r3, #134	; 0x86
    1fea:	005a      	lsls	r2, r3, #1
    1fec:	4b13      	ldr	r3, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1fee:	0019      	movs	r1, r3
    1ff0:	4b13      	ldr	r3, [pc, #76]	; (2040 <STACK_SIZE+0x40>)
    1ff2:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1ff4:	46c0      	nop			; (mov r8, r8)
    1ff6:	693b      	ldr	r3, [r7, #16]
    1ff8:	3308      	adds	r3, #8
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b11      	ldr	r3, [pc, #68]	; (2044 <STACK_SIZE+0x44>)
    1ffe:	4798      	blx	r3
    2000:	0003      	movs	r3, r0
    2002:	001a      	movs	r2, r3
    2004:	2301      	movs	r3, #1
    2006:	4053      	eors	r3, r2
    2008:	b2db      	uxtb	r3, r3
    200a:	2b00      	cmp	r3, #0
    200c:	d1f3      	bne.n	1ff6 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    200e:	68ba      	ldr	r2, [r7, #8]
    2010:	697b      	ldr	r3, [r7, #20]
    2012:	18d4      	adds	r4, r2, r3
    2014:	693b      	ldr	r3, [r7, #16]
    2016:	3308      	adds	r3, #8
    2018:	0018      	movs	r0, r3
    201a:	4b0b      	ldr	r3, [pc, #44]	; (2048 <STACK_SIZE+0x48>)
    201c:	4798      	blx	r3
    201e:	0003      	movs	r3, r0
    2020:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    2022:	697b      	ldr	r3, [r7, #20]
    2024:	3301      	adds	r3, #1
    2026:	617b      	str	r3, [r7, #20]
    2028:	1dbb      	adds	r3, r7, #6
    202a:	881b      	ldrh	r3, [r3, #0]
    202c:	697a      	ldr	r2, [r7, #20]
    202e:	429a      	cmp	r2, r3
    2030:	d3e0      	bcc.n	1ff4 <usart_sync_read+0x44>

	return (int32_t)offset;
    2032:	697b      	ldr	r3, [r7, #20]
}
    2034:	0018      	movs	r0, r3
    2036:	46bd      	mov	sp, r7
    2038:	b007      	add	sp, #28
    203a:	bd90      	pop	{r4, r7, pc}
    203c:	00005f98 	.word	0x00005f98
    2040:	0000204d 	.word	0x0000204d
    2044:	00002a0d 	.word	0x00002a0d
    2048:	000029a9 	.word	0x000029a9

0000204c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    204c:	b580      	push	{r7, lr}
    204e:	b084      	sub	sp, #16
    2050:	af00      	add	r7, sp, #0
    2052:	60b9      	str	r1, [r7, #8]
    2054:	607a      	str	r2, [r7, #4]
    2056:	230f      	movs	r3, #15
    2058:	18fb      	adds	r3, r7, r3
    205a:	1c02      	adds	r2, r0, #0
    205c:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    205e:	230f      	movs	r3, #15
    2060:	18fb      	adds	r3, r7, r3
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	2201      	movs	r2, #1
    2066:	4053      	eors	r3, r2
    2068:	b2db      	uxtb	r3, r3
    206a:	2b00      	cmp	r3, #0
    206c:	d000      	beq.n	2070 <assert+0x24>
		__asm("BKPT #0");
    206e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2070:	46c0      	nop			; (mov r8, r8)
    2072:	46bd      	mov	sp, r7
    2074:	b004      	add	sp, #16
    2076:	bd80      	pop	{r7, pc}

00002078 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2078:	b580      	push	{r7, lr}
    207a:	b084      	sub	sp, #16
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2080:	4b0a      	ldr	r3, [pc, #40]	; (20ac <_sbrk+0x34>)
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	2b00      	cmp	r3, #0
    2086:	d102      	bne.n	208e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2088:	4b08      	ldr	r3, [pc, #32]	; (20ac <_sbrk+0x34>)
    208a:	4a09      	ldr	r2, [pc, #36]	; (20b0 <_sbrk+0x38>)
    208c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    208e:	4b07      	ldr	r3, [pc, #28]	; (20ac <_sbrk+0x34>)
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2094:	4b05      	ldr	r3, [pc, #20]	; (20ac <_sbrk+0x34>)
    2096:	681a      	ldr	r2, [r3, #0]
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	18d2      	adds	r2, r2, r3
    209c:	4b03      	ldr	r3, [pc, #12]	; (20ac <_sbrk+0x34>)
    209e:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
    20a0:	68fb      	ldr	r3, [r7, #12]
}
    20a2:	0018      	movs	r0, r3
    20a4:	46bd      	mov	sp, r7
    20a6:	b004      	add	sp, #16
    20a8:	bd80      	pop	{r7, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	200000ac 	.word	0x200000ac
    20b0:	200020e8 	.word	0x200020e8

000020b4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    20b4:	b590      	push	{r4, r7, lr}
    20b6:	b083      	sub	sp, #12
    20b8:	af00      	add	r7, sp, #0
    20ba:	6039      	str	r1, [r7, #0]
    20bc:	0011      	movs	r1, r2
    20be:	1dbb      	adds	r3, r7, #6
    20c0:	1c02      	adds	r2, r0, #0
    20c2:	801a      	strh	r2, [r3, #0]
    20c4:	1d7b      	adds	r3, r7, #5
    20c6:	1c0a      	adds	r2, r1, #0
    20c8:	701a      	strb	r2, [r3, #0]
	switch (power) {
    20ca:	1d7b      	adds	r3, r7, #5
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	3b04      	subs	r3, #4
    20d0:	2b04      	cmp	r3, #4
    20d2:	d859      	bhi.n	2188 <_get_cycles_for_us_internal+0xd4>
    20d4:	009a      	lsls	r2, r3, #2
    20d6:	4b34      	ldr	r3, [pc, #208]	; (21a8 <_get_cycles_for_us_internal+0xf4>)
    20d8:	18d3      	adds	r3, r2, r3
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    20de:	1dbb      	adds	r3, r7, #6
    20e0:	881c      	ldrh	r4, [r3, #0]
    20e2:	683a      	ldr	r2, [r7, #0]
    20e4:	4b31      	ldr	r3, [pc, #196]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    20e6:	4932      	ldr	r1, [pc, #200]	; (21b0 <_get_cycles_for_us_internal+0xfc>)
    20e8:	0010      	movs	r0, r2
    20ea:	4798      	blx	r3
    20ec:	0003      	movs	r3, r0
    20ee:	4363      	muls	r3, r4
    20f0:	1e5a      	subs	r2, r3, #1
    20f2:	4b2e      	ldr	r3, [pc, #184]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    20f4:	210a      	movs	r1, #10
    20f6:	0010      	movs	r0, r2
    20f8:	4798      	blx	r3
    20fa:	0003      	movs	r3, r0
    20fc:	3301      	adds	r3, #1
    20fe:	e04e      	b.n	219e <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2100:	1dbb      	adds	r3, r7, #6
    2102:	881c      	ldrh	r4, [r3, #0]
    2104:	683a      	ldr	r2, [r7, #0]
    2106:	4b29      	ldr	r3, [pc, #164]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    2108:	492a      	ldr	r1, [pc, #168]	; (21b4 <_get_cycles_for_us_internal+0x100>)
    210a:	0010      	movs	r0, r2
    210c:	4798      	blx	r3
    210e:	0003      	movs	r3, r0
    2110:	4363      	muls	r3, r4
    2112:	1e5a      	subs	r2, r3, #1
    2114:	4b25      	ldr	r3, [pc, #148]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    2116:	2164      	movs	r1, #100	; 0x64
    2118:	0010      	movs	r0, r2
    211a:	4798      	blx	r3
    211c:	0003      	movs	r3, r0
    211e:	3301      	adds	r3, #1
    2120:	e03d      	b.n	219e <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    2122:	1dbb      	adds	r3, r7, #6
    2124:	881c      	ldrh	r4, [r3, #0]
    2126:	6838      	ldr	r0, [r7, #0]
    2128:	4b20      	ldr	r3, [pc, #128]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    212a:	22fa      	movs	r2, #250	; 0xfa
    212c:	0091      	lsls	r1, r2, #2
    212e:	4798      	blx	r3
    2130:	0003      	movs	r3, r0
    2132:	4363      	muls	r3, r4
    2134:	1e58      	subs	r0, r3, #1
    2136:	4b1d      	ldr	r3, [pc, #116]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    2138:	22fa      	movs	r2, #250	; 0xfa
    213a:	0091      	lsls	r1, r2, #2
    213c:	4798      	blx	r3
    213e:	0003      	movs	r3, r0
    2140:	3301      	adds	r3, #1
    2142:	e02c      	b.n	219e <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    2144:	1dbb      	adds	r3, r7, #6
    2146:	881c      	ldrh	r4, [r3, #0]
    2148:	683a      	ldr	r2, [r7, #0]
    214a:	4b18      	ldr	r3, [pc, #96]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    214c:	2164      	movs	r1, #100	; 0x64
    214e:	0010      	movs	r0, r2
    2150:	4798      	blx	r3
    2152:	0003      	movs	r3, r0
    2154:	4363      	muls	r3, r4
    2156:	1e5a      	subs	r2, r3, #1
    2158:	4b14      	ldr	r3, [pc, #80]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    215a:	4916      	ldr	r1, [pc, #88]	; (21b4 <_get_cycles_for_us_internal+0x100>)
    215c:	0010      	movs	r0, r2
    215e:	4798      	blx	r3
    2160:	0003      	movs	r3, r0
    2162:	3301      	adds	r3, #1
    2164:	e01b      	b.n	219e <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    2166:	1dbb      	adds	r3, r7, #6
    2168:	881c      	ldrh	r4, [r3, #0]
    216a:	683a      	ldr	r2, [r7, #0]
    216c:	4b0f      	ldr	r3, [pc, #60]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    216e:	210a      	movs	r1, #10
    2170:	0010      	movs	r0, r2
    2172:	4798      	blx	r3
    2174:	0003      	movs	r3, r0
    2176:	4363      	muls	r3, r4
    2178:	1e5a      	subs	r2, r3, #1
    217a:	4b0c      	ldr	r3, [pc, #48]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    217c:	490c      	ldr	r1, [pc, #48]	; (21b0 <_get_cycles_for_us_internal+0xfc>)
    217e:	0010      	movs	r0, r2
    2180:	4798      	blx	r3
    2182:	0003      	movs	r3, r0
    2184:	3301      	adds	r3, #1
    2186:	e00a      	b.n	219e <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2188:	1dbb      	adds	r3, r7, #6
    218a:	881b      	ldrh	r3, [r3, #0]
    218c:	683a      	ldr	r2, [r7, #0]
    218e:	4353      	muls	r3, r2
    2190:	1e5a      	subs	r2, r3, #1
    2192:	4b06      	ldr	r3, [pc, #24]	; (21ac <_get_cycles_for_us_internal+0xf8>)
    2194:	4908      	ldr	r1, [pc, #32]	; (21b8 <_get_cycles_for_us_internal+0x104>)
    2196:	0010      	movs	r0, r2
    2198:	4798      	blx	r3
    219a:	0003      	movs	r3, r0
    219c:	3301      	adds	r3, #1
	}
}
    219e:	0018      	movs	r0, r3
    21a0:	46bd      	mov	sp, r7
    21a2:	b003      	add	sp, #12
    21a4:	bd90      	pop	{r4, r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00005fd8 	.word	0x00005fd8
    21ac:	000037b9 	.word	0x000037b9
    21b0:	000186a0 	.word	0x000186a0
    21b4:	00002710 	.word	0x00002710
    21b8:	000f4240 	.word	0x000f4240

000021bc <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    21bc:	b590      	push	{r4, r7, lr}
    21be:	b083      	sub	sp, #12
    21c0:	af00      	add	r7, sp, #0
    21c2:	6039      	str	r1, [r7, #0]
    21c4:	0011      	movs	r1, r2
    21c6:	1dbb      	adds	r3, r7, #6
    21c8:	1c02      	adds	r2, r0, #0
    21ca:	801a      	strh	r2, [r3, #0]
    21cc:	1d7b      	adds	r3, r7, #5
    21ce:	1c0a      	adds	r2, r1, #0
    21d0:	701a      	strb	r2, [r3, #0]
	switch (power) {
    21d2:	1d7b      	adds	r3, r7, #5
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	3b04      	subs	r3, #4
    21d8:	2b04      	cmp	r3, #4
    21da:	d84b      	bhi.n	2274 <_get_cycles_for_ms_internal+0xb8>
    21dc:	009a      	lsls	r2, r3, #2
    21de:	4b2d      	ldr	r3, [pc, #180]	; (2294 <_get_cycles_for_ms_internal+0xd8>)
    21e0:	18d3      	adds	r3, r2, r3
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    21e6:	1dbb      	adds	r3, r7, #6
    21e8:	881c      	ldrh	r4, [r3, #0]
    21ea:	683a      	ldr	r2, [r7, #0]
    21ec:	4b2a      	ldr	r3, [pc, #168]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    21ee:	492b      	ldr	r1, [pc, #172]	; (229c <_get_cycles_for_ms_internal+0xe0>)
    21f0:	0010      	movs	r0, r2
    21f2:	4798      	blx	r3
    21f4:	0003      	movs	r3, r0
    21f6:	4363      	muls	r3, r4
    21f8:	2264      	movs	r2, #100	; 0x64
    21fa:	4353      	muls	r3, r2
    21fc:	e045      	b.n	228a <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    21fe:	1dbb      	adds	r3, r7, #6
    2200:	881c      	ldrh	r4, [r3, #0]
    2202:	683a      	ldr	r2, [r7, #0]
    2204:	4b24      	ldr	r3, [pc, #144]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2206:	4926      	ldr	r1, [pc, #152]	; (22a0 <_get_cycles_for_ms_internal+0xe4>)
    2208:	0010      	movs	r0, r2
    220a:	4798      	blx	r3
    220c:	0003      	movs	r3, r0
    220e:	4363      	muls	r3, r4
    2210:	001a      	movs	r2, r3
    2212:	0013      	movs	r3, r2
    2214:	009b      	lsls	r3, r3, #2
    2216:	189b      	adds	r3, r3, r2
    2218:	005b      	lsls	r3, r3, #1
    221a:	e036      	b.n	228a <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    221c:	1dbb      	adds	r3, r7, #6
    221e:	881c      	ldrh	r4, [r3, #0]
    2220:	6838      	ldr	r0, [r7, #0]
    2222:	4b1d      	ldr	r3, [pc, #116]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2224:	22fa      	movs	r2, #250	; 0xfa
    2226:	0091      	lsls	r1, r2, #2
    2228:	4798      	blx	r3
    222a:	0003      	movs	r3, r0
    222c:	4363      	muls	r3, r4
    222e:	e02c      	b.n	228a <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    2230:	1dbb      	adds	r3, r7, #6
    2232:	881c      	ldrh	r4, [r3, #0]
    2234:	683a      	ldr	r2, [r7, #0]
    2236:	4b18      	ldr	r3, [pc, #96]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2238:	2164      	movs	r1, #100	; 0x64
    223a:	0010      	movs	r0, r2
    223c:	4798      	blx	r3
    223e:	0003      	movs	r3, r0
    2240:	4363      	muls	r3, r4
    2242:	1e5a      	subs	r2, r3, #1
    2244:	4b14      	ldr	r3, [pc, #80]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2246:	210a      	movs	r1, #10
    2248:	0010      	movs	r0, r2
    224a:	4798      	blx	r3
    224c:	0003      	movs	r3, r0
    224e:	3301      	adds	r3, #1
    2250:	e01b      	b.n	228a <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    2252:	1dbb      	adds	r3, r7, #6
    2254:	881c      	ldrh	r4, [r3, #0]
    2256:	683a      	ldr	r2, [r7, #0]
    2258:	4b0f      	ldr	r3, [pc, #60]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    225a:	210a      	movs	r1, #10
    225c:	0010      	movs	r0, r2
    225e:	4798      	blx	r3
    2260:	0003      	movs	r3, r0
    2262:	4363      	muls	r3, r4
    2264:	1e5a      	subs	r2, r3, #1
    2266:	4b0c      	ldr	r3, [pc, #48]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2268:	2164      	movs	r1, #100	; 0x64
    226a:	0010      	movs	r0, r2
    226c:	4798      	blx	r3
    226e:	0003      	movs	r3, r0
    2270:	3301      	adds	r3, #1
    2272:	e00a      	b.n	228a <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2274:	1dbb      	adds	r3, r7, #6
    2276:	881b      	ldrh	r3, [r3, #0]
    2278:	683a      	ldr	r2, [r7, #0]
    227a:	4353      	muls	r3, r2
    227c:	1e58      	subs	r0, r3, #1
    227e:	4b06      	ldr	r3, [pc, #24]	; (2298 <_get_cycles_for_ms_internal+0xdc>)
    2280:	22fa      	movs	r2, #250	; 0xfa
    2282:	0091      	lsls	r1, r2, #2
    2284:	4798      	blx	r3
    2286:	0003      	movs	r3, r0
    2288:	3301      	adds	r3, #1
	}
}
    228a:	0018      	movs	r0, r3
    228c:	46bd      	mov	sp, r7
    228e:	b003      	add	sp, #12
    2290:	bd90      	pop	{r4, r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00005fec 	.word	0x00005fec
    2298:	000037b9 	.word	0x000037b9
    229c:	000186a0 	.word	0x000186a0
    22a0:	00002710 	.word	0x00002710

000022a4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    22a4:	b580      	push	{r7, lr}
    22a6:	b082      	sub	sp, #8
    22a8:	af00      	add	r7, sp, #0
    22aa:	0002      	movs	r2, r0
    22ac:	1dbb      	adds	r3, r7, #6
    22ae:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    22b0:	4905      	ldr	r1, [pc, #20]	; (22c8 <_get_cycles_for_ms+0x24>)
    22b2:	1dbb      	adds	r3, r7, #6
    22b4:	881b      	ldrh	r3, [r3, #0]
    22b6:	2207      	movs	r2, #7
    22b8:	0018      	movs	r0, r3
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <_get_cycles_for_ms+0x28>)
    22bc:	4798      	blx	r3
    22be:	0003      	movs	r3, r0
}
    22c0:	0018      	movs	r0, r3
    22c2:	46bd      	mov	sp, r7
    22c4:	b002      	add	sp, #8
    22c6:	bd80      	pop	{r7, pc}
    22c8:	007a1200 	.word	0x007a1200
    22cc:	000021bd 	.word	0x000021bd

000022d0 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b082      	sub	sp, #8
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
    22d8:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	685a      	ldr	r2, [r3, #4]
    22de:	683b      	ldr	r3, [r7, #0]
    22e0:	005b      	lsls	r3, r3, #1
    22e2:	211e      	movs	r1, #30
    22e4:	400b      	ands	r3, r1
    22e6:	431a      	orrs	r2, r3
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    22ec:	46c0      	nop			; (mov r8, r8)
    22ee:	46bd      	mov	sp, r7
    22f0:	b002      	add	sp, #8
    22f2:	bd80      	pop	{r7, pc}

000022f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <_init_chip+0x28>)
    22fa:	2100      	movs	r1, #0
    22fc:	0018      	movs	r0, r3
    22fe:	4b08      	ldr	r3, [pc, #32]	; (2320 <_init_chip+0x2c>)
    2300:	4798      	blx	r3

	_pm_init();
    2302:	4b08      	ldr	r3, [pc, #32]	; (2324 <_init_chip+0x30>)
    2304:	4798      	blx	r3
	_sysctrl_init_sources();
    2306:	4b08      	ldr	r3, [pc, #32]	; (2328 <_init_chip+0x34>)
    2308:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    230a:	4b08      	ldr	r3, [pc, #32]	; (232c <_init_chip+0x38>)
    230c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    230e:	20ff      	movs	r0, #255	; 0xff
    2310:	4b07      	ldr	r3, [pc, #28]	; (2330 <_init_chip+0x3c>)
    2312:	4798      	blx	r3
}
    2314:	46c0      	nop			; (mov r8, r8)
    2316:	46bd      	mov	sp, r7
    2318:	bd80      	pop	{r7, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	41004000 	.word	0x41004000
    2320:	000022d1 	.word	0x000022d1
    2324:	00002489 	.word	0x00002489
    2328:	00003331 	.word	0x00003331
    232c:	000033f1 	.word	0x000033f1
    2330:	00002391 	.word	0x00002391

00002334 <hri_gclk_wait_for_sync>:
{
    2334:	b580      	push	{r7, lr}
    2336:	b082      	sub	sp, #8
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    233c:	46c0      	nop			; (mov r8, r8)
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	785b      	ldrb	r3, [r3, #1]
    2342:	061b      	lsls	r3, r3, #24
    2344:	0fdb      	lsrs	r3, r3, #31
    2346:	b2db      	uxtb	r3, r3
    2348:	2b00      	cmp	r3, #0
    234a:	d1f8      	bne.n	233e <hri_gclk_wait_for_sync+0xa>
}
    234c:	46c0      	nop			; (mov r8, r8)
    234e:	46bd      	mov	sp, r7
    2350:	b002      	add	sp, #8
    2352:	bd80      	pop	{r7, pc}

00002354 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2354:	b580      	push	{r7, lr}
    2356:	b082      	sub	sp, #8
    2358:	af00      	add	r7, sp, #0
    235a:	6078      	str	r0, [r7, #4]
    235c:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	683a      	ldr	r2, [r7, #0]
    2362:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	0018      	movs	r0, r3
    2368:	4b02      	ldr	r3, [pc, #8]	; (2374 <hri_gclk_write_GENCTRL_reg+0x20>)
    236a:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    236c:	46c0      	nop			; (mov r8, r8)
    236e:	46bd      	mov	sp, r7
    2370:	b002      	add	sp, #8
    2372:	bd80      	pop	{r7, pc}
    2374:	00002335 	.word	0x00002335

00002378 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2378:	b580      	push	{r7, lr}
    237a:	b082      	sub	sp, #8
    237c:	af00      	add	r7, sp, #0
    237e:	6078      	str	r0, [r7, #4]
    2380:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	683a      	ldr	r2, [r7, #0]
    2386:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2388:	46c0      	nop			; (mov r8, r8)
    238a:	46bd      	mov	sp, r7
    238c:	b002      	add	sp, #8
    238e:	bd80      	pop	{r7, pc}

00002390 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	2201      	movs	r2, #1
    239c:	4013      	ands	r3, r2
    239e:	d00d      	beq.n	23bc <_gclk_init_generators_by_fref+0x2c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    23a0:	2380      	movs	r3, #128	; 0x80
    23a2:	005b      	lsls	r3, r3, #1
    23a4:	4a07      	ldr	r2, [pc, #28]	; (23c4 <_gclk_init_generators_by_fref+0x34>)
    23a6:	0019      	movs	r1, r3
    23a8:	0010      	movs	r0, r2
    23aa:	4b07      	ldr	r3, [pc, #28]	; (23c8 <_gclk_init_generators_by_fref+0x38>)
    23ac:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    23ae:	2383      	movs	r3, #131	; 0x83
    23b0:	025b      	lsls	r3, r3, #9
    23b2:	4a04      	ldr	r2, [pc, #16]	; (23c4 <_gclk_init_generators_by_fref+0x34>)
    23b4:	0019      	movs	r1, r3
    23b6:	0010      	movs	r0, r2
    23b8:	4b04      	ldr	r3, [pc, #16]	; (23cc <_gclk_init_generators_by_fref+0x3c>)
    23ba:	4798      	blx	r3
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    23bc:	46c0      	nop			; (mov r8, r8)
    23be:	46bd      	mov	sp, r7
    23c0:	b002      	add	sp, #8
    23c2:	bd80      	pop	{r7, pc}
    23c4:	40000c00 	.word	0x40000c00
    23c8:	00002379 	.word	0x00002379
    23cc:	00002355 	.word	0x00002355

000023d0 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b082      	sub	sp, #8
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
    23d8:	000a      	movs	r2, r1
    23da:	1cfb      	adds	r3, r7, #3
    23dc:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	7a1b      	ldrb	r3, [r3, #8]
    23e2:	b2da      	uxtb	r2, r3
    23e4:	1cfb      	adds	r3, r7, #3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2107      	movs	r1, #7
    23ea:	400b      	ands	r3, r1
    23ec:	b2db      	uxtb	r3, r3
    23ee:	4313      	orrs	r3, r2
    23f0:	b2da      	uxtb	r2, r3
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	46bd      	mov	sp, r7
    23fa:	b002      	add	sp, #8
    23fc:	bd80      	pop	{r7, pc}

000023fe <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    23fe:	b580      	push	{r7, lr}
    2400:	b082      	sub	sp, #8
    2402:	af00      	add	r7, sp, #0
    2404:	6078      	str	r0, [r7, #4]
    2406:	000a      	movs	r2, r1
    2408:	1cfb      	adds	r3, r7, #3
    240a:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	7a5b      	ldrb	r3, [r3, #9]
    2410:	b2da      	uxtb	r2, r3
    2412:	1cfb      	adds	r3, r7, #3
    2414:	781b      	ldrb	r3, [r3, #0]
    2416:	2107      	movs	r1, #7
    2418:	400b      	ands	r3, r1
    241a:	b2db      	uxtb	r3, r3
    241c:	4313      	orrs	r3, r2
    241e:	b2da      	uxtb	r2, r3
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2424:	46c0      	nop			; (mov r8, r8)
    2426:	46bd      	mov	sp, r7
    2428:	b002      	add	sp, #8
    242a:	bd80      	pop	{r7, pc}

0000242c <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    242c:	b580      	push	{r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
    2434:	000a      	movs	r2, r1
    2436:	1cfb      	adds	r3, r7, #3
    2438:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	7a9b      	ldrb	r3, [r3, #10]
    243e:	b2da      	uxtb	r2, r3
    2440:	1cfb      	adds	r3, r7, #3
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	2107      	movs	r1, #7
    2446:	400b      	ands	r3, r1
    2448:	b2db      	uxtb	r3, r3
    244a:	4313      	orrs	r3, r2
    244c:	b2da      	uxtb	r2, r3
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	46bd      	mov	sp, r7
    2456:	b002      	add	sp, #8
    2458:	bd80      	pop	{r7, pc}

0000245a <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    245a:	b580      	push	{r7, lr}
    245c:	b082      	sub	sp, #8
    245e:	af00      	add	r7, sp, #0
    2460:	6078      	str	r0, [r7, #4]
    2462:	000a      	movs	r2, r1
    2464:	1cfb      	adds	r3, r7, #3
    2466:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	7adb      	ldrb	r3, [r3, #11]
    246c:	b2da      	uxtb	r2, r3
    246e:	1cfb      	adds	r3, r7, #3
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2107      	movs	r1, #7
    2474:	400b      	ands	r3, r1
    2476:	b2db      	uxtb	r3, r3
    2478:	4313      	orrs	r3, r2
    247a:	b2da      	uxtb	r2, r3
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    2480:	46c0      	nop			; (mov r8, r8)
    2482:	46bd      	mov	sp, r7
    2484:	b002      	add	sp, #8
    2486:	bd80      	pop	{r7, pc}

00002488 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2488:	b580      	push	{r7, lr}
    248a:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <_pm_init+0x34>)
    248e:	2100      	movs	r1, #0
    2490:	0018      	movs	r0, r3
    2492:	4b0b      	ldr	r3, [pc, #44]	; (24c0 <_pm_init+0x38>)
    2494:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    2496:	4b09      	ldr	r3, [pc, #36]	; (24bc <_pm_init+0x34>)
    2498:	2100      	movs	r1, #0
    249a:	0018      	movs	r0, r3
    249c:	4b09      	ldr	r3, [pc, #36]	; (24c4 <_pm_init+0x3c>)
    249e:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    24a0:	4b06      	ldr	r3, [pc, #24]	; (24bc <_pm_init+0x34>)
    24a2:	2100      	movs	r1, #0
    24a4:	0018      	movs	r0, r3
    24a6:	4b08      	ldr	r3, [pc, #32]	; (24c8 <_pm_init+0x40>)
    24a8:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    24aa:	4b04      	ldr	r3, [pc, #16]	; (24bc <_pm_init+0x34>)
    24ac:	2100      	movs	r1, #0
    24ae:	0018      	movs	r0, r3
    24b0:	4b06      	ldr	r3, [pc, #24]	; (24cc <_pm_init+0x44>)
    24b2:	4798      	blx	r3
}
    24b4:	46c0      	nop			; (mov r8, r8)
    24b6:	46bd      	mov	sp, r7
    24b8:	bd80      	pop	{r7, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	40000400 	.word	0x40000400
    24c0:	000023d1 	.word	0x000023d1
    24c4:	000023ff 	.word	0x000023ff
    24c8:	0000242d 	.word	0x0000242d
    24cc:	0000245b 	.word	0x0000245b

000024d0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_dbgctrl_reg_t;
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	b082      	sub	sp, #8
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    24d8:	46c0      	nop			; (mov r8, r8)
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	8a1b      	ldrh	r3, [r3, #16]
    24de:	041b      	lsls	r3, r3, #16
    24e0:	0fdb      	lsrs	r3, r3, #31
    24e2:	b2db      	uxtb	r3, r3
    24e4:	2b00      	cmp	r3, #0
    24e6:	d1f8      	bne.n	24da <hri_sercomi2cm_wait_for_sync+0xa>
		;
}
    24e8:	46c0      	nop			; (mov r8, r8)
    24ea:	46bd      	mov	sp, r7
    24ec:	b002      	add	sp, #8
    24ee:	bd80      	pop	{r7, pc}

000024f0 <hri_sercomusart_wait_for_sync>:
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	b082      	sub	sp, #8
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    24f8:	46c0      	nop			; (mov r8, r8)
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	8a1b      	ldrh	r3, [r3, #16]
    24fe:	041b      	lsls	r3, r3, #16
    2500:	0fdb      	lsrs	r3, r3, #31
    2502:	b2db      	uxtb	r3, r3
    2504:	2b00      	cmp	r3, #0
    2506:	d1f8      	bne.n	24fa <hri_sercomusart_wait_for_sync+0xa>
		;
}
    2508:	46c0      	nop			; (mov r8, r8)
    250a:	46bd      	mov	sp, r7
    250c:	b002      	add	sp, #8
    250e:	bd80      	pop	{r7, pc}

00002510 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    2510:	b580      	push	{r7, lr}
    2512:	b082      	sub	sp, #8
    2514:	af00      	add	r7, sp, #0
    2516:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	2201      	movs	r2, #1
    251c:	739a      	strb	r2, [r3, #14]
}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	46bd      	mov	sp, r7
    2522:	b002      	add	sp, #8
    2524:	bd80      	pop	{r7, pc}

00002526 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    2526:	b580      	push	{r7, lr}
    2528:	b082      	sub	sp, #8
    252a:	af00      	add	r7, sp, #0
    252c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	2202      	movs	r2, #2
    2532:	739a      	strb	r2, [r3, #14]
}
    2534:	46c0      	nop			; (mov r8, r8)
    2536:	46bd      	mov	sp, r7
    2538:	b002      	add	sp, #8
    253a:	bd80      	pop	{r7, pc}

0000253c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    253c:	b580      	push	{r7, lr}
    253e:	b082      	sub	sp, #8
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	7b9b      	ldrb	r3, [r3, #14]
    2548:	b2db      	uxtb	r3, r3
}
    254a:	0018      	movs	r0, r3
    254c:	46bd      	mov	sp, r7
    254e:	b002      	add	sp, #8
    2550:	bd80      	pop	{r7, pc}

00002552 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2552:	b580      	push	{r7, lr}
    2554:	b082      	sub	sp, #8
    2556:	af00      	add	r7, sp, #0
    2558:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    255a:	687b      	ldr	r3, [r7, #4]
    255c:	7b9b      	ldrb	r3, [r3, #14]
    255e:	b2db      	uxtb	r3, r3
    2560:	001a      	movs	r2, r3
    2562:	2301      	movs	r3, #1
    2564:	4013      	ands	r3, r2
    2566:	1e5a      	subs	r2, r3, #1
    2568:	4193      	sbcs	r3, r2
    256a:	b2db      	uxtb	r3, r3
}
    256c:	0018      	movs	r0, r3
    256e:	46bd      	mov	sp, r7
    2570:	b002      	add	sp, #8
    2572:	bd80      	pop	{r7, pc}

00002574 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2574:	b580      	push	{r7, lr}
    2576:	b082      	sub	sp, #8
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	7b9b      	ldrb	r3, [r3, #14]
    2580:	b2db      	uxtb	r3, r3
    2582:	085b      	lsrs	r3, r3, #1
    2584:	2201      	movs	r2, #1
    2586:	4013      	ands	r3, r2
    2588:	1e5a      	subs	r2, r3, #1
    258a:	4193      	sbcs	r3, r2
    258c:	b2db      	uxtb	r3, r3
}
    258e:	0018      	movs	r0, r3
    2590:	46bd      	mov	sp, r7
    2592:	b002      	add	sp, #8
    2594:	bd80      	pop	{r7, pc}

00002596 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2596:	b580      	push	{r7, lr}
    2598:	b082      	sub	sp, #8
    259a:	af00      	add	r7, sp, #0
    259c:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    259e:	687b      	ldr	r3, [r7, #4]
    25a0:	7b9b      	ldrb	r3, [r3, #14]
    25a2:	b2db      	uxtb	r3, r3
    25a4:	089b      	lsrs	r3, r3, #2
    25a6:	2201      	movs	r2, #1
    25a8:	4013      	ands	r3, r2
    25aa:	1e5a      	subs	r2, r3, #1
    25ac:	4193      	sbcs	r3, r2
    25ae:	b2db      	uxtb	r3, r3
}
    25b0:	0018      	movs	r0, r3
    25b2:	46bd      	mov	sp, r7
    25b4:	b002      	add	sp, #8
    25b6:	bd80      	pop	{r7, pc}

000025b8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	2202      	movs	r2, #2
    25c6:	431a      	orrs	r2, r3
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw);
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	0018      	movs	r0, r3
    25d0:	4b02      	ldr	r3, [pc, #8]	; (25dc <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    25d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    25d4:	46c0      	nop			; (mov r8, r8)
    25d6:	46bd      	mov	sp, r7
    25d8:	b002      	add	sp, #8
    25da:	bd80      	pop	{r7, pc}
    25dc:	000024d1 	.word	0x000024d1

000025e0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b084      	sub	sp, #16
    25e4:	af00      	add	r7, sp, #0
    25e6:	6078      	str	r0, [r7, #4]
    25e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw);
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	0018      	movs	r0, r3
    25ee:	4b07      	ldr	r3, [pc, #28]	; (260c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    25f0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	683a      	ldr	r2, [r7, #0]
    25fc:	4013      	ands	r3, r2
    25fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    2600:	68fb      	ldr	r3, [r7, #12]
}
    2602:	0018      	movs	r0, r3
    2604:	46bd      	mov	sp, r7
    2606:	b004      	add	sp, #16
    2608:	bd80      	pop	{r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	000024d1 	.word	0x000024d1

00002610 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    2610:	b580      	push	{r7, lr}
    2612:	b082      	sub	sp, #8
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	683a      	ldr	r2, [r7, #0]
    261e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw);
    2620:	687b      	ldr	r3, [r7, #4]
    2622:	0018      	movs	r0, r3
    2624:	4b02      	ldr	r3, [pc, #8]	; (2630 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    2626:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2628:	46c0      	nop			; (mov r8, r8)
    262a:	46bd      	mov	sp, r7
    262c:	b002      	add	sp, #8
    262e:	bd80      	pop	{r7, pc}
    2630:	000024d1 	.word	0x000024d1

00002634 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2634:	b580      	push	{r7, lr}
    2636:	b082      	sub	sp, #8
    2638:	af00      	add	r7, sp, #0
    263a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	681b      	ldr	r3, [r3, #0]
    2640:	2202      	movs	r2, #2
    2642:	431a      	orrs	r2, r3
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw);
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	0018      	movs	r0, r3
    264c:	4b02      	ldr	r3, [pc, #8]	; (2658 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    264e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2650:	46c0      	nop			; (mov r8, r8)
    2652:	46bd      	mov	sp, r7
    2654:	b002      	add	sp, #8
    2656:	bd80      	pop	{r7, pc}
    2658:	000024f1 	.word	0x000024f1

0000265c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    265c:	b580      	push	{r7, lr}
    265e:	b084      	sub	sp, #16
    2660:	af00      	add	r7, sp, #0
    2662:	6078      	str	r0, [r7, #4]
    2664:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	0018      	movs	r0, r3
    266a:	4b07      	ldr	r3, [pc, #28]	; (2688 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    266c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2674:	68fb      	ldr	r3, [r7, #12]
    2676:	683a      	ldr	r2, [r7, #0]
    2678:	4013      	ands	r3, r2
    267a:	60fb      	str	r3, [r7, #12]
	return tmp;
    267c:	68fb      	ldr	r3, [r7, #12]
}
    267e:	0018      	movs	r0, r3
    2680:	46bd      	mov	sp, r7
    2682:	b004      	add	sp, #16
    2684:	bd80      	pop	{r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	000024f1 	.word	0x000024f1

0000268c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
    2694:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	683a      	ldr	r2, [r7, #0]
    269a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw);
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	0018      	movs	r0, r3
    26a0:	4b02      	ldr	r3, [pc, #8]	; (26ac <hri_sercomusart_write_CTRLA_reg+0x20>)
    26a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26a4:	46c0      	nop			; (mov r8, r8)
    26a6:	46bd      	mov	sp, r7
    26a8:	b002      	add	sp, #8
    26aa:	bd80      	pop	{r7, pc}
    26ac:	000024f1 	.word	0x000024f1

000026b0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    26b0:	b580      	push	{r7, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	685b      	ldr	r3, [r3, #4]
    26bc:	2280      	movs	r2, #128	; 0x80
    26be:	0052      	lsls	r2, r2, #1
    26c0:	431a      	orrs	r2, r3
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	0018      	movs	r0, r3
    26ca:	4b03      	ldr	r3, [pc, #12]	; (26d8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    26cc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	46bd      	mov	sp, r7
    26d2:	b002      	add	sp, #8
    26d4:	bd80      	pop	{r7, pc}
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	000024d1 	.word	0x000024d1

000026dc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	685b      	ldr	r3, [r3, #4]
    26e8:	4a05      	ldr	r2, [pc, #20]	; (2700 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    26ea:	401a      	ands	r2, r3
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	0018      	movs	r0, r3
    26f4:	4b03      	ldr	r3, [pc, #12]	; (2704 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    26f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	46bd      	mov	sp, r7
    26fc:	b002      	add	sp, #8
    26fe:	bd80      	pop	{r7, pc}
    2700:	fffffeff 	.word	0xfffffeff
    2704:	000024d1 	.word	0x000024d1

00002708 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    2708:	b580      	push	{r7, lr}
    270a:	b082      	sub	sp, #8
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	685b      	ldr	r3, [r3, #4]
    2714:	2280      	movs	r2, #128	; 0x80
    2716:	02d2      	lsls	r2, r2, #11
    2718:	431a      	orrs	r2, r3
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	0018      	movs	r0, r3
    2722:	4b03      	ldr	r3, [pc, #12]	; (2730 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    2724:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	46bd      	mov	sp, r7
    272a:	b002      	add	sp, #8
    272c:	bd80      	pop	{r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	000024d1 	.word	0x000024d1

00002734 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    2734:	b580      	push	{r7, lr}
    2736:	b082      	sub	sp, #8
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	685b      	ldr	r3, [r3, #4]
    2740:	4a05      	ldr	r2, [pc, #20]	; (2758 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    2742:	401a      	ands	r2, r3
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	0018      	movs	r0, r3
    274c:	4b03      	ldr	r3, [pc, #12]	; (275c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    274e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2750:	46c0      	nop			; (mov r8, r8)
    2752:	46bd      	mov	sp, r7
    2754:	b002      	add	sp, #8
    2756:	bd80      	pop	{r7, pc}
    2758:	fffbffff 	.word	0xfffbffff
    275c:	000024d1 	.word	0x000024d1

00002760 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    2760:	b580      	push	{r7, lr}
    2762:	b082      	sub	sp, #8
    2764:	af00      	add	r7, sp, #0
    2766:	6078      	str	r0, [r7, #4]
    2768:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	685a      	ldr	r2, [r3, #4]
    276e:	683b      	ldr	r3, [r7, #0]
    2770:	0419      	lsls	r1, r3, #16
    2772:	23c0      	movs	r3, #192	; 0xc0
    2774:	029b      	lsls	r3, r3, #10
    2776:	400b      	ands	r3, r1
    2778:	431a      	orrs	r2, r3
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	0018      	movs	r0, r3
    2782:	4b03      	ldr	r3, [pc, #12]	; (2790 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    2784:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	46bd      	mov	sp, r7
    278a:	b002      	add	sp, #8
    278c:	bd80      	pop	{r7, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	000024d1 	.word	0x000024d1

00002794 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    2794:	b580      	push	{r7, lr}
    2796:	b082      	sub	sp, #8
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
    279c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	683a      	ldr	r2, [r7, #0]
    27a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	0018      	movs	r0, r3
    27a8:	4b02      	ldr	r3, [pc, #8]	; (27b4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    27aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    27ac:	46c0      	nop			; (mov r8, r8)
    27ae:	46bd      	mov	sp, r7
    27b0:	b002      	add	sp, #8
    27b2:	bd80      	pop	{r7, pc}
    27b4:	000024d1 	.word	0x000024d1

000027b8 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
    27c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	683a      	ldr	r2, [r7, #0]
    27c6:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw);
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	0018      	movs	r0, r3
    27cc:	4b02      	ldr	r3, [pc, #8]	; (27d8 <hri_sercomusart_write_CTRLB_reg+0x20>)
    27ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    27d0:	46c0      	nop			; (mov r8, r8)
    27d2:	46bd      	mov	sp, r7
    27d4:	b002      	add	sp, #8
    27d6:	bd80      	pop	{r7, pc}
    27d8:	000024f1 	.word	0x000024f1

000027dc <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b082      	sub	sp, #8
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
    27e4:	000a      	movs	r2, r1
    27e6:	1cfb      	adds	r3, r7, #3
    27e8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	1cfa      	adds	r2, r7, #3
    27ee:	7812      	ldrb	r2, [r2, #0]
    27f0:	721a      	strb	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	46bd      	mov	sp, r7
    27f6:	b002      	add	sp, #8
    27f8:	bd80      	pop	{r7, pc}

000027fa <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    27fa:	b580      	push	{r7, lr}
    27fc:	b082      	sub	sp, #8
    27fe:	af00      	add	r7, sp, #0
    2800:	6078      	str	r0, [r7, #4]
    2802:	000a      	movs	r2, r1
    2804:	1cbb      	adds	r3, r7, #2
    2806:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	1cba      	adds	r2, r7, #2
    280c:	8812      	ldrh	r2, [r2, #0]
    280e:	815a      	strh	r2, [r3, #10]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2810:	46c0      	nop			; (mov r8, r8)
    2812:	46bd      	mov	sp, r7
    2814:	b002      	add	sp, #8
    2816:	bd80      	pop	{r7, pc}

00002818 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
    2820:	000a      	movs	r2, r1
    2822:	1cbb      	adds	r3, r7, #2
    2824:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	1cba      	adds	r2, r7, #2
    282a:	8812      	ldrh	r2, [r2, #0]
    282c:	815a      	strh	r2, [r3, #10]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	46bd      	mov	sp, r7
    2832:	b002      	add	sp, #8
    2834:	bd80      	pop	{r7, pc}
	...

00002838 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    2838:	b580      	push	{r7, lr}
    283a:	b082      	sub	sp, #8
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	000a      	movs	r2, r1
    2842:	1cfb      	adds	r3, r7, #3
    2844:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	1cfa      	adds	r2, r7, #3
    284a:	7812      	ldrb	r2, [r2, #0]
    284c:	751a      	strb	r2, [r3, #20]
	hri_sercomi2cm_wait_for_sync(hw);
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	0018      	movs	r0, r3
    2852:	4b03      	ldr	r3, [pc, #12]	; (2860 <hri_sercomi2cm_write_ADDR_reg+0x28>)
    2854:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46bd      	mov	sp, r7
    285a:	b002      	add	sp, #8
    285c:	bd80      	pop	{r7, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	000024d1 	.word	0x000024d1

00002864 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    2864:	b580      	push	{r7, lr}
    2866:	b082      	sub	sp, #8
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
    286c:	000a      	movs	r2, r1
    286e:	1cfb      	adds	r3, r7, #3
    2870:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	1cfa      	adds	r2, r7, #3
    2876:	7812      	ldrb	r2, [r2, #0]
    2878:	761a      	strb	r2, [r3, #24]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	46bd      	mov	sp, r7
    287e:	b002      	add	sp, #8
    2880:	bd80      	pop	{r7, pc}

00002882 <hri_sercomi2cm_read_DATA_reg>:
	((Sercom *)hw)->I2CM.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    2882:	b580      	push	{r7, lr}
    2884:	b082      	sub	sp, #8
    2886:	af00      	add	r7, sp, #0
    2888:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	7e1b      	ldrb	r3, [r3, #24]
    288e:	b2db      	uxtb	r3, r3
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b002      	add	sp, #8
    2896:	bd80      	pop	{r7, pc}

00002898 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    2898:	b580      	push	{r7, lr}
    289a:	b082      	sub	sp, #8
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	000a      	movs	r2, r1
    28a2:	1cbb      	adds	r3, r7, #2
    28a4:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	1cba      	adds	r2, r7, #2
    28aa:	8812      	ldrh	r2, [r2, #0]
    28ac:	831a      	strh	r2, [r3, #24]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	46bd      	mov	sp, r7
    28b2:	b002      	add	sp, #8
    28b4:	bd80      	pop	{r7, pc}

000028b6 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    28b6:	b580      	push	{r7, lr}
    28b8:	b082      	sub	sp, #8
    28ba:	af00      	add	r7, sp, #0
    28bc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	8b1b      	ldrh	r3, [r3, #24]
    28c2:	b29b      	uxth	r3, r3
}
    28c4:	0018      	movs	r0, r3
    28c6:	46bd      	mov	sp, r7
    28c8:	b002      	add	sp, #8
    28ca:	bd80      	pop	{r7, pc}

000028cc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	0018      	movs	r0, r3
    28d8:	4b06      	ldr	r3, [pc, #24]	; (28f4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    28da:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	8a1b      	ldrh	r3, [r3, #16]
    28e0:	b29b      	uxth	r3, r3
    28e2:	091b      	lsrs	r3, r3, #4
    28e4:	b29b      	uxth	r3, r3
    28e6:	2203      	movs	r2, #3
    28e8:	4013      	ands	r3, r2
    28ea:	b29b      	uxth	r3, r3
}
    28ec:	0018      	movs	r0, r3
    28ee:	46bd      	mov	sp, r7
    28f0:	b002      	add	sp, #8
    28f2:	bd80      	pop	{r7, pc}
    28f4:	000024d1 	.word	0x000024d1

000028f8 <hri_sercomi2cm_read_STATUS_reg>:
	hri_sercomi2cm_wait_for_sync(hw);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b082      	sub	sp, #8
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw);
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	0018      	movs	r0, r3
    2904:	4b04      	ldr	r3, [pc, #16]	; (2918 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    2906:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	8a1b      	ldrh	r3, [r3, #16]
    290c:	b29b      	uxth	r3, r3
}
    290e:	0018      	movs	r0, r3
    2910:	46bd      	mov	sp, r7
    2912:	b002      	add	sp, #8
    2914:	bd80      	pop	{r7, pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	000024d1 	.word	0x000024d1

0000291c <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
    2924:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	1e5a      	subs	r2, r3, #1
    292a:	4193      	sbcs	r3, r2
    292c:	b2db      	uxtb	r3, r3
    292e:	4908      	ldr	r1, [pc, #32]	; (2950 <_usart_sync_init+0x34>)
    2930:	22a1      	movs	r2, #161	; 0xa1
    2932:	0018      	movs	r0, r3
    2934:	4b07      	ldr	r3, [pc, #28]	; (2954 <_usart_sync_init+0x38>)
    2936:	4798      	blx	r3

	device->hw = hw;
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	683a      	ldr	r2, [r7, #0]
    293c:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    293e:	683b      	ldr	r3, [r7, #0]
    2940:	0018      	movs	r0, r3
    2942:	4b05      	ldr	r3, [pc, #20]	; (2958 <_usart_sync_init+0x3c>)
    2944:	4798      	blx	r3
    2946:	0003      	movs	r3, r0
}
    2948:	0018      	movs	r0, r3
    294a:	46bd      	mov	sp, r7
    294c:	b002      	add	sp, #8
    294e:	bd80      	pop	{r7, pc}
    2950:	00006000 	.word	0x00006000
    2954:	0000204d 	.word	0x0000204d
    2958:	00002ad1 	.word	0x00002ad1

0000295c <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    295c:	b580      	push	{r7, lr}
    295e:	b082      	sub	sp, #8
    2960:	af00      	add	r7, sp, #0
    2962:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	0018      	movs	r0, r3
    296a:	4b03      	ldr	r3, [pc, #12]	; (2978 <_usart_sync_enable+0x1c>)
    296c:	4798      	blx	r3
}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	46bd      	mov	sp, r7
    2972:	b002      	add	sp, #8
    2974:	bd80      	pop	{r7, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	00002635 	.word	0x00002635

0000297c <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    297c:	b580      	push	{r7, lr}
    297e:	b082      	sub	sp, #8
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    2984:	000a      	movs	r2, r1
    2986:	1cfb      	adds	r3, r7, #3
    2988:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	681a      	ldr	r2, [r3, #0]
    298e:	1cfb      	adds	r3, r7, #3
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	b29b      	uxth	r3, r3
    2994:	0019      	movs	r1, r3
    2996:	0010      	movs	r0, r2
    2998:	4b02      	ldr	r3, [pc, #8]	; (29a4 <_usart_sync_write_byte+0x28>)
    299a:	4798      	blx	r3
}
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46bd      	mov	sp, r7
    29a0:	b002      	add	sp, #8
    29a2:	bd80      	pop	{r7, pc}
    29a4:	00002899 	.word	0x00002899

000029a8 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b082      	sub	sp, #8
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	0018      	movs	r0, r3
    29b6:	4b04      	ldr	r3, [pc, #16]	; (29c8 <_usart_sync_read_byte+0x20>)
    29b8:	4798      	blx	r3
    29ba:	0003      	movs	r3, r0
    29bc:	b2db      	uxtb	r3, r3
}
    29be:	0018      	movs	r0, r3
    29c0:	46bd      	mov	sp, r7
    29c2:	b002      	add	sp, #8
    29c4:	bd80      	pop	{r7, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	000028b7 	.word	0x000028b7

000029cc <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    29cc:	b580      	push	{r7, lr}
    29ce:	b082      	sub	sp, #8
    29d0:	af00      	add	r7, sp, #0
    29d2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	0018      	movs	r0, r3
    29da:	4b03      	ldr	r3, [pc, #12]	; (29e8 <_usart_sync_is_ready_to_send+0x1c>)
    29dc:	4798      	blx	r3
    29de:	0003      	movs	r3, r0
}
    29e0:	0018      	movs	r0, r3
    29e2:	46bd      	mov	sp, r7
    29e4:	b002      	add	sp, #8
    29e6:	bd80      	pop	{r7, pc}
    29e8:	00002553 	.word	0x00002553

000029ec <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    29ec:	b580      	push	{r7, lr}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	0018      	movs	r0, r3
    29fa:	4b03      	ldr	r3, [pc, #12]	; (2a08 <_usart_sync_is_transmit_done+0x1c>)
    29fc:	4798      	blx	r3
    29fe:	0003      	movs	r3, r0
}
    2a00:	0018      	movs	r0, r3
    2a02:	46bd      	mov	sp, r7
    2a04:	b002      	add	sp, #8
    2a06:	bd80      	pop	{r7, pc}
    2a08:	00002575 	.word	0x00002575

00002a0c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	0018      	movs	r0, r3
    2a1a:	4b03      	ldr	r3, [pc, #12]	; (2a28 <_usart_sync_is_byte_received+0x1c>)
    2a1c:	4798      	blx	r3
    2a1e:	0003      	movs	r3, r0
}
    2a20:	0018      	movs	r0, r3
    2a22:	46bd      	mov	sp, r7
    2a24:	b002      	add	sp, #8
    2a26:	bd80      	pop	{r7, pc}
    2a28:	00002597 	.word	0x00002597

00002a2c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	b082      	sub	sp, #8
    2a30:	af00      	add	r7, sp, #0
    2a32:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	4a04      	ldr	r2, [pc, #16]	; (2a48 <_sercom_get_hardware_index+0x1c>)
    2a38:	4694      	mov	ip, r2
    2a3a:	4463      	add	r3, ip
    2a3c:	0a9b      	lsrs	r3, r3, #10
    2a3e:	b2db      	uxtb	r3, r3
}
    2a40:	0018      	movs	r0, r3
    2a42:	46bd      	mov	sp, r7
    2a44:	b002      	add	sp, #8
    2a46:	bd80      	pop	{r7, pc}
    2a48:	bdfff800 	.word	0xbdfff800

00002a4c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2a4c:	b590      	push	{r4, r7, lr}
    2a4e:	b085      	sub	sp, #20
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2a54:	230e      	movs	r3, #14
    2a56:	18fc      	adds	r4, r7, r3
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	0018      	movs	r0, r3
    2a5c:	4b17      	ldr	r3, [pc, #92]	; (2abc <_get_sercom_index+0x70>)
    2a5e:	4798      	blx	r3
    2a60:	0003      	movs	r3, r0
    2a62:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2a64:	230f      	movs	r3, #15
    2a66:	18fb      	adds	r3, r7, r3
    2a68:	2200      	movs	r2, #0
    2a6a:	701a      	strb	r2, [r3, #0]
    2a6c:	e015      	b.n	2a9a <_get_sercom_index+0x4e>
		if (_usarts[i].number == sercom_offset) {
    2a6e:	230f      	movs	r3, #15
    2a70:	18fb      	adds	r3, r7, r3
    2a72:	781a      	ldrb	r2, [r3, #0]
    2a74:	4b12      	ldr	r3, [pc, #72]	; (2ac0 <_get_sercom_index+0x74>)
    2a76:	0112      	lsls	r2, r2, #4
    2a78:	5cd3      	ldrb	r3, [r2, r3]
    2a7a:	220e      	movs	r2, #14
    2a7c:	18ba      	adds	r2, r7, r2
    2a7e:	7812      	ldrb	r2, [r2, #0]
    2a80:	429a      	cmp	r2, r3
    2a82:	d103      	bne.n	2a8c <_get_sercom_index+0x40>
			return i;
    2a84:	230f      	movs	r3, #15
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	e012      	b.n	2ab2 <_get_sercom_index+0x66>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2a8c:	230f      	movs	r3, #15
    2a8e:	18fb      	adds	r3, r7, r3
    2a90:	781a      	ldrb	r2, [r3, #0]
    2a92:	230f      	movs	r3, #15
    2a94:	18fb      	adds	r3, r7, r3
    2a96:	3201      	adds	r2, #1
    2a98:	701a      	strb	r2, [r3, #0]
    2a9a:	230f      	movs	r3, #15
    2a9c:	18fb      	adds	r3, r7, r3
    2a9e:	781b      	ldrb	r3, [r3, #0]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d0e4      	beq.n	2a6e <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    2aa4:	4a07      	ldr	r2, [pc, #28]	; (2ac4 <_get_sercom_index+0x78>)
    2aa6:	4b08      	ldr	r3, [pc, #32]	; (2ac8 <_get_sercom_index+0x7c>)
    2aa8:	0019      	movs	r1, r3
    2aaa:	2000      	movs	r0, #0
    2aac:	4b07      	ldr	r3, [pc, #28]	; (2acc <_get_sercom_index+0x80>)
    2aae:	4798      	blx	r3
	return 0;
    2ab0:	2300      	movs	r3, #0
}
    2ab2:	0018      	movs	r0, r3
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b005      	add	sp, #20
    2ab8:	bd90      	pop	{r4, r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00002a2d 	.word	0x00002a2d
    2ac0:	20000000 	.word	0x20000000
    2ac4:	0000022a 	.word	0x0000022a
    2ac8:	00006000 	.word	0x00006000
    2acc:	0000204d 	.word	0x0000204d

00002ad0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2ad0:	b590      	push	{r4, r7, lr}
    2ad2:	b085      	sub	sp, #20
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2ad8:	230f      	movs	r3, #15
    2ada:	18fc      	adds	r4, r7, r3
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	0018      	movs	r0, r3
    2ae0:	4b2c      	ldr	r3, [pc, #176]	; (2b94 <_usart_init+0xc4>)
    2ae2:	4798      	blx	r3
    2ae4:	0003      	movs	r3, r0
    2ae6:	7023      	strb	r3, [r4, #0]

	hri_sercomusart_wait_for_sync(hw);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	0018      	movs	r0, r3
    2aec:	4b2a      	ldr	r3, [pc, #168]	; (2b98 <_usart_init+0xc8>)
    2aee:	4798      	blx	r3
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	2102      	movs	r1, #2
    2af4:	0018      	movs	r0, r3
    2af6:	4b29      	ldr	r3, [pc, #164]	; (2b9c <_usart_init+0xcc>)
    2af8:	4798      	blx	r3
    2afa:	1e03      	subs	r3, r0, #0
    2afc:	d008      	beq.n	2b10 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, 0);
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	2100      	movs	r1, #0
    2b02:	0018      	movs	r0, r3
    2b04:	4b26      	ldr	r3, [pc, #152]	; (2ba0 <_usart_init+0xd0>)
    2b06:	4798      	blx	r3
		hri_sercomusart_wait_for_sync(hw);
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	0018      	movs	r0, r3
    2b0c:	4b22      	ldr	r3, [pc, #136]	; (2b98 <_usart_init+0xc8>)
    2b0e:	4798      	blx	r3
	}
	hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST);
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	2101      	movs	r1, #1
    2b14:	0018      	movs	r0, r3
    2b16:	4b22      	ldr	r3, [pc, #136]	; (2ba0 <_usart_init+0xd0>)
    2b18:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw);
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b1e      	ldr	r3, [pc, #120]	; (2b98 <_usart_init+0xc8>)
    2b20:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2b22:	230f      	movs	r3, #15
    2b24:	18fb      	adds	r3, r7, r3
    2b26:	781b      	ldrb	r3, [r3, #0]
    2b28:	4a1e      	ldr	r2, [pc, #120]	; (2ba4 <_usart_init+0xd4>)
    2b2a:	011b      	lsls	r3, r3, #4
    2b2c:	18d3      	adds	r3, r2, r3
    2b2e:	3304      	adds	r3, #4
    2b30:	681a      	ldr	r2, [r3, #0]
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	0011      	movs	r1, r2
    2b36:	0018      	movs	r0, r3
    2b38:	4b19      	ldr	r3, [pc, #100]	; (2ba0 <_usart_init+0xd0>)
    2b3a:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2b3c:	230f      	movs	r3, #15
    2b3e:	18fb      	adds	r3, r7, r3
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	4a18      	ldr	r2, [pc, #96]	; (2ba4 <_usart_init+0xd4>)
    2b44:	011b      	lsls	r3, r3, #4
    2b46:	18d3      	adds	r3, r2, r3
    2b48:	3308      	adds	r3, #8
    2b4a:	681a      	ldr	r2, [r3, #0]
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	0011      	movs	r1, r2
    2b50:	0018      	movs	r0, r3
    2b52:	4b15      	ldr	r3, [pc, #84]	; (2ba8 <_usart_init+0xd8>)
    2b54:	4798      	blx	r3
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2b56:	230f      	movs	r3, #15
    2b58:	18fb      	adds	r3, r7, r3
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	4a11      	ldr	r2, [pc, #68]	; (2ba4 <_usart_init+0xd4>)
    2b5e:	011b      	lsls	r3, r3, #4
    2b60:	18d3      	adds	r3, r2, r3
    2b62:	330c      	adds	r3, #12
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	0011      	movs	r1, r2
    2b6a:	0018      	movs	r0, r3
    2b6c:	4b0f      	ldr	r3, [pc, #60]	; (2bac <_usart_init+0xdc>)
    2b6e:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2b70:	230f      	movs	r3, #15
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	4a0b      	ldr	r2, [pc, #44]	; (2ba4 <_usart_init+0xd4>)
    2b78:	011b      	lsls	r3, r3, #4
    2b7a:	18d3      	adds	r3, r2, r3
    2b7c:	330e      	adds	r3, #14
    2b7e:	781a      	ldrb	r2, [r3, #0]
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	0011      	movs	r1, r2
    2b84:	0018      	movs	r0, r3
    2b86:	4b0a      	ldr	r3, [pc, #40]	; (2bb0 <_usart_init+0xe0>)
    2b88:	4798      	blx	r3

	return ERR_NONE;
    2b8a:	2300      	movs	r3, #0
}
    2b8c:	0018      	movs	r0, r3
    2b8e:	46bd      	mov	sp, r7
    2b90:	b005      	add	sp, #20
    2b92:	bd90      	pop	{r4, r7, pc}
    2b94:	00002a4d 	.word	0x00002a4d
    2b98:	000024f1 	.word	0x000024f1
    2b9c:	0000265d 	.word	0x0000265d
    2ba0:	0000268d 	.word	0x0000268d
    2ba4:	20000000 	.word	0x20000000
    2ba8:	000027b9 	.word	0x000027b9
    2bac:	00002819 	.word	0x00002819
    2bb0:	000027dd 	.word	0x000027dd

00002bb4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_i2cm_index(const void *const hw)
{
    2bb4:	b590      	push	{r4, r7, lr}
    2bb6:	b085      	sub	sp, #20
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2bbc:	230e      	movs	r3, #14
    2bbe:	18fc      	adds	r4, r7, r3
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	0018      	movs	r0, r3
    2bc4:	4b18      	ldr	r3, [pc, #96]	; (2c28 <_get_i2cm_index+0x74>)
    2bc6:	4798      	blx	r3
    2bc8:	0003      	movs	r3, r0
    2bca:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    2bcc:	230f      	movs	r3, #15
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	2200      	movs	r2, #0
    2bd2:	701a      	strb	r2, [r3, #0]
    2bd4:	e018      	b.n	2c08 <_get_i2cm_index+0x54>
		if (_i2cms[i].number == sercom_offset) {
    2bd6:	230f      	movs	r3, #15
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	781a      	ldrb	r2, [r3, #0]
    2bdc:	4913      	ldr	r1, [pc, #76]	; (2c2c <_get_i2cm_index+0x78>)
    2bde:	0013      	movs	r3, r2
    2be0:	005b      	lsls	r3, r3, #1
    2be2:	189b      	adds	r3, r3, r2
    2be4:	00db      	lsls	r3, r3, #3
    2be6:	5c5b      	ldrb	r3, [r3, r1]
    2be8:	220e      	movs	r2, #14
    2bea:	18ba      	adds	r2, r7, r2
    2bec:	7812      	ldrb	r2, [r2, #0]
    2bee:	429a      	cmp	r2, r3
    2bf0:	d103      	bne.n	2bfa <_get_i2cm_index+0x46>
			return i;
    2bf2:	230f      	movs	r3, #15
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	781b      	ldrb	r3, [r3, #0]
    2bf8:	e012      	b.n	2c20 <_get_i2cm_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    2bfa:	230f      	movs	r3, #15
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	781a      	ldrb	r2, [r3, #0]
    2c00:	230f      	movs	r3, #15
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	3201      	adds	r2, #1
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	230f      	movs	r3, #15
    2c0a:	18fb      	adds	r3, r7, r3
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d0e1      	beq.n	2bd6 <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    2c12:	4a07      	ldr	r2, [pc, #28]	; (2c30 <_get_i2cm_index+0x7c>)
    2c14:	4b07      	ldr	r3, [pc, #28]	; (2c34 <_get_i2cm_index+0x80>)
    2c16:	0019      	movs	r1, r3
    2c18:	2000      	movs	r0, #0
    2c1a:	4b07      	ldr	r3, [pc, #28]	; (2c38 <_get_i2cm_index+0x84>)
    2c1c:	4798      	blx	r3
	return 0;
    2c1e:	2300      	movs	r3, #0
}
    2c20:	0018      	movs	r0, r3
    2c22:	46bd      	mov	sp, r7
    2c24:	b005      	add	sp, #20
    2c26:	bd90      	pop	{r4, r7, pc}
    2c28:	00002a2d 	.word	0x00002a2d
    2c2c:	20000010 	.word	0x20000010
    2c30:	00000366 	.word	0x00000366
    2c34:	00006000 	.word	0x00006000
    2c38:	0000204d 	.word	0x0000204d

00002c3c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b082      	sub	sp, #8
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	2103      	movs	r1, #3
    2c48:	0018      	movs	r0, r3
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <_sercom_i2c_send_stop+0x1c>)
    2c4c:	4798      	blx	r3
}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	46bd      	mov	sp, r7
    2c52:	b002      	add	sp, #8
    2c54:	bd80      	pop	{r7, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	00002761 	.word	0x00002761

00002c5c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    2c5c:	b590      	push	{r4, r7, lr}
    2c5e:	b087      	sub	sp, #28
    2c60:	af00      	add	r7, sp, #0
    2c62:	60f8      	str	r0, [r7, #12]
    2c64:	60b9      	str	r1, [r7, #8]
    2c66:	607a      	str	r2, [r7, #4]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    2c68:	2316      	movs	r3, #22
    2c6a:	18fc      	adds	r4, r7, r3
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	0018      	movs	r0, r3
    2c70:	4b69      	ldr	r3, [pc, #420]	; (2e18 <_sercom_i2c_sync_analyse_flags+0x1bc>)
    2c72:	4798      	blx	r3
    2c74:	0003      	movs	r3, r0
    2c76:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    2c78:	68bb      	ldr	r3, [r7, #8]
    2c7a:	2201      	movs	r2, #1
    2c7c:	4013      	ands	r3, r2
    2c7e:	d100      	bne.n	2c82 <_sercom_i2c_sync_analyse_flags+0x26>
    2c80:	e079      	b.n	2d76 <_sercom_i2c_sync_analyse_flags+0x11a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2c82:	2316      	movs	r3, #22
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	881b      	ldrh	r3, [r3, #0]
    2c88:	2202      	movs	r2, #2
    2c8a:	4013      	ands	r3, r2
    2c8c:	d020      	beq.n	2cd0 <_sercom_i2c_sync_analyse_flags+0x74>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	0018      	movs	r0, r3
    2c92:	4b62      	ldr	r3, [pc, #392]	; (2e1c <_sercom_i2c_sync_analyse_flags+0x1c0>)
    2c94:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	885b      	ldrh	r3, [r3, #2]
    2c9a:	b29b      	uxth	r3, r3
    2c9c:	2280      	movs	r2, #128	; 0x80
    2c9e:	0152      	lsls	r2, r2, #5
    2ca0:	4313      	orrs	r3, r2
    2ca2:	b29a      	uxth	r2, r3
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	885b      	ldrh	r3, [r3, #2]
    2cac:	b29b      	uxth	r3, r3
    2cae:	4a5c      	ldr	r2, [pc, #368]	; (2e20 <_sercom_i2c_sync_analyse_flags+0x1c4>)
    2cb0:	4013      	ands	r3, r2
    2cb2:	b29a      	uxth	r2, r3
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2cb8:	2316      	movs	r3, #22
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	881b      	ldrh	r3, [r3, #0]
    2cbe:	2201      	movs	r2, #1
    2cc0:	4013      	ands	r3, r2
    2cc2:	d002      	beq.n	2cca <_sercom_i2c_sync_analyse_flags+0x6e>
				return I2C_ERR_BUS;
    2cc4:	2305      	movs	r3, #5
    2cc6:	425b      	negs	r3, r3
    2cc8:	e0a2      	b.n	2e10 <_sercom_i2c_sync_analyse_flags+0x1b4>
			}

			return I2C_ERR_BAD_ADDRESS;
    2cca:	2304      	movs	r3, #4
    2ccc:	425b      	negs	r3, r3
    2cce:	e09f      	b.n	2e10 <_sercom_i2c_sync_analyse_flags+0x1b4>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2cd0:	2316      	movs	r3, #22
    2cd2:	18fb      	adds	r3, r7, r3
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	2204      	movs	r2, #4
    2cd8:	4013      	ands	r3, r2
    2cda:	d021      	beq.n	2d20 <_sercom_i2c_sync_analyse_flags+0xc4>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	685b      	ldr	r3, [r3, #4]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	dd08      	ble.n	2cf6 <_sercom_i2c_sync_analyse_flags+0x9a>
					msg->flags |= I2C_M_FAIL;
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	885b      	ldrh	r3, [r3, #2]
    2ce8:	b29b      	uxth	r3, r3
    2cea:	2280      	movs	r2, #128	; 0x80
    2cec:	0152      	lsls	r2, r2, #5
    2cee:	4313      	orrs	r3, r2
    2cf0:	b29a      	uxth	r2, r3
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	885b      	ldrh	r3, [r3, #2]
    2cfa:	b29b      	uxth	r3, r3
    2cfc:	b21b      	sxth	r3, r3
    2cfe:	2b00      	cmp	r3, #0
    2d00:	da03      	bge.n	2d0a <_sercom_i2c_sync_analyse_flags+0xae>
					_sercom_i2c_send_stop(hw);
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	0018      	movs	r0, r3
    2d06:	4b47      	ldr	r3, [pc, #284]	; (2e24 <_sercom_i2c_sync_analyse_flags+0x1c8>)
    2d08:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	885b      	ldrh	r3, [r3, #2]
    2d0e:	b29b      	uxth	r3, r3
    2d10:	4a43      	ldr	r2, [pc, #268]	; (2e20 <_sercom_i2c_sync_analyse_flags+0x1c4>)
    2d12:	4013      	ands	r3, r2
    2d14:	b29a      	uxth	r2, r3
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    2d1a:	2302      	movs	r3, #2
    2d1c:	425b      	negs	r3, r3
    2d1e:	e077      	b.n	2e10 <_sercom_i2c_sync_analyse_flags+0x1b4>
			}

			if (msg->len == 0) {
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	685b      	ldr	r3, [r3, #4]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d112      	bne.n	2d4e <_sercom_i2c_sync_analyse_flags+0xf2>
				if (msg->flags & I2C_M_STOP) {
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	885b      	ldrh	r3, [r3, #2]
    2d2c:	b29b      	uxth	r3, r3
    2d2e:	b21b      	sxth	r3, r3
    2d30:	2b00      	cmp	r3, #0
    2d32:	da03      	bge.n	2d3c <_sercom_i2c_sync_analyse_flags+0xe0>
					_sercom_i2c_send_stop(hw);
    2d34:	68fb      	ldr	r3, [r7, #12]
    2d36:	0018      	movs	r0, r3
    2d38:	4b3a      	ldr	r3, [pc, #232]	; (2e24 <_sercom_i2c_sync_analyse_flags+0x1c8>)
    2d3a:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	885b      	ldrh	r3, [r3, #2]
    2d40:	b29b      	uxth	r3, r3
    2d42:	4a37      	ldr	r2, [pc, #220]	; (2e20 <_sercom_i2c_sync_analyse_flags+0x1c4>)
    2d44:	4013      	ands	r3, r2
    2d46:	b29a      	uxth	r2, r3
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	805a      	strh	r2, [r3, #2]
    2d4c:	e011      	b.n	2d72 <_sercom_i2c_sync_analyse_flags+0x116>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	689b      	ldr	r3, [r3, #8]
    2d52:	781a      	ldrb	r2, [r3, #0]
    2d54:	68fb      	ldr	r3, [r7, #12]
    2d56:	0011      	movs	r1, r2
    2d58:	0018      	movs	r0, r3
    2d5a:	4b33      	ldr	r3, [pc, #204]	; (2e28 <_sercom_i2c_sync_analyse_flags+0x1cc>)
    2d5c:	4798      	blx	r3
				msg->buffer++;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	689b      	ldr	r3, [r3, #8]
    2d62:	1c5a      	adds	r2, r3, #1
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	609a      	str	r2, [r3, #8]
				msg->len--;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	685b      	ldr	r3, [r3, #4]
    2d6c:	1e5a      	subs	r2, r3, #1
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    2d72:	2300      	movs	r3, #0
    2d74:	e04c      	b.n	2e10 <_sercom_i2c_sync_analyse_flags+0x1b4>
		}
	} else if (flags & SB_FLAG) {
    2d76:	68bb      	ldr	r3, [r7, #8]
    2d78:	2202      	movs	r2, #2
    2d7a:	4013      	ands	r3, r2
    2d7c:	d047      	beq.n	2e0e <_sercom_i2c_sync_analyse_flags+0x1b2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	685b      	ldr	r3, [r3, #4]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d03c      	beq.n	2e00 <_sercom_i2c_sync_analyse_flags+0x1a4>
    2d86:	2316      	movs	r3, #22
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	881b      	ldrh	r3, [r3, #0]
    2d8c:	2204      	movs	r2, #4
    2d8e:	4013      	ands	r3, r2
    2d90:	d136      	bne.n	2e00 <_sercom_i2c_sync_analyse_flags+0x1a4>
			msg->len--;
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	685b      	ldr	r3, [r3, #4]
    2d96:	1e5a      	subs	r2, r3, #1
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if (msg->len == 0) {
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	685b      	ldr	r3, [r3, #4]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d103      	bne.n	2dac <_sercom_i2c_sync_analyse_flags+0x150>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	0018      	movs	r0, r3
    2da8:	4b20      	ldr	r3, [pc, #128]	; (2e2c <_sercom_i2c_sync_analyse_flags+0x1d0>)
    2daa:	4798      	blx	r3
			}

			if (msg->len == 0) {
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	685b      	ldr	r3, [r3, #4]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d115      	bne.n	2de0 <_sercom_i2c_sync_analyse_flags+0x184>
				if (msg->flags & I2C_M_STOP) {
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	885b      	ldrh	r3, [r3, #2]
    2db8:	b29b      	uxth	r3, r3
    2dba:	b21b      	sxth	r3, r3
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	da07      	bge.n	2dd0 <_sercom_i2c_sync_analyse_flags+0x174>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    2dc0:	68fb      	ldr	r3, [r7, #12]
    2dc2:	0018      	movs	r0, r3
    2dc4:	4b1a      	ldr	r3, [pc, #104]	; (2e30 <_sercom_i2c_sync_analyse_flags+0x1d4>)
    2dc6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    2dc8:	68fb      	ldr	r3, [r7, #12]
    2dca:	0018      	movs	r0, r3
    2dcc:	4b15      	ldr	r3, [pc, #84]	; (2e24 <_sercom_i2c_sync_analyse_flags+0x1c8>)
    2dce:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	885b      	ldrh	r3, [r3, #2]
    2dd4:	b29b      	uxth	r3, r3
    2dd6:	4a12      	ldr	r2, [pc, #72]	; (2e20 <_sercom_i2c_sync_analyse_flags+0x1c4>)
    2dd8:	4013      	ands	r3, r2
    2dda:	b29a      	uxth	r2, r3
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	689c      	ldr	r4, [r3, #8]
    2de4:	1c62      	adds	r2, r4, #1
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	609a      	str	r2, [r3, #8]
    2dea:	68fb      	ldr	r3, [r7, #12]
    2dec:	0018      	movs	r0, r3
    2dee:	4b11      	ldr	r3, [pc, #68]	; (2e34 <_sercom_i2c_sync_analyse_flags+0x1d8>)
    2df0:	4798      	blx	r3
    2df2:	0003      	movs	r3, r0
    2df4:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    2df6:	68fb      	ldr	r3, [r7, #12]
    2df8:	0018      	movs	r0, r3
    2dfa:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <_sercom_i2c_sync_analyse_flags+0x1dc>)
    2dfc:	4798      	blx	r3
    2dfe:	e006      	b.n	2e0e <_sercom_i2c_sync_analyse_flags+0x1b2>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    2e00:	68fb      	ldr	r3, [r7, #12]
    2e02:	0018      	movs	r0, r3
    2e04:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <_sercom_i2c_sync_analyse_flags+0x1dc>)
    2e06:	4798      	blx	r3
			return I2C_NACK;
    2e08:	2302      	movs	r3, #2
    2e0a:	425b      	negs	r3, r3
    2e0c:	e000      	b.n	2e10 <_sercom_i2c_sync_analyse_flags+0x1b4>
	}

	return I2C_OK;
    2e0e:	2300      	movs	r3, #0
}
    2e10:	0018      	movs	r0, r3
    2e12:	46bd      	mov	sp, r7
    2e14:	b007      	add	sp, #28
    2e16:	bd90      	pop	{r4, r7, pc}
    2e18:	000028f9 	.word	0x000028f9
    2e1c:	00002511 	.word	0x00002511
    2e20:	fffffeff 	.word	0xfffffeff
    2e24:	00002c3d 	.word	0x00002c3d
    2e28:	00002865 	.word	0x00002865
    2e2c:	00002709 	.word	0x00002709
    2e30:	000026dd 	.word	0x000026dd
    2e34:	00002883 	.word	0x00002883
    2e38:	00002527 	.word	0x00002527

00002e3c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    2e3c:	b590      	push	{r4, r7, lr}
    2e3e:	b085      	sub	sp, #20
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    2e46:	230f      	movs	r3, #15
    2e48:	18fc      	adds	r4, r7, r3
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b39      	ldr	r3, [pc, #228]	; (2f34 <_i2c_m_sync_init+0xf8>)
    2e50:	4798      	blx	r3
    2e52:	0003      	movs	r3, r0
    2e54:	7023      	strb	r3, [r4, #0]

	ASSERT(i2c_dev);
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	1e5a      	subs	r2, r3, #1
    2e5a:	4193      	sbcs	r3, r2
    2e5c:	b2db      	uxtb	r3, r3
    2e5e:	4a36      	ldr	r2, [pc, #216]	; (2f38 <_i2c_m_sync_init+0xfc>)
    2e60:	4936      	ldr	r1, [pc, #216]	; (2f3c <_i2c_m_sync_init+0x100>)
    2e62:	0018      	movs	r0, r3
    2e64:	4b36      	ldr	r3, [pc, #216]	; (2f40 <_i2c_m_sync_init+0x104>)
    2e66:	4798      	blx	r3

	i2c_dev->hw = hw;
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	683a      	ldr	r2, [r7, #0]
    2e6c:	611a      	str	r2, [r3, #16]

	hri_sercomi2cm_wait_for_sync(hw);
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	0018      	movs	r0, r3
    2e72:	4b34      	ldr	r3, [pc, #208]	; (2f44 <_i2c_m_sync_init+0x108>)
    2e74:	4798      	blx	r3
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	2102      	movs	r1, #2
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b32      	ldr	r3, [pc, #200]	; (2f48 <_i2c_m_sync_init+0x10c>)
    2e7e:	4798      	blx	r3
    2e80:	1e03      	subs	r3, r0, #0
    2e82:	d008      	beq.n	2e96 <_i2c_m_sync_init+0x5a>
		hri_sercomi2cm_write_CTRLA_reg(hw, 0);
    2e84:	683b      	ldr	r3, [r7, #0]
    2e86:	2100      	movs	r1, #0
    2e88:	0018      	movs	r0, r3
    2e8a:	4b30      	ldr	r3, [pc, #192]	; (2f4c <_i2c_m_sync_init+0x110>)
    2e8c:	4798      	blx	r3
		hri_sercomi2cm_wait_for_sync(hw);
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	0018      	movs	r0, r3
    2e92:	4b2c      	ldr	r3, [pc, #176]	; (2f44 <_i2c_m_sync_init+0x108>)
    2e94:	4798      	blx	r3
	}
	hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST);
    2e96:	683b      	ldr	r3, [r7, #0]
    2e98:	2101      	movs	r1, #1
    2e9a:	0018      	movs	r0, r3
    2e9c:	4b2b      	ldr	r3, [pc, #172]	; (2f4c <_i2c_m_sync_init+0x110>)
    2e9e:	4798      	blx	r3
	hri_sercomi2cm_wait_for_sync(hw);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	0018      	movs	r0, r3
    2ea4:	4b27      	ldr	r3, [pc, #156]	; (2f44 <_i2c_m_sync_init+0x108>)
    2ea6:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
    2ea8:	230f      	movs	r3, #15
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	781a      	ldrb	r2, [r3, #0]
    2eae:	4928      	ldr	r1, [pc, #160]	; (2f50 <_i2c_m_sync_init+0x114>)
    2eb0:	0013      	movs	r3, r2
    2eb2:	005b      	lsls	r3, r3, #1
    2eb4:	189b      	adds	r3, r3, r2
    2eb6:	00db      	lsls	r3, r3, #3
    2eb8:	18cb      	adds	r3, r1, r3
    2eba:	3304      	adds	r3, #4
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	2202      	movs	r2, #2
    2ec0:	4393      	bics	r3, r2
    2ec2:	001a      	movs	r2, r3
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	0011      	movs	r1, r2
    2ec8:	0018      	movs	r0, r3
    2eca:	4b20      	ldr	r3, [pc, #128]	; (2f4c <_i2c_m_sync_init+0x110>)
    2ecc:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2ece:	230f      	movs	r3, #15
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	781a      	ldrb	r2, [r3, #0]
    2ed4:	491e      	ldr	r1, [pc, #120]	; (2f50 <_i2c_m_sync_init+0x114>)
    2ed6:	0013      	movs	r3, r2
    2ed8:	005b      	lsls	r3, r3, #1
    2eda:	189b      	adds	r3, r3, r2
    2edc:	00db      	lsls	r3, r3, #3
    2ede:	18cb      	adds	r3, r1, r3
    2ee0:	3308      	adds	r3, #8
    2ee2:	681a      	ldr	r2, [r3, #0]
    2ee4:	683b      	ldr	r3, [r7, #0]
    2ee6:	0011      	movs	r1, r2
    2ee8:	0018      	movs	r0, r3
    2eea:	4b1a      	ldr	r3, [pc, #104]	; (2f54 <_i2c_m_sync_init+0x118>)
    2eec:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2eee:	230f      	movs	r3, #15
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	781a      	ldrb	r2, [r3, #0]
    2ef4:	4916      	ldr	r1, [pc, #88]	; (2f50 <_i2c_m_sync_init+0x114>)
    2ef6:	0013      	movs	r3, r2
    2ef8:	005b      	lsls	r3, r3, #1
    2efa:	189b      	adds	r3, r3, r2
    2efc:	00db      	lsls	r3, r3, #3
    2efe:	18cb      	adds	r3, r1, r3
    2f00:	330c      	adds	r3, #12
    2f02:	881a      	ldrh	r2, [r3, #0]
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	0011      	movs	r1, r2
    2f08:	0018      	movs	r0, r3
    2f0a:	4b13      	ldr	r3, [pc, #76]	; (2f58 <_i2c_m_sync_init+0x11c>)
    2f0c:	4798      	blx	r3

	i2c_dev->service.trise = _i2cms[i].trise;
    2f0e:	230f      	movs	r3, #15
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	781a      	ldrb	r2, [r3, #0]
    2f14:	490e      	ldr	r1, [pc, #56]	; (2f50 <_i2c_m_sync_init+0x114>)
    2f16:	0013      	movs	r3, r2
    2f18:	005b      	lsls	r3, r3, #1
    2f1a:	189b      	adds	r3, r3, r2
    2f1c:	00db      	lsls	r3, r3, #3
    2f1e:	18cb      	adds	r3, r1, r3
    2f20:	3310      	adds	r3, #16
    2f22:	881a      	ldrh	r2, [r3, #0]
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    2f28:	2300      	movs	r3, #0
}
    2f2a:	0018      	movs	r0, r3
    2f2c:	46bd      	mov	sp, r7
    2f2e:	b005      	add	sp, #20
    2f30:	bd90      	pop	{r4, r7, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	00002bb5 	.word	0x00002bb5
    2f38:	000004d2 	.word	0x000004d2
    2f3c:	00006000 	.word	0x00006000
    2f40:	0000204d 	.word	0x0000204d
    2f44:	000024d1 	.word	0x000024d1
    2f48:	000025e1 	.word	0x000025e1
    2f4c:	00002611 	.word	0x00002611
    2f50:	20000010 	.word	0x20000010
    2f54:	00002795 	.word	0x00002795
    2f58:	000027fb 	.word	0x000027fb

00002f5c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    2f5c:	b580      	push	{r7, lr}
    2f5e:	b084      	sub	sp, #16
    2f60:	af00      	add	r7, sp, #0
    2f62:	6078      	str	r0, [r7, #4]
	int   timeout = 65535;
    2f64:	4b18      	ldr	r3, [pc, #96]	; (2fc8 <_i2c_m_sync_enable+0x6c>)
    2f66:	60fb      	str	r3, [r7, #12]
	void *hw      = i2c_dev->hw;
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	691b      	ldr	r3, [r3, #16]
    2f6c:	60bb      	str	r3, [r7, #8]

	ASSERT(i2c_dev);
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	1e5a      	subs	r2, r3, #1
    2f72:	4193      	sbcs	r3, r2
    2f74:	b2db      	uxtb	r3, r3
    2f76:	4a15      	ldr	r2, [pc, #84]	; (2fcc <_i2c_m_sync_enable+0x70>)
    2f78:	4915      	ldr	r1, [pc, #84]	; (2fd0 <_i2c_m_sync_enable+0x74>)
    2f7a:	0018      	movs	r0, r3
    2f7c:	4b15      	ldr	r3, [pc, #84]	; (2fd4 <_i2c_m_sync_enable+0x78>)
    2f7e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	691b      	ldr	r3, [r3, #16]
    2f84:	1e5a      	subs	r2, r3, #1
    2f86:	4193      	sbcs	r3, r2
    2f88:	b2db      	uxtb	r3, r3
    2f8a:	4a13      	ldr	r2, [pc, #76]	; (2fd8 <_i2c_m_sync_enable+0x7c>)
    2f8c:	4910      	ldr	r1, [pc, #64]	; (2fd0 <_i2c_m_sync_enable+0x74>)
    2f8e:	0018      	movs	r0, r3
    2f90:	4b10      	ldr	r3, [pc, #64]	; (2fd4 <_i2c_m_sync_enable+0x78>)
    2f92:	4798      	blx	r3

	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    2f94:	68bb      	ldr	r3, [r7, #8]
    2f96:	0018      	movs	r0, r3
    2f98:	4b10      	ldr	r3, [pc, #64]	; (2fdc <_i2c_m_sync_enable+0x80>)
    2f9a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2f9c:	e008      	b.n	2fb0 <_i2c_m_sync_enable+0x54>
		timeout--;
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	3b01      	subs	r3, #1
    2fa2:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	dc02      	bgt.n	2fb0 <_i2c_m_sync_enable+0x54>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    2faa:	68bb      	ldr	r3, [r7, #8]
    2fac:	2210      	movs	r2, #16
    2fae:	821a      	strh	r2, [r3, #16]
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2fb0:	68bb      	ldr	r3, [r7, #8]
    2fb2:	0018      	movs	r0, r3
    2fb4:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <_i2c_m_sync_enable+0x84>)
    2fb6:	4798      	blx	r3
    2fb8:	0003      	movs	r3, r0
    2fba:	2b01      	cmp	r3, #1
    2fbc:	d1ef      	bne.n	2f9e <_i2c_m_sync_enable+0x42>
		}
	}

	return ERR_NONE;
    2fbe:	2300      	movs	r3, #0
}
    2fc0:	0018      	movs	r0, r3
    2fc2:	46bd      	mov	sp, r7
    2fc4:	b004      	add	sp, #16
    2fc6:	bd80      	pop	{r7, pc}
    2fc8:	0000ffff 	.word	0x0000ffff
    2fcc:	00000502 	.word	0x00000502
    2fd0:	00006000 	.word	0x00006000
    2fd4:	0000204d 	.word	0x0000204d
    2fd8:	00000503 	.word	0x00000503
    2fdc:	000025b9 	.word	0x000025b9
    2fe0:	000028cd 	.word	0x000028cd

00002fe4 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b084      	sub	sp, #16
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
    2fec:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    2fee:	4b12      	ldr	r3, [pc, #72]	; (3038 <_sercom_i2c_sync_wait_bus+0x54>)
    2ff0:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	691b      	ldr	r3, [r3, #16]
    2ff6:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    2ff8:	68bb      	ldr	r3, [r7, #8]
    2ffa:	0018      	movs	r0, r3
    2ffc:	4b0f      	ldr	r3, [pc, #60]	; (303c <_sercom_i2c_sync_wait_bus+0x58>)
    2ffe:	4798      	blx	r3
    3000:	0003      	movs	r3, r0
    3002:	001a      	movs	r2, r3
    3004:	683b      	ldr	r3, [r7, #0]
    3006:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    3008:	68fb      	ldr	r3, [r7, #12]
    300a:	1e5a      	subs	r2, r3, #1
    300c:	60fa      	str	r2, [r7, #12]
    300e:	2b00      	cmp	r3, #0
    3010:	d102      	bne.n	3018 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    3012:	2305      	movs	r3, #5
    3014:	425b      	negs	r3, r3
    3016:	e00a      	b.n	302e <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	681b      	ldr	r3, [r3, #0]
    301c:	2201      	movs	r2, #1
    301e:	4013      	ands	r3, r2
    3020:	d104      	bne.n	302c <_sercom_i2c_sync_wait_bus+0x48>
    3022:	683b      	ldr	r3, [r7, #0]
    3024:	681b      	ldr	r3, [r3, #0]
    3026:	2202      	movs	r2, #2
    3028:	4013      	ands	r3, r2
    302a:	d0e5      	beq.n	2ff8 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    302c:	2300      	movs	r3, #0
}
    302e:	0018      	movs	r0, r3
    3030:	46bd      	mov	sp, r7
    3032:	b004      	add	sp, #16
    3034:	bd80      	pop	{r7, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	0000ffff 	.word	0x0000ffff
    303c:	0000253d 	.word	0x0000253d

00003040 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    3040:	b580      	push	{r7, lr}
    3042:	b086      	sub	sp, #24
    3044:	af00      	add	r7, sp, #0
    3046:	6078      	str	r0, [r7, #4]
	void *             hw  = i2c_dev->hw;
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	691b      	ldr	r3, [r3, #16]
    304c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg = &i2c_dev->service.msg;
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	613b      	str	r3, [r7, #16]
	uint32_t           flags;

	ASSERT(i2c_dev);
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	1e5a      	subs	r2, r3, #1
    3056:	4193      	sbcs	r3, r2
    3058:	b2db      	uxtb	r3, r3
    305a:	4a18      	ldr	r2, [pc, #96]	; (30bc <_sercom_i2c_sync_send_address+0x7c>)
    305c:	4918      	ldr	r1, [pc, #96]	; (30c0 <_sercom_i2c_sync_send_address+0x80>)
    305e:	0018      	movs	r0, r3
    3060:	4b18      	ldr	r3, [pc, #96]	; (30c4 <_sercom_i2c_sync_send_address+0x84>)
    3062:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    3064:	697b      	ldr	r3, [r7, #20]
    3066:	0018      	movs	r0, r3
    3068:	4b17      	ldr	r3, [pc, #92]	; (30c8 <_sercom_i2c_sync_send_address+0x88>)
    306a:	4798      	blx	r3

	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
    306c:	693b      	ldr	r3, [r7, #16]
    306e:	881b      	ldrh	r3, [r3, #0]
    3070:	005b      	lsls	r3, r3, #1
    3072:	b25a      	sxtb	r2, r3
    3074:	693b      	ldr	r3, [r7, #16]
    3076:	885b      	ldrh	r3, [r3, #2]
    3078:	b29b      	uxth	r3, r3
    307a:	0019      	movs	r1, r3
    307c:	2301      	movs	r3, #1
    307e:	400b      	ands	r3, r1
    3080:	1e59      	subs	r1, r3, #1
    3082:	418b      	sbcs	r3, r1
    3084:	b2db      	uxtb	r3, r3
    3086:	b25b      	sxtb	r3, r3
    3088:	4313      	orrs	r3, r2
    308a:	b25b      	sxtb	r3, r3
    308c:	b2da      	uxtb	r2, r3
    308e:	697b      	ldr	r3, [r7, #20]
    3090:	0011      	movs	r1, r2
    3092:	0018      	movs	r0, r3
    3094:	4b0d      	ldr	r3, [pc, #52]	; (30cc <_sercom_i2c_sync_send_address+0x8c>)
    3096:	4798      	blx	r3

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    3098:	230c      	movs	r3, #12
    309a:	18fa      	adds	r2, r7, r3
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	0011      	movs	r1, r2
    30a0:	0018      	movs	r0, r3
    30a2:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <_sercom_i2c_sync_send_address+0x90>)
    30a4:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    30a6:	68f9      	ldr	r1, [r7, #12]
    30a8:	693a      	ldr	r2, [r7, #16]
    30aa:	697b      	ldr	r3, [r7, #20]
    30ac:	0018      	movs	r0, r3
    30ae:	4b09      	ldr	r3, [pc, #36]	; (30d4 <_sercom_i2c_sync_send_address+0x94>)
    30b0:	4798      	blx	r3
    30b2:	0003      	movs	r3, r0
}
    30b4:	0018      	movs	r0, r3
    30b6:	46bd      	mov	sp, r7
    30b8:	b006      	add	sp, #24
    30ba:	bd80      	pop	{r7, pc}
    30bc:	00000577 	.word	0x00000577
    30c0:	00006000 	.word	0x00006000
    30c4:	0000204d 	.word	0x0000204d
    30c8:	00002735 	.word	0x00002735
    30cc:	00002839 	.word	0x00002839
    30d0:	00002fe5 	.word	0x00002fe5
    30d4:	00002c5d 	.word	0x00002c5d

000030d8 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    30d8:	b590      	push	{r4, r7, lr}
    30da:	b087      	sub	sp, #28
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
    30e0:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	691b      	ldr	r3, [r3, #16]
    30e6:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	1e5a      	subs	r2, r3, #1
    30ec:	4193      	sbcs	r3, r2
    30ee:	b2db      	uxtb	r3, r3
    30f0:	4a3d      	ldr	r2, [pc, #244]	; (31e8 <_i2c_m_sync_transfer+0x110>)
    30f2:	493e      	ldr	r1, [pc, #248]	; (31ec <_i2c_m_sync_transfer+0x114>)
    30f4:	0018      	movs	r0, r3
    30f6:	4b3e      	ldr	r3, [pc, #248]	; (31f0 <_i2c_m_sync_transfer+0x118>)
    30f8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	691b      	ldr	r3, [r3, #16]
    30fe:	1e5a      	subs	r2, r3, #1
    3100:	4193      	sbcs	r3, r2
    3102:	b2db      	uxtb	r3, r3
    3104:	4a3b      	ldr	r2, [pc, #236]	; (31f4 <_i2c_m_sync_transfer+0x11c>)
    3106:	4939      	ldr	r1, [pc, #228]	; (31ec <_i2c_m_sync_transfer+0x114>)
    3108:	0018      	movs	r0, r3
    310a:	4b39      	ldr	r3, [pc, #228]	; (31f0 <_i2c_m_sync_transfer+0x118>)
    310c:	4798      	blx	r3
	ASSERT(msg);
    310e:	683b      	ldr	r3, [r7, #0]
    3110:	1e5a      	subs	r2, r3, #1
    3112:	4193      	sbcs	r3, r2
    3114:	b2db      	uxtb	r3, r3
    3116:	4a38      	ldr	r2, [pc, #224]	; (31f8 <_i2c_m_sync_transfer+0x120>)
    3118:	4934      	ldr	r1, [pc, #208]	; (31ec <_i2c_m_sync_transfer+0x114>)
    311a:	0018      	movs	r0, r3
    311c:	4b34      	ldr	r3, [pc, #208]	; (31f0 <_i2c_m_sync_transfer+0x118>)
    311e:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	885b      	ldrh	r3, [r3, #2]
    3124:	b29b      	uxth	r3, r3
    3126:	001a      	movs	r2, r3
    3128:	2380      	movs	r3, #128	; 0x80
    312a:	005b      	lsls	r3, r3, #1
    312c:	4013      	ands	r3, r2
    312e:	d002      	beq.n	3136 <_i2c_m_sync_transfer+0x5e>
		return I2C_ERR_BUSY;
    3130:	2306      	movs	r3, #6
    3132:	425b      	negs	r3, r3
    3134:	e054      	b.n	31e0 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    3136:	683b      	ldr	r3, [r7, #0]
    3138:	885b      	ldrh	r3, [r3, #2]
    313a:	b29b      	uxth	r3, r3
    313c:	2280      	movs	r2, #128	; 0x80
    313e:	0052      	lsls	r2, r2, #1
    3140:	4313      	orrs	r3, r2
    3142:	b29a      	uxth	r2, r3
    3144:	683b      	ldr	r3, [r7, #0]
    3146:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	683a      	ldr	r2, [r7, #0]
    314c:	ca13      	ldmia	r2!, {r0, r1, r4}
    314e:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    3150:	693b      	ldr	r3, [r7, #16]
    3152:	0018      	movs	r0, r3
    3154:	4b29      	ldr	r3, [pc, #164]	; (31fc <_i2c_m_sync_transfer+0x124>)
    3156:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	0018      	movs	r0, r3
    315c:	4b28      	ldr	r3, [pc, #160]	; (3200 <_i2c_m_sync_transfer+0x128>)
    315e:	4798      	blx	r3
    3160:	0003      	movs	r3, r0
    3162:	617b      	str	r3, [r7, #20]

	if (ret) {
    3164:	697b      	ldr	r3, [r7, #20]
    3166:	2b00      	cmp	r3, #0
    3168:	d031      	beq.n	31ce <_i2c_m_sync_transfer+0xf6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	885b      	ldrh	r3, [r3, #2]
    316e:	b29b      	uxth	r3, r3
    3170:	4a24      	ldr	r2, [pc, #144]	; (3204 <_i2c_m_sync_transfer+0x12c>)
    3172:	4013      	ands	r3, r2
    3174:	b29a      	uxth	r2, r3
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	805a      	strh	r2, [r3, #2]

		return ret;
    317a:	697b      	ldr	r3, [r7, #20]
    317c:	e030      	b.n	31e0 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    317e:	230c      	movs	r3, #12
    3180:	18fa      	adds	r2, r7, r3
    3182:	687b      	ldr	r3, [r7, #4]
    3184:	0011      	movs	r1, r2
    3186:	0018      	movs	r0, r3
    3188:	4b1f      	ldr	r3, [pc, #124]	; (3208 <_i2c_m_sync_transfer+0x130>)
    318a:	4798      	blx	r3
    318c:	0003      	movs	r3, r0
    318e:	617b      	str	r3, [r7, #20]

		if (ret) {
    3190:	697b      	ldr	r3, [r7, #20]
    3192:	2b00      	cmp	r3, #0
    3194:	d013      	beq.n	31be <_i2c_m_sync_transfer+0xe6>
			if (msg->flags & I2C_M_STOP) {
    3196:	683b      	ldr	r3, [r7, #0]
    3198:	885b      	ldrh	r3, [r3, #2]
    319a:	b29b      	uxth	r3, r3
    319c:	b21b      	sxth	r3, r3
    319e:	2b00      	cmp	r3, #0
    31a0:	da03      	bge.n	31aa <_i2c_m_sync_transfer+0xd2>
				_sercom_i2c_send_stop(hw);
    31a2:	693b      	ldr	r3, [r7, #16]
    31a4:	0018      	movs	r0, r3
    31a6:	4b19      	ldr	r3, [pc, #100]	; (320c <_i2c_m_sync_transfer+0x134>)
    31a8:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	885b      	ldrh	r3, [r3, #2]
    31ae:	b29b      	uxth	r3, r3
    31b0:	4a14      	ldr	r2, [pc, #80]	; (3204 <_i2c_m_sync_transfer+0x12c>)
    31b2:	4013      	ands	r3, r2
    31b4:	b29a      	uxth	r2, r3
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	805a      	strh	r2, [r3, #2]

			return ret;
    31ba:	697b      	ldr	r3, [r7, #20]
    31bc:	e010      	b.n	31e0 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    31be:	68f9      	ldr	r1, [r7, #12]
    31c0:	687a      	ldr	r2, [r7, #4]
    31c2:	693b      	ldr	r3, [r7, #16]
    31c4:	0018      	movs	r0, r3
    31c6:	4b12      	ldr	r3, [pc, #72]	; (3210 <_i2c_m_sync_transfer+0x138>)
    31c8:	4798      	blx	r3
    31ca:	0003      	movs	r3, r0
    31cc:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	885b      	ldrh	r3, [r3, #2]
    31d2:	b29b      	uxth	r3, r3
    31d4:	001a      	movs	r2, r3
    31d6:	2380      	movs	r3, #128	; 0x80
    31d8:	005b      	lsls	r3, r3, #1
    31da:	4013      	ands	r3, r2
    31dc:	d1cf      	bne.n	317e <_i2c_m_sync_transfer+0xa6>
	}

	return ret;
    31de:	697b      	ldr	r3, [r7, #20]
}
    31e0:	0018      	movs	r0, r3
    31e2:	46bd      	mov	sp, r7
    31e4:	b007      	add	sp, #28
    31e6:	bd90      	pop	{r4, r7, pc}
    31e8:	00000591 	.word	0x00000591
    31ec:	00006000 	.word	0x00006000
    31f0:	0000204d 	.word	0x0000204d
    31f4:	00000592 	.word	0x00000592
    31f8:	00000593 	.word	0x00000593
    31fc:	000026b1 	.word	0x000026b1
    3200:	00003041 	.word	0x00003041
    3204:	fffffeff 	.word	0xfffffeff
    3208:	00002fe5 	.word	0x00002fe5
    320c:	00002c3d 	.word	0x00002c3d
    3210:	00002c5d 	.word	0x00002c5d

00003214 <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3214:	b580      	push	{r7, lr}
    3216:	b082      	sub	sp, #8
    3218:	af00      	add	r7, sp, #0
    321a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	68db      	ldr	r3, [r3, #12]
    3220:	08db      	lsrs	r3, r3, #3
    3222:	2201      	movs	r2, #1
    3224:	4013      	ands	r3, r2
    3226:	1e5a      	subs	r2, r3, #1
    3228:	4193      	sbcs	r3, r2
    322a:	b2db      	uxtb	r3, r3
}
    322c:	0018      	movs	r0, r3
    322e:	46bd      	mov	sp, r7
    3230:	b002      	add	sp, #8
    3232:	bd80      	pop	{r7, pc}

00003234 <hri_sysctrl_set_OSC32K_ENABLE_bit>:
{
	return ((Sysctrl *)hw)->XOSC32K.reg;
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
    3234:	b580      	push	{r7, lr}
    3236:	b082      	sub	sp, #8
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	699b      	ldr	r3, [r3, #24]
    3240:	2202      	movs	r2, #2
    3242:	431a      	orrs	r2, r3
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3248:	46c0      	nop			; (mov r8, r8)
    324a:	46bd      	mov	sp, r7
    324c:	b002      	add	sp, #8
    324e:	bd80      	pop	{r7, pc}

00003250 <hri_sysctrl_clear_OSC32K_ENABLE_bit>:
	((Sysctrl *)hw)->OSC32K.reg = tmp;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw)
{
    3250:	b580      	push	{r7, lr}
    3252:	b082      	sub	sp, #8
    3254:	af00      	add	r7, sp, #0
    3256:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	699b      	ldr	r3, [r3, #24]
    325c:	2202      	movs	r2, #2
    325e:	4393      	bics	r3, r2
    3260:	001a      	movs	r2, r3
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	46bd      	mov	sp, r7
    326a:	b002      	add	sp, #8
    326c:	bd80      	pop	{r7, pc}

0000326e <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    326e:	b580      	push	{r7, lr}
    3270:	b084      	sub	sp, #16
    3272:	af00      	add	r7, sp, #0
    3274:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3276:	230f      	movs	r3, #15
    3278:	18fb      	adds	r3, r7, r3
    327a:	687a      	ldr	r2, [r7, #4]
    327c:	7f12      	ldrb	r2, [r2, #28]
    327e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3280:	230f      	movs	r3, #15
    3282:	18fb      	adds	r3, r7, r3
    3284:	220f      	movs	r2, #15
    3286:	18ba      	adds	r2, r7, r2
    3288:	7812      	ldrb	r2, [r2, #0]
    328a:	211f      	movs	r1, #31
    328c:	400a      	ands	r2, r1
    328e:	701a      	strb	r2, [r3, #0]
	return tmp;
    3290:	230f      	movs	r3, #15
    3292:	18fb      	adds	r3, r7, r3
    3294:	781b      	ldrb	r3, [r3, #0]
}
    3296:	0018      	movs	r0, r3
    3298:	46bd      	mov	sp, r7
    329a:	b004      	add	sp, #16
    329c:	bd80      	pop	{r7, pc}

0000329e <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    329e:	b580      	push	{r7, lr}
    32a0:	b082      	sub	sp, #8
    32a2:	af00      	add	r7, sp, #0
    32a4:	6078      	str	r0, [r7, #4]
    32a6:	000a      	movs	r2, r1
    32a8:	1cfb      	adds	r3, r7, #3
    32aa:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	1cfa      	adds	r2, r7, #3
    32b0:	7812      	ldrb	r2, [r2, #0]
    32b2:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    32b4:	46c0      	nop			; (mov r8, r8)
    32b6:	46bd      	mov	sp, r7
    32b8:	b002      	add	sp, #8
    32ba:	bd80      	pop	{r7, pc}

000032bc <hri_sysctrl_set_OSC8M_ONDEMAND_bit>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b082      	sub	sp, #8
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	6a1b      	ldr	r3, [r3, #32]
    32c8:	2280      	movs	r2, #128	; 0x80
    32ca:	431a      	orrs	r2, r3
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    32d0:	46c0      	nop			; (mov r8, r8)
    32d2:	46bd      	mov	sp, r7
    32d4:	b002      	add	sp, #8
    32d6:	bd80      	pop	{r7, pc}

000032d8 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6a1b      	ldr	r3, [r3, #32]
    32e4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    32e6:	68fb      	ldr	r3, [r7, #12]
    32e8:	0c1b      	lsrs	r3, r3, #16
    32ea:	051b      	lsls	r3, r3, #20
    32ec:	0d1b      	lsrs	r3, r3, #20
    32ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    32f0:	68fb      	ldr	r3, [r7, #12]
}
    32f2:	0018      	movs	r0, r3
    32f4:	46bd      	mov	sp, r7
    32f6:	b004      	add	sp, #16
    32f8:	bd80      	pop	{r7, pc}

000032fa <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    32fa:	b580      	push	{r7, lr}
    32fc:	b084      	sub	sp, #16
    32fe:	af00      	add	r7, sp, #0
    3300:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	6a1b      	ldr	r3, [r3, #32]
    3306:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    3308:	68fb      	ldr	r3, [r7, #12]
    330a:	0f9b      	lsrs	r3, r3, #30
    330c:	60fb      	str	r3, [r7, #12]
	return tmp;
    330e:	68fb      	ldr	r3, [r7, #12]
}
    3310:	0018      	movs	r0, r3
    3312:	46bd      	mov	sp, r7
    3314:	b004      	add	sp, #16
    3316:	bd80      	pop	{r7, pc}

00003318 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
    3320:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	683a      	ldr	r2, [r7, #0]
    3326:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3328:	46c0      	nop			; (mov r8, r8)
    332a:	46bd      	mov	sp, r7
    332c:	b002      	add	sp, #8
    332e:	bd80      	pop	{r7, pc}

00003330 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    3330:	b580      	push	{r7, lr}
    3332:	b082      	sub	sp, #8
    3334:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    3336:	4b24      	ldr	r3, [pc, #144]	; (33c8 <_sysctrl_init_sources+0x98>)
    3338:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	0018      	movs	r0, r3
    333e:	4b23      	ldr	r3, [pc, #140]	; (33cc <_sysctrl_init_sources+0x9c>)
    3340:	4798      	blx	r3
    3342:	0002      	movs	r2, r0
    3344:	1cbb      	adds	r3, r7, #2
    3346:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	0018      	movs	r0, r3
    334c:	4b20      	ldr	r3, [pc, #128]	; (33d0 <_sysctrl_init_sources+0xa0>)
    334e:	4798      	blx	r3
    3350:	0003      	movs	r3, r0
    3352:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3354:	1cbb      	adds	r3, r7, #2
    3356:	881b      	ldrh	r3, [r3, #0]
    3358:	041b      	lsls	r3, r3, #16
    335a:	0019      	movs	r1, r3
    335c:	4b1d      	ldr	r3, [pc, #116]	; (33d4 <_sysctrl_init_sources+0xa4>)
    335e:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3360:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    3362:	2202      	movs	r2, #2
    3364:	431a      	orrs	r2, r3
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	0011      	movs	r1, r2
    336a:	0018      	movs	r0, r3
    336c:	4b1a      	ldr	r3, [pc, #104]	; (33d8 <_sysctrl_init_sources+0xa8>)
    336e:	4798      	blx	r3
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
#else
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	0018      	movs	r0, r3
    3374:	4b19      	ldr	r3, [pc, #100]	; (33dc <_sysctrl_init_sources+0xac>)
    3376:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	0018      	movs	r0, r3
    337c:	4b18      	ldr	r3, [pc, #96]	; (33e0 <_sysctrl_init_sources+0xb0>)
    337e:	4798      	blx	r3
    3380:	0003      	movs	r3, r0
    3382:	001a      	movs	r2, r3
    3384:	1cbb      	adds	r3, r7, #2
    3386:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    3388:	1cbb      	adds	r3, r7, #2
    338a:	881b      	ldrh	r3, [r3, #0]
    338c:	b2db      	uxtb	r3, r3
    338e:	221f      	movs	r2, #31
    3390:	4013      	ands	r3, r2
    3392:	b2da      	uxtb	r2, r3
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	0011      	movs	r1, r2
    3398:	0018      	movs	r0, r3
    339a:	4b12      	ldr	r3, [pc, #72]	; (33e4 <_sysctrl_init_sources+0xb4>)
    339c:	4798      	blx	r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	0018      	movs	r0, r3
    33a4:	4b10      	ldr	r3, [pc, #64]	; (33e8 <_sysctrl_init_sources+0xb8>)
    33a6:	4798      	blx	r3
    33a8:	0003      	movs	r3, r0
    33aa:	001a      	movs	r2, r3
    33ac:	2301      	movs	r3, #1
    33ae:	4053      	eors	r3, r2
    33b0:	b2db      	uxtb	r3, r3
    33b2:	2b00      	cmp	r3, #0
    33b4:	d1f4      	bne.n	33a0 <_sysctrl_init_sources+0x70>
		;
#endif
#if CONF_OSC8M_ONDEMAND == 1
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	0018      	movs	r0, r3
    33ba:	4b0c      	ldr	r3, [pc, #48]	; (33ec <_sysctrl_init_sources+0xbc>)
    33bc:	4798      	blx	r3
#endif
#endif

	(void)calib, (void)hw;
}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	46bd      	mov	sp, r7
    33c2:	b002      	add	sp, #8
    33c4:	bd80      	pop	{r7, pc}
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	40000800 	.word	0x40000800
    33cc:	000032d9 	.word	0x000032d9
    33d0:	000032fb 	.word	0x000032fb
    33d4:	0fff0000 	.word	0x0fff0000
    33d8:	00003319 	.word	0x00003319
    33dc:	00003235 	.word	0x00003235
    33e0:	0000326f 	.word	0x0000326f
    33e4:	0000329f 	.word	0x0000329f
    33e8:	00003215 	.word	0x00003215
    33ec:	000032bd 	.word	0x000032bd

000033f0 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    33f6:	4b05      	ldr	r3, [pc, #20]	; (340c <_sysctrl_init_referenced_generators+0x1c>)
    33f8:	607b      	str	r3, [r7, #4]
		;
#endif

#if CONF_OSC32K_CONFIG == 0 || CONF_OSC32K_ENABLE == 0
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
    33fa:	687b      	ldr	r3, [r7, #4]
    33fc:	0018      	movs	r0, r3
    33fe:	4b04      	ldr	r3, [pc, #16]	; (3410 <_sysctrl_init_referenced_generators+0x20>)
    3400:	4798      	blx	r3
#endif

	(void)hw;
}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	46bd      	mov	sp, r7
    3406:	b002      	add	sp, #8
    3408:	bd80      	pop	{r7, pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	40000800 	.word	0x40000800
    3410:	00003251 	.word	0x00003251

00003414 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    3414:	b580      	push	{r7, lr}
    3416:	b082      	sub	sp, #8
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    341c:	4b04      	ldr	r3, [pc, #16]	; (3430 <_system_time_init+0x1c>)
    341e:	4a05      	ldr	r2, [pc, #20]	; (3434 <_system_time_init+0x20>)
    3420:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3422:	4b03      	ldr	r3, [pc, #12]	; (3430 <_system_time_init+0x1c>)
    3424:	2205      	movs	r2, #5
    3426:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3428:	46c0      	nop			; (mov r8, r8)
    342a:	46bd      	mov	sp, r7
    342c:	b002      	add	sp, #8
    342e:	bd80      	pop	{r7, pc}
    3430:	e000e010 	.word	0xe000e010
    3434:	00ffffff 	.word	0x00ffffff

00003438 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	0018      	movs	r0, r3
    3444:	4b02      	ldr	r3, [pc, #8]	; (3450 <_delay_init+0x18>)
    3446:	4798      	blx	r3
}
    3448:	46c0      	nop			; (mov r8, r8)
    344a:	46bd      	mov	sp, r7
    344c:	b002      	add	sp, #8
    344e:	bd80      	pop	{r7, pc}
    3450:	00003415 	.word	0x00003415

00003454 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3454:	b580      	push	{r7, lr}
    3456:	b084      	sub	sp, #16
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
    345c:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    345e:	683b      	ldr	r3, [r7, #0]
    3460:	0e1a      	lsrs	r2, r3, #24
    3462:	230f      	movs	r3, #15
    3464:	18fb      	adds	r3, r7, r3
    3466:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	60bb      	str	r3, [r7, #8]

	while (n--) {
    346c:	e011      	b.n	3492 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    346e:	4b16      	ldr	r3, [pc, #88]	; (34c8 <_delay_cycles+0x74>)
    3470:	4a16      	ldr	r2, [pc, #88]	; (34cc <_delay_cycles+0x78>)
    3472:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <_delay_cycles+0x74>)
    3476:	4a15      	ldr	r2, [pc, #84]	; (34cc <_delay_cycles+0x78>)
    3478:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	4b12      	ldr	r3, [pc, #72]	; (34c8 <_delay_cycles+0x74>)
    347e:	681a      	ldr	r2, [r3, #0]
    3480:	2380      	movs	r3, #128	; 0x80
    3482:	025b      	lsls	r3, r3, #9
    3484:	4013      	ands	r3, r2
    3486:	d0f9      	beq.n	347c <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    3488:	68bb      	ldr	r3, [r7, #8]
    348a:	4a11      	ldr	r2, [pc, #68]	; (34d0 <_delay_cycles+0x7c>)
    348c:	4694      	mov	ip, r2
    348e:	4463      	add	r3, ip
    3490:	60bb      	str	r3, [r7, #8]
	while (n--) {
    3492:	230f      	movs	r3, #15
    3494:	18fb      	adds	r3, r7, r3
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	220f      	movs	r2, #15
    349a:	18ba      	adds	r2, r7, r2
    349c:	1e59      	subs	r1, r3, #1
    349e:	7011      	strb	r1, [r2, #0]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d1e4      	bne.n	346e <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    34a4:	4b08      	ldr	r3, [pc, #32]	; (34c8 <_delay_cycles+0x74>)
    34a6:	68ba      	ldr	r2, [r7, #8]
    34a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    34aa:	4b07      	ldr	r3, [pc, #28]	; (34c8 <_delay_cycles+0x74>)
    34ac:	68ba      	ldr	r2, [r7, #8]
    34ae:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	4b05      	ldr	r3, [pc, #20]	; (34c8 <_delay_cycles+0x74>)
    34b4:	681a      	ldr	r2, [r3, #0]
    34b6:	2380      	movs	r3, #128	; 0x80
    34b8:	025b      	lsls	r3, r3, #9
    34ba:	4013      	ands	r3, r2
    34bc:	d0f9      	beq.n	34b2 <_delay_cycles+0x5e>
		;
}
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	46bd      	mov	sp, r7
    34c2:	b004      	add	sp, #16
    34c4:	bd80      	pop	{r7, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	e000e010 	.word	0xe000e010
    34cc:	00ffffff 	.word	0x00ffffff
    34d0:	ff000001 	.word	0xff000001

000034d4 <main>:
#include "BME280/BME280.h"
#include <stdio.h>
#include "string.h"

int main(void)
{
    34d4:	b590      	push	{r4, r7, lr}
    34d6:	b0b9      	sub	sp, #228	; 0xe4
    34d8:	af00      	add	r7, sp, #0
	uint8_t bmp280_id = 0;
    34da:	23df      	movs	r3, #223	; 0xdf
    34dc:	18fb      	adds	r3, r7, r3
    34de:	2200      	movs	r2, #0
    34e0:	701a      	strb	r2, [r3, #0]
	uint8_t ctr_reg = 0;
    34e2:	23de      	movs	r3, #222	; 0xde
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	2200      	movs	r2, #0
    34e8:	701a      	strb	r2, [r3, #0]
	uint8_t status_reg = 0;
    34ea:	23dd      	movs	r3, #221	; 0xdd
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	2200      	movs	r2, #0
    34f0:	701a      	strb	r2, [r3, #0]
	char Temp[100];
	double tem = 0;
    34f2:	2300      	movs	r3, #0
    34f4:	2400      	movs	r4, #0
    34f6:	22d0      	movs	r2, #208	; 0xd0
    34f8:	18ba      	adds	r2, r7, r2
    34fa:	6013      	str	r3, [r2, #0]
    34fc:	6054      	str	r4, [r2, #4]
	double pressure = 0;
    34fe:	2300      	movs	r3, #0
    3500:	2400      	movs	r4, #0
    3502:	22c8      	movs	r2, #200	; 0xc8
    3504:	18ba      	adds	r2, r7, r2
    3506:	6013      	str	r3, [r2, #0]
    3508:	6054      	str	r4, [r2, #4]
	double humidity = 0;
    350a:	2300      	movs	r3, #0
    350c:	2400      	movs	r4, #0
    350e:	22c0      	movs	r2, #192	; 0xc0
    3510:	18ba      	adds	r2, r7, r2
    3512:	6013      	str	r3, [r2, #0]
    3514:	6054      	str	r4, [r2, #4]
	char Pressuref[10];
	char humidityi[10];
	char *a,*b,*c,*h;
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3516:	4b8c      	ldr	r3, [pc, #560]	; (3748 <main+0x274>)
    3518:	4798      	blx	r3
	//// <id> pad_initial_level
	//// <false"> Low
	//// <true"> High
	//true);
	//
    struct bmp280* b1 = bmp280_init(&I2C_0);
    351a:	4b8c      	ldr	r3, [pc, #560]	; (374c <main+0x278>)
    351c:	0018      	movs	r0, r3
    351e:	4b8c      	ldr	r3, [pc, #560]	; (3750 <main+0x27c>)
    3520:	4798      	blx	r3
    3522:	0003      	movs	r3, r0
    3524:	22bc      	movs	r2, #188	; 0xbc
    3526:	18ba      	adds	r2, r7, r2
    3528:	6013      	str	r3, [r2, #0]
	if(b1->valid == true) {				
    352a:	23bc      	movs	r3, #188	; 0xbc
    352c:	18fb      	adds	r3, r7, r3
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	2231      	movs	r2, #49	; 0x31
    3532:	5c9b      	ldrb	r3, [r3, r2]
    3534:	2b00      	cmp	r3, #0
    3536:	d100      	bne.n	353a <main+0x66>
    3538:	e100      	b.n	373c <main+0x268>
		while(1) {
			//ctr_reg = bmp280_read_register(&I2C_0, 0xF4);
			//status_reg = bmp280_read_register(&I2C_0, 0xF3);
			tem = bmp280_get_temperature(b1);
    353a:	23bc      	movs	r3, #188	; 0xbc
    353c:	18fb      	adds	r3, r7, r3
    353e:	681b      	ldr	r3, [r3, #0]
    3540:	0018      	movs	r0, r3
    3542:	4b84      	ldr	r3, [pc, #528]	; (3754 <main+0x280>)
    3544:	4798      	blx	r3
    3546:	0003      	movs	r3, r0
    3548:	000c      	movs	r4, r1
    354a:	22d0      	movs	r2, #208	; 0xd0
    354c:	18ba      	adds	r2, r7, r2
    354e:	6013      	str	r3, [r2, #0]
    3550:	6054      	str	r4, [r2, #4]
			pressure = bmp280_get_pressure(b1);
    3552:	23bc      	movs	r3, #188	; 0xbc
    3554:	18fb      	adds	r3, r7, r3
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	0018      	movs	r0, r3
    355a:	4b7f      	ldr	r3, [pc, #508]	; (3758 <main+0x284>)
    355c:	4798      	blx	r3
    355e:	0003      	movs	r3, r0
    3560:	000c      	movs	r4, r1
    3562:	22c8      	movs	r2, #200	; 0xc8
    3564:	18ba      	adds	r2, r7, r2
    3566:	6013      	str	r3, [r2, #0]
    3568:	6054      	str	r4, [r2, #4]
			humidity = bmp280_get_humidity(b1);
    356a:	23bc      	movs	r3, #188	; 0xbc
    356c:	18fb      	adds	r3, r7, r3
    356e:	681b      	ldr	r3, [r3, #0]
    3570:	0018      	movs	r0, r3
    3572:	4b7a      	ldr	r3, [pc, #488]	; (375c <main+0x288>)
    3574:	4798      	blx	r3
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	22c0      	movs	r2, #192	; 0xc0
    357c:	18ba      	adds	r2, r7, r2
    357e:	6013      	str	r3, [r2, #0]
    3580:	6054      	str	r4, [r2, #4]
			
			sprintf(Tempi,"TEMP: %d",(int)tem);
    3582:	4b77      	ldr	r3, [pc, #476]	; (3760 <main+0x28c>)
    3584:	22d0      	movs	r2, #208	; 0xd0
    3586:	18ba      	adds	r2, r7, r2
    3588:	6810      	ldr	r0, [r2, #0]
    358a:	6851      	ldr	r1, [r2, #4]
    358c:	4798      	blx	r3
    358e:	0002      	movs	r2, r0
    3590:	4974      	ldr	r1, [pc, #464]	; (3764 <main+0x290>)
    3592:	233c      	movs	r3, #60	; 0x3c
    3594:	18fb      	adds	r3, r7, r3
    3596:	0018      	movs	r0, r3
    3598:	4b73      	ldr	r3, [pc, #460]	; (3768 <main+0x294>)
    359a:	4798      	blx	r3
			sprintf(Tempf,"%d",(int)(tem*10)%10);
    359c:	4c73      	ldr	r4, [pc, #460]	; (376c <main+0x298>)
    359e:	2200      	movs	r2, #0
    35a0:	4b73      	ldr	r3, [pc, #460]	; (3770 <main+0x29c>)
    35a2:	21d0      	movs	r1, #208	; 0xd0
    35a4:	1879      	adds	r1, r7, r1
    35a6:	6808      	ldr	r0, [r1, #0]
    35a8:	6849      	ldr	r1, [r1, #4]
    35aa:	47a0      	blx	r4
    35ac:	0003      	movs	r3, r0
    35ae:	000c      	movs	r4, r1
    35b0:	0019      	movs	r1, r3
    35b2:	0022      	movs	r2, r4
    35b4:	4b6a      	ldr	r3, [pc, #424]	; (3760 <main+0x28c>)
    35b6:	0008      	movs	r0, r1
    35b8:	0011      	movs	r1, r2
    35ba:	4798      	blx	r3
    35bc:	0002      	movs	r2, r0
    35be:	4b6d      	ldr	r3, [pc, #436]	; (3774 <main+0x2a0>)
    35c0:	210a      	movs	r1, #10
    35c2:	0010      	movs	r0, r2
    35c4:	4798      	blx	r3
    35c6:	000b      	movs	r3, r1
    35c8:	001a      	movs	r2, r3
    35ca:	496b      	ldr	r1, [pc, #428]	; (3778 <main+0x2a4>)
    35cc:	2330      	movs	r3, #48	; 0x30
    35ce:	18fb      	adds	r3, r7, r3
    35d0:	0018      	movs	r0, r3
    35d2:	4b65      	ldr	r3, [pc, #404]	; (3768 <main+0x294>)
    35d4:	4798      	blx	r3
			a = strcat(Tempi,".");
    35d6:	233c      	movs	r3, #60	; 0x3c
    35d8:	18fb      	adds	r3, r7, r3
    35da:	0018      	movs	r0, r3
    35dc:	4b67      	ldr	r3, [pc, #412]	; (377c <main+0x2a8>)
    35de:	4798      	blx	r3
    35e0:	0003      	movs	r3, r0
    35e2:	001a      	movs	r2, r3
    35e4:	233c      	movs	r3, #60	; 0x3c
    35e6:	18fb      	adds	r3, r7, r3
    35e8:	189a      	adds	r2, r3, r2
    35ea:	4b65      	ldr	r3, [pc, #404]	; (3780 <main+0x2ac>)
    35ec:	0010      	movs	r0, r2
    35ee:	0019      	movs	r1, r3
    35f0:	2302      	movs	r3, #2
    35f2:	001a      	movs	r2, r3
    35f4:	4b63      	ldr	r3, [pc, #396]	; (3784 <main+0x2b0>)
    35f6:	4798      	blx	r3
    35f8:	233c      	movs	r3, #60	; 0x3c
    35fa:	18fb      	adds	r3, r7, r3
    35fc:	22b8      	movs	r2, #184	; 0xb8
    35fe:	18ba      	adds	r2, r7, r2
    3600:	6013      	str	r3, [r2, #0]
			a = strcat(a,Tempf);
    3602:	2330      	movs	r3, #48	; 0x30
    3604:	18fa      	adds	r2, r7, r3
    3606:	23b8      	movs	r3, #184	; 0xb8
    3608:	18fb      	adds	r3, r7, r3
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	0011      	movs	r1, r2
    360e:	0018      	movs	r0, r3
    3610:	4b5d      	ldr	r3, [pc, #372]	; (3788 <main+0x2b4>)
    3612:	4798      	blx	r3
    3614:	0003      	movs	r3, r0
    3616:	22b8      	movs	r2, #184	; 0xb8
    3618:	18ba      	adds	r2, r7, r2
    361a:	6013      	str	r3, [r2, #0]
			a = strcat(a,", ");
    361c:	23b8      	movs	r3, #184	; 0xb8
    361e:	18fb      	adds	r3, r7, r3
    3620:	681b      	ldr	r3, [r3, #0]
    3622:	0018      	movs	r0, r3
    3624:	4b55      	ldr	r3, [pc, #340]	; (377c <main+0x2a8>)
    3626:	4798      	blx	r3
    3628:	0003      	movs	r3, r0
    362a:	001a      	movs	r2, r3
    362c:	23b8      	movs	r3, #184	; 0xb8
    362e:	18fb      	adds	r3, r7, r3
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	189a      	adds	r2, r3, r2
    3634:	4b55      	ldr	r3, [pc, #340]	; (378c <main+0x2b8>)
    3636:	0010      	movs	r0, r2
    3638:	0019      	movs	r1, r3
    363a:	2303      	movs	r3, #3
    363c:	001a      	movs	r2, r3
    363e:	4b51      	ldr	r3, [pc, #324]	; (3784 <main+0x2b0>)
    3640:	4798      	blx	r3
			
			sprintf(humidityi,"RH: %d",(int)humidity);
    3642:	4b47      	ldr	r3, [pc, #284]	; (3760 <main+0x28c>)
    3644:	22c0      	movs	r2, #192	; 0xc0
    3646:	18ba      	adds	r2, r7, r2
    3648:	6810      	ldr	r0, [r2, #0]
    364a:	6851      	ldr	r1, [r2, #4]
    364c:	4798      	blx	r3
    364e:	0002      	movs	r2, r0
    3650:	494f      	ldr	r1, [pc, #316]	; (3790 <main+0x2bc>)
    3652:	1d3b      	adds	r3, r7, #4
    3654:	0018      	movs	r0, r3
    3656:	4b44      	ldr	r3, [pc, #272]	; (3768 <main+0x294>)
    3658:	4798      	blx	r3
			//sprintf(Pressuref,"%d",(int)(pressure*10)%10);
			//b = strcat(Pressurei,".");
			//b = strcat(b,Pressuref);
			h = strcat(humidityi,"%, ");
    365a:	1d3b      	adds	r3, r7, #4
    365c:	0018      	movs	r0, r3
    365e:	4b47      	ldr	r3, [pc, #284]	; (377c <main+0x2a8>)
    3660:	4798      	blx	r3
    3662:	0003      	movs	r3, r0
    3664:	001a      	movs	r2, r3
    3666:	1d3b      	adds	r3, r7, #4
    3668:	189a      	adds	r2, r3, r2
    366a:	4b4a      	ldr	r3, [pc, #296]	; (3794 <main+0x2c0>)
    366c:	0010      	movs	r0, r2
    366e:	0019      	movs	r1, r3
    3670:	2304      	movs	r3, #4
    3672:	001a      	movs	r2, r3
    3674:	4b43      	ldr	r3, [pc, #268]	; (3784 <main+0x2b0>)
    3676:	4798      	blx	r3
    3678:	1d3b      	adds	r3, r7, #4
    367a:	22b4      	movs	r2, #180	; 0xb4
    367c:	18ba      	adds	r2, r7, r2
    367e:	6013      	str	r3, [r2, #0]
			
			sprintf(Pressurei,"PRESS: %d",(int)pressure);
    3680:	4b37      	ldr	r3, [pc, #220]	; (3760 <main+0x28c>)
    3682:	22c8      	movs	r2, #200	; 0xc8
    3684:	18ba      	adds	r2, r7, r2
    3686:	6810      	ldr	r0, [r2, #0]
    3688:	6851      	ldr	r1, [r2, #4]
    368a:	4798      	blx	r3
    368c:	0002      	movs	r2, r0
    368e:	4942      	ldr	r1, [pc, #264]	; (3798 <main+0x2c4>)
    3690:	231c      	movs	r3, #28
    3692:	18fb      	adds	r3, r7, r3
    3694:	0018      	movs	r0, r3
    3696:	4b34      	ldr	r3, [pc, #208]	; (3768 <main+0x294>)
    3698:	4798      	blx	r3
			//sprintf(Pressuref,"%d",(int)(pressure*10)%10);
			//b = strcat(Pressurei,".");
			//b = strcat(b,Pressuref);
			b = strcat(Pressurei,"\r\n");
    369a:	231c      	movs	r3, #28
    369c:	18fb      	adds	r3, r7, r3
    369e:	0018      	movs	r0, r3
    36a0:	4b36      	ldr	r3, [pc, #216]	; (377c <main+0x2a8>)
    36a2:	4798      	blx	r3
    36a4:	0003      	movs	r3, r0
    36a6:	001a      	movs	r2, r3
    36a8:	231c      	movs	r3, #28
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	189a      	adds	r2, r3, r2
    36ae:	4b3b      	ldr	r3, [pc, #236]	; (379c <main+0x2c8>)
    36b0:	0010      	movs	r0, r2
    36b2:	0019      	movs	r1, r3
    36b4:	2303      	movs	r3, #3
    36b6:	001a      	movs	r2, r3
    36b8:	4b32      	ldr	r3, [pc, #200]	; (3784 <main+0x2b0>)
    36ba:	4798      	blx	r3
    36bc:	231c      	movs	r3, #28
    36be:	18fb      	adds	r3, r7, r3
    36c0:	22b0      	movs	r2, #176	; 0xb0
    36c2:	18ba      	adds	r2, r7, r2
    36c4:	6013      	str	r3, [r2, #0]
			
			c = strcat(a,h);
    36c6:	23b4      	movs	r3, #180	; 0xb4
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	681a      	ldr	r2, [r3, #0]
    36cc:	23b8      	movs	r3, #184	; 0xb8
    36ce:	18fb      	adds	r3, r7, r3
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	0011      	movs	r1, r2
    36d4:	0018      	movs	r0, r3
    36d6:	4b2c      	ldr	r3, [pc, #176]	; (3788 <main+0x2b4>)
    36d8:	4798      	blx	r3
    36da:	0003      	movs	r3, r0
    36dc:	22ac      	movs	r2, #172	; 0xac
    36de:	18ba      	adds	r2, r7, r2
    36e0:	6013      	str	r3, [r2, #0]
			c = strcat(c,b);
    36e2:	23b0      	movs	r3, #176	; 0xb0
    36e4:	18fb      	adds	r3, r7, r3
    36e6:	681a      	ldr	r2, [r3, #0]
    36e8:	23ac      	movs	r3, #172	; 0xac
    36ea:	18fb      	adds	r3, r7, r3
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	0011      	movs	r1, r2
    36f0:	0018      	movs	r0, r3
    36f2:	4b25      	ldr	r3, [pc, #148]	; (3788 <main+0x2b4>)
    36f4:	4798      	blx	r3
    36f6:	0003      	movs	r3, r0
    36f8:	22ac      	movs	r2, #172	; 0xac
    36fa:	18ba      	adds	r2, r7, r2
    36fc:	6013      	str	r3, [r2, #0]
			
			struct io_descriptor *io;
			usart_sync_get_io_descriptor(&USART_0, &io);
    36fe:	003a      	movs	r2, r7
    3700:	4b27      	ldr	r3, [pc, #156]	; (37a0 <main+0x2cc>)
    3702:	0011      	movs	r1, r2
    3704:	0018      	movs	r0, r3
    3706:	4b27      	ldr	r3, [pc, #156]	; (37a4 <main+0x2d0>)
    3708:	4798      	blx	r3
			usart_sync_enable(&USART_0);
    370a:	4b25      	ldr	r3, [pc, #148]	; (37a0 <main+0x2cc>)
    370c:	0018      	movs	r0, r3
    370e:	4b26      	ldr	r3, [pc, #152]	; (37a8 <main+0x2d4>)
    3710:	4798      	blx	r3
			
 			io_write(io, (uint8_t *)c, strlen(a));  
    3712:	683c      	ldr	r4, [r7, #0]
    3714:	23b8      	movs	r3, #184	; 0xb8
    3716:	18fb      	adds	r3, r7, r3
    3718:	681b      	ldr	r3, [r3, #0]
    371a:	0018      	movs	r0, r3
    371c:	4b17      	ldr	r3, [pc, #92]	; (377c <main+0x2a8>)
    371e:	4798      	blx	r3
    3720:	0003      	movs	r3, r0
    3722:	b29a      	uxth	r2, r3
    3724:	23ac      	movs	r3, #172	; 0xac
    3726:	18fb      	adds	r3, r7, r3
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	0019      	movs	r1, r3
    372c:	0020      	movs	r0, r4
    372e:	4b1f      	ldr	r3, [pc, #124]	; (37ac <main+0x2d8>)
    3730:	4798      	blx	r3
			
			delay_ms(5000);
    3732:	4b1f      	ldr	r3, [pc, #124]	; (37b0 <main+0x2dc>)
    3734:	0018      	movs	r0, r3
    3736:	4b1f      	ldr	r3, [pc, #124]	; (37b4 <main+0x2e0>)
    3738:	4798      	blx	r3
		while(1) {
    373a:	e6fe      	b.n	353a <main+0x66>
    373c:	2300      	movs	r3, #0
		//// <id> pad_initial_level
		//// <false"> Low
		//// <true"> High
		//true);
	//}
}
    373e:	0018      	movs	r0, r3
    3740:	46bd      	mov	sp, r7
    3742:	b039      	add	sp, #228	; 0xe4
    3744:	bd90      	pop	{r4, r7, pc}
    3746:	46c0      	nop			; (mov r8, r8)
    3748:	00000105 	.word	0x00000105
    374c:	200000c4 	.word	0x200000c4
    3750:	00000201 	.word	0x00000201
    3754:	00000c25 	.word	0x00000c25
    3758:	00000d21 	.word	0x00000d21
    375c:	00000cb5 	.word	0x00000cb5
    3760:	000054d5 	.word	0x000054d5
    3764:	0000602c 	.word	0x0000602c
    3768:	00005851 	.word	0x00005851
    376c:	000049a9 	.word	0x000049a9
    3770:	40240000 	.word	0x40240000
    3774:	00003a99 	.word	0x00003a99
    3778:	00006038 	.word	0x00006038
    377c:	000058af 	.word	0x000058af
    3780:	0000603c 	.word	0x0000603c
    3784:	000056c9 	.word	0x000056c9
    3788:	00005895 	.word	0x00005895
    378c:	00006040 	.word	0x00006040
    3790:	00006044 	.word	0x00006044
    3794:	0000604c 	.word	0x0000604c
    3798:	00006050 	.word	0x00006050
    379c:	0000605c 	.word	0x0000605c
    37a0:	200000b8 	.word	0x200000b8
    37a4:	00001e95 	.word	0x00001e95
    37a8:	00001e59 	.word	0x00001e59
    37ac:	00001d39 	.word	0x00001d39
    37b0:	00001388 	.word	0x00001388
    37b4:	00001b51 	.word	0x00001b51

000037b8 <__udivsi3>:
    37b8:	2200      	movs	r2, #0
    37ba:	0843      	lsrs	r3, r0, #1
    37bc:	428b      	cmp	r3, r1
    37be:	d374      	bcc.n	38aa <__udivsi3+0xf2>
    37c0:	0903      	lsrs	r3, r0, #4
    37c2:	428b      	cmp	r3, r1
    37c4:	d35f      	bcc.n	3886 <__udivsi3+0xce>
    37c6:	0a03      	lsrs	r3, r0, #8
    37c8:	428b      	cmp	r3, r1
    37ca:	d344      	bcc.n	3856 <__udivsi3+0x9e>
    37cc:	0b03      	lsrs	r3, r0, #12
    37ce:	428b      	cmp	r3, r1
    37d0:	d328      	bcc.n	3824 <__udivsi3+0x6c>
    37d2:	0c03      	lsrs	r3, r0, #16
    37d4:	428b      	cmp	r3, r1
    37d6:	d30d      	bcc.n	37f4 <__udivsi3+0x3c>
    37d8:	22ff      	movs	r2, #255	; 0xff
    37da:	0209      	lsls	r1, r1, #8
    37dc:	ba12      	rev	r2, r2
    37de:	0c03      	lsrs	r3, r0, #16
    37e0:	428b      	cmp	r3, r1
    37e2:	d302      	bcc.n	37ea <__udivsi3+0x32>
    37e4:	1212      	asrs	r2, r2, #8
    37e6:	0209      	lsls	r1, r1, #8
    37e8:	d065      	beq.n	38b6 <__udivsi3+0xfe>
    37ea:	0b03      	lsrs	r3, r0, #12
    37ec:	428b      	cmp	r3, r1
    37ee:	d319      	bcc.n	3824 <__udivsi3+0x6c>
    37f0:	e000      	b.n	37f4 <__udivsi3+0x3c>
    37f2:	0a09      	lsrs	r1, r1, #8
    37f4:	0bc3      	lsrs	r3, r0, #15
    37f6:	428b      	cmp	r3, r1
    37f8:	d301      	bcc.n	37fe <__udivsi3+0x46>
    37fa:	03cb      	lsls	r3, r1, #15
    37fc:	1ac0      	subs	r0, r0, r3
    37fe:	4152      	adcs	r2, r2
    3800:	0b83      	lsrs	r3, r0, #14
    3802:	428b      	cmp	r3, r1
    3804:	d301      	bcc.n	380a <__udivsi3+0x52>
    3806:	038b      	lsls	r3, r1, #14
    3808:	1ac0      	subs	r0, r0, r3
    380a:	4152      	adcs	r2, r2
    380c:	0b43      	lsrs	r3, r0, #13
    380e:	428b      	cmp	r3, r1
    3810:	d301      	bcc.n	3816 <__udivsi3+0x5e>
    3812:	034b      	lsls	r3, r1, #13
    3814:	1ac0      	subs	r0, r0, r3
    3816:	4152      	adcs	r2, r2
    3818:	0b03      	lsrs	r3, r0, #12
    381a:	428b      	cmp	r3, r1
    381c:	d301      	bcc.n	3822 <__udivsi3+0x6a>
    381e:	030b      	lsls	r3, r1, #12
    3820:	1ac0      	subs	r0, r0, r3
    3822:	4152      	adcs	r2, r2
    3824:	0ac3      	lsrs	r3, r0, #11
    3826:	428b      	cmp	r3, r1
    3828:	d301      	bcc.n	382e <__udivsi3+0x76>
    382a:	02cb      	lsls	r3, r1, #11
    382c:	1ac0      	subs	r0, r0, r3
    382e:	4152      	adcs	r2, r2
    3830:	0a83      	lsrs	r3, r0, #10
    3832:	428b      	cmp	r3, r1
    3834:	d301      	bcc.n	383a <__udivsi3+0x82>
    3836:	028b      	lsls	r3, r1, #10
    3838:	1ac0      	subs	r0, r0, r3
    383a:	4152      	adcs	r2, r2
    383c:	0a43      	lsrs	r3, r0, #9
    383e:	428b      	cmp	r3, r1
    3840:	d301      	bcc.n	3846 <__udivsi3+0x8e>
    3842:	024b      	lsls	r3, r1, #9
    3844:	1ac0      	subs	r0, r0, r3
    3846:	4152      	adcs	r2, r2
    3848:	0a03      	lsrs	r3, r0, #8
    384a:	428b      	cmp	r3, r1
    384c:	d301      	bcc.n	3852 <__udivsi3+0x9a>
    384e:	020b      	lsls	r3, r1, #8
    3850:	1ac0      	subs	r0, r0, r3
    3852:	4152      	adcs	r2, r2
    3854:	d2cd      	bcs.n	37f2 <__udivsi3+0x3a>
    3856:	09c3      	lsrs	r3, r0, #7
    3858:	428b      	cmp	r3, r1
    385a:	d301      	bcc.n	3860 <__udivsi3+0xa8>
    385c:	01cb      	lsls	r3, r1, #7
    385e:	1ac0      	subs	r0, r0, r3
    3860:	4152      	adcs	r2, r2
    3862:	0983      	lsrs	r3, r0, #6
    3864:	428b      	cmp	r3, r1
    3866:	d301      	bcc.n	386c <__udivsi3+0xb4>
    3868:	018b      	lsls	r3, r1, #6
    386a:	1ac0      	subs	r0, r0, r3
    386c:	4152      	adcs	r2, r2
    386e:	0943      	lsrs	r3, r0, #5
    3870:	428b      	cmp	r3, r1
    3872:	d301      	bcc.n	3878 <__udivsi3+0xc0>
    3874:	014b      	lsls	r3, r1, #5
    3876:	1ac0      	subs	r0, r0, r3
    3878:	4152      	adcs	r2, r2
    387a:	0903      	lsrs	r3, r0, #4
    387c:	428b      	cmp	r3, r1
    387e:	d301      	bcc.n	3884 <__udivsi3+0xcc>
    3880:	010b      	lsls	r3, r1, #4
    3882:	1ac0      	subs	r0, r0, r3
    3884:	4152      	adcs	r2, r2
    3886:	08c3      	lsrs	r3, r0, #3
    3888:	428b      	cmp	r3, r1
    388a:	d301      	bcc.n	3890 <__udivsi3+0xd8>
    388c:	00cb      	lsls	r3, r1, #3
    388e:	1ac0      	subs	r0, r0, r3
    3890:	4152      	adcs	r2, r2
    3892:	0883      	lsrs	r3, r0, #2
    3894:	428b      	cmp	r3, r1
    3896:	d301      	bcc.n	389c <__udivsi3+0xe4>
    3898:	008b      	lsls	r3, r1, #2
    389a:	1ac0      	subs	r0, r0, r3
    389c:	4152      	adcs	r2, r2
    389e:	0843      	lsrs	r3, r0, #1
    38a0:	428b      	cmp	r3, r1
    38a2:	d301      	bcc.n	38a8 <__udivsi3+0xf0>
    38a4:	004b      	lsls	r3, r1, #1
    38a6:	1ac0      	subs	r0, r0, r3
    38a8:	4152      	adcs	r2, r2
    38aa:	1a41      	subs	r1, r0, r1
    38ac:	d200      	bcs.n	38b0 <__udivsi3+0xf8>
    38ae:	4601      	mov	r1, r0
    38b0:	4152      	adcs	r2, r2
    38b2:	4610      	mov	r0, r2
    38b4:	4770      	bx	lr
    38b6:	e7ff      	b.n	38b8 <__udivsi3+0x100>
    38b8:	b501      	push	{r0, lr}
    38ba:	2000      	movs	r0, #0
    38bc:	f000 f8f0 	bl	3aa0 <__aeabi_idiv0>
    38c0:	bd02      	pop	{r1, pc}
    38c2:	46c0      	nop			; (mov r8, r8)

000038c4 <__aeabi_uidivmod>:
    38c4:	2900      	cmp	r1, #0
    38c6:	d0f7      	beq.n	38b8 <__udivsi3+0x100>
    38c8:	e776      	b.n	37b8 <__udivsi3>
    38ca:	4770      	bx	lr

000038cc <__divsi3>:
    38cc:	4603      	mov	r3, r0
    38ce:	430b      	orrs	r3, r1
    38d0:	d47f      	bmi.n	39d2 <__divsi3+0x106>
    38d2:	2200      	movs	r2, #0
    38d4:	0843      	lsrs	r3, r0, #1
    38d6:	428b      	cmp	r3, r1
    38d8:	d374      	bcc.n	39c4 <__divsi3+0xf8>
    38da:	0903      	lsrs	r3, r0, #4
    38dc:	428b      	cmp	r3, r1
    38de:	d35f      	bcc.n	39a0 <__divsi3+0xd4>
    38e0:	0a03      	lsrs	r3, r0, #8
    38e2:	428b      	cmp	r3, r1
    38e4:	d344      	bcc.n	3970 <__divsi3+0xa4>
    38e6:	0b03      	lsrs	r3, r0, #12
    38e8:	428b      	cmp	r3, r1
    38ea:	d328      	bcc.n	393e <__divsi3+0x72>
    38ec:	0c03      	lsrs	r3, r0, #16
    38ee:	428b      	cmp	r3, r1
    38f0:	d30d      	bcc.n	390e <__divsi3+0x42>
    38f2:	22ff      	movs	r2, #255	; 0xff
    38f4:	0209      	lsls	r1, r1, #8
    38f6:	ba12      	rev	r2, r2
    38f8:	0c03      	lsrs	r3, r0, #16
    38fa:	428b      	cmp	r3, r1
    38fc:	d302      	bcc.n	3904 <__divsi3+0x38>
    38fe:	1212      	asrs	r2, r2, #8
    3900:	0209      	lsls	r1, r1, #8
    3902:	d065      	beq.n	39d0 <__divsi3+0x104>
    3904:	0b03      	lsrs	r3, r0, #12
    3906:	428b      	cmp	r3, r1
    3908:	d319      	bcc.n	393e <__divsi3+0x72>
    390a:	e000      	b.n	390e <__divsi3+0x42>
    390c:	0a09      	lsrs	r1, r1, #8
    390e:	0bc3      	lsrs	r3, r0, #15
    3910:	428b      	cmp	r3, r1
    3912:	d301      	bcc.n	3918 <__divsi3+0x4c>
    3914:	03cb      	lsls	r3, r1, #15
    3916:	1ac0      	subs	r0, r0, r3
    3918:	4152      	adcs	r2, r2
    391a:	0b83      	lsrs	r3, r0, #14
    391c:	428b      	cmp	r3, r1
    391e:	d301      	bcc.n	3924 <__divsi3+0x58>
    3920:	038b      	lsls	r3, r1, #14
    3922:	1ac0      	subs	r0, r0, r3
    3924:	4152      	adcs	r2, r2
    3926:	0b43      	lsrs	r3, r0, #13
    3928:	428b      	cmp	r3, r1
    392a:	d301      	bcc.n	3930 <__divsi3+0x64>
    392c:	034b      	lsls	r3, r1, #13
    392e:	1ac0      	subs	r0, r0, r3
    3930:	4152      	adcs	r2, r2
    3932:	0b03      	lsrs	r3, r0, #12
    3934:	428b      	cmp	r3, r1
    3936:	d301      	bcc.n	393c <__divsi3+0x70>
    3938:	030b      	lsls	r3, r1, #12
    393a:	1ac0      	subs	r0, r0, r3
    393c:	4152      	adcs	r2, r2
    393e:	0ac3      	lsrs	r3, r0, #11
    3940:	428b      	cmp	r3, r1
    3942:	d301      	bcc.n	3948 <__divsi3+0x7c>
    3944:	02cb      	lsls	r3, r1, #11
    3946:	1ac0      	subs	r0, r0, r3
    3948:	4152      	adcs	r2, r2
    394a:	0a83      	lsrs	r3, r0, #10
    394c:	428b      	cmp	r3, r1
    394e:	d301      	bcc.n	3954 <__divsi3+0x88>
    3950:	028b      	lsls	r3, r1, #10
    3952:	1ac0      	subs	r0, r0, r3
    3954:	4152      	adcs	r2, r2
    3956:	0a43      	lsrs	r3, r0, #9
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__divsi3+0x94>
    395c:	024b      	lsls	r3, r1, #9
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	0a03      	lsrs	r3, r0, #8
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__divsi3+0xa0>
    3968:	020b      	lsls	r3, r1, #8
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	d2cd      	bcs.n	390c <__divsi3+0x40>
    3970:	09c3      	lsrs	r3, r0, #7
    3972:	428b      	cmp	r3, r1
    3974:	d301      	bcc.n	397a <__divsi3+0xae>
    3976:	01cb      	lsls	r3, r1, #7
    3978:	1ac0      	subs	r0, r0, r3
    397a:	4152      	adcs	r2, r2
    397c:	0983      	lsrs	r3, r0, #6
    397e:	428b      	cmp	r3, r1
    3980:	d301      	bcc.n	3986 <__divsi3+0xba>
    3982:	018b      	lsls	r3, r1, #6
    3984:	1ac0      	subs	r0, r0, r3
    3986:	4152      	adcs	r2, r2
    3988:	0943      	lsrs	r3, r0, #5
    398a:	428b      	cmp	r3, r1
    398c:	d301      	bcc.n	3992 <__divsi3+0xc6>
    398e:	014b      	lsls	r3, r1, #5
    3990:	1ac0      	subs	r0, r0, r3
    3992:	4152      	adcs	r2, r2
    3994:	0903      	lsrs	r3, r0, #4
    3996:	428b      	cmp	r3, r1
    3998:	d301      	bcc.n	399e <__divsi3+0xd2>
    399a:	010b      	lsls	r3, r1, #4
    399c:	1ac0      	subs	r0, r0, r3
    399e:	4152      	adcs	r2, r2
    39a0:	08c3      	lsrs	r3, r0, #3
    39a2:	428b      	cmp	r3, r1
    39a4:	d301      	bcc.n	39aa <__divsi3+0xde>
    39a6:	00cb      	lsls	r3, r1, #3
    39a8:	1ac0      	subs	r0, r0, r3
    39aa:	4152      	adcs	r2, r2
    39ac:	0883      	lsrs	r3, r0, #2
    39ae:	428b      	cmp	r3, r1
    39b0:	d301      	bcc.n	39b6 <__divsi3+0xea>
    39b2:	008b      	lsls	r3, r1, #2
    39b4:	1ac0      	subs	r0, r0, r3
    39b6:	4152      	adcs	r2, r2
    39b8:	0843      	lsrs	r3, r0, #1
    39ba:	428b      	cmp	r3, r1
    39bc:	d301      	bcc.n	39c2 <__divsi3+0xf6>
    39be:	004b      	lsls	r3, r1, #1
    39c0:	1ac0      	subs	r0, r0, r3
    39c2:	4152      	adcs	r2, r2
    39c4:	1a41      	subs	r1, r0, r1
    39c6:	d200      	bcs.n	39ca <__divsi3+0xfe>
    39c8:	4601      	mov	r1, r0
    39ca:	4152      	adcs	r2, r2
    39cc:	4610      	mov	r0, r2
    39ce:	4770      	bx	lr
    39d0:	e05d      	b.n	3a8e <__divsi3+0x1c2>
    39d2:	0fca      	lsrs	r2, r1, #31
    39d4:	d000      	beq.n	39d8 <__divsi3+0x10c>
    39d6:	4249      	negs	r1, r1
    39d8:	1003      	asrs	r3, r0, #32
    39da:	d300      	bcc.n	39de <__divsi3+0x112>
    39dc:	4240      	negs	r0, r0
    39de:	4053      	eors	r3, r2
    39e0:	2200      	movs	r2, #0
    39e2:	469c      	mov	ip, r3
    39e4:	0903      	lsrs	r3, r0, #4
    39e6:	428b      	cmp	r3, r1
    39e8:	d32d      	bcc.n	3a46 <__divsi3+0x17a>
    39ea:	0a03      	lsrs	r3, r0, #8
    39ec:	428b      	cmp	r3, r1
    39ee:	d312      	bcc.n	3a16 <__divsi3+0x14a>
    39f0:	22fc      	movs	r2, #252	; 0xfc
    39f2:	0189      	lsls	r1, r1, #6
    39f4:	ba12      	rev	r2, r2
    39f6:	0a03      	lsrs	r3, r0, #8
    39f8:	428b      	cmp	r3, r1
    39fa:	d30c      	bcc.n	3a16 <__divsi3+0x14a>
    39fc:	0189      	lsls	r1, r1, #6
    39fe:	1192      	asrs	r2, r2, #6
    3a00:	428b      	cmp	r3, r1
    3a02:	d308      	bcc.n	3a16 <__divsi3+0x14a>
    3a04:	0189      	lsls	r1, r1, #6
    3a06:	1192      	asrs	r2, r2, #6
    3a08:	428b      	cmp	r3, r1
    3a0a:	d304      	bcc.n	3a16 <__divsi3+0x14a>
    3a0c:	0189      	lsls	r1, r1, #6
    3a0e:	d03a      	beq.n	3a86 <__divsi3+0x1ba>
    3a10:	1192      	asrs	r2, r2, #6
    3a12:	e000      	b.n	3a16 <__divsi3+0x14a>
    3a14:	0989      	lsrs	r1, r1, #6
    3a16:	09c3      	lsrs	r3, r0, #7
    3a18:	428b      	cmp	r3, r1
    3a1a:	d301      	bcc.n	3a20 <__divsi3+0x154>
    3a1c:	01cb      	lsls	r3, r1, #7
    3a1e:	1ac0      	subs	r0, r0, r3
    3a20:	4152      	adcs	r2, r2
    3a22:	0983      	lsrs	r3, r0, #6
    3a24:	428b      	cmp	r3, r1
    3a26:	d301      	bcc.n	3a2c <__divsi3+0x160>
    3a28:	018b      	lsls	r3, r1, #6
    3a2a:	1ac0      	subs	r0, r0, r3
    3a2c:	4152      	adcs	r2, r2
    3a2e:	0943      	lsrs	r3, r0, #5
    3a30:	428b      	cmp	r3, r1
    3a32:	d301      	bcc.n	3a38 <__divsi3+0x16c>
    3a34:	014b      	lsls	r3, r1, #5
    3a36:	1ac0      	subs	r0, r0, r3
    3a38:	4152      	adcs	r2, r2
    3a3a:	0903      	lsrs	r3, r0, #4
    3a3c:	428b      	cmp	r3, r1
    3a3e:	d301      	bcc.n	3a44 <__divsi3+0x178>
    3a40:	010b      	lsls	r3, r1, #4
    3a42:	1ac0      	subs	r0, r0, r3
    3a44:	4152      	adcs	r2, r2
    3a46:	08c3      	lsrs	r3, r0, #3
    3a48:	428b      	cmp	r3, r1
    3a4a:	d301      	bcc.n	3a50 <__divsi3+0x184>
    3a4c:	00cb      	lsls	r3, r1, #3
    3a4e:	1ac0      	subs	r0, r0, r3
    3a50:	4152      	adcs	r2, r2
    3a52:	0883      	lsrs	r3, r0, #2
    3a54:	428b      	cmp	r3, r1
    3a56:	d301      	bcc.n	3a5c <__divsi3+0x190>
    3a58:	008b      	lsls	r3, r1, #2
    3a5a:	1ac0      	subs	r0, r0, r3
    3a5c:	4152      	adcs	r2, r2
    3a5e:	d2d9      	bcs.n	3a14 <__divsi3+0x148>
    3a60:	0843      	lsrs	r3, r0, #1
    3a62:	428b      	cmp	r3, r1
    3a64:	d301      	bcc.n	3a6a <__divsi3+0x19e>
    3a66:	004b      	lsls	r3, r1, #1
    3a68:	1ac0      	subs	r0, r0, r3
    3a6a:	4152      	adcs	r2, r2
    3a6c:	1a41      	subs	r1, r0, r1
    3a6e:	d200      	bcs.n	3a72 <__divsi3+0x1a6>
    3a70:	4601      	mov	r1, r0
    3a72:	4663      	mov	r3, ip
    3a74:	4152      	adcs	r2, r2
    3a76:	105b      	asrs	r3, r3, #1
    3a78:	4610      	mov	r0, r2
    3a7a:	d301      	bcc.n	3a80 <__divsi3+0x1b4>
    3a7c:	4240      	negs	r0, r0
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d500      	bpl.n	3a84 <__divsi3+0x1b8>
    3a82:	4249      	negs	r1, r1
    3a84:	4770      	bx	lr
    3a86:	4663      	mov	r3, ip
    3a88:	105b      	asrs	r3, r3, #1
    3a8a:	d300      	bcc.n	3a8e <__divsi3+0x1c2>
    3a8c:	4240      	negs	r0, r0
    3a8e:	b501      	push	{r0, lr}
    3a90:	2000      	movs	r0, #0
    3a92:	f000 f805 	bl	3aa0 <__aeabi_idiv0>
    3a96:	bd02      	pop	{r1, pc}

00003a98 <__aeabi_idivmod>:
    3a98:	2900      	cmp	r1, #0
    3a9a:	d0f8      	beq.n	3a8e <__divsi3+0x1c2>
    3a9c:	e716      	b.n	38cc <__divsi3>
    3a9e:	4770      	bx	lr

00003aa0 <__aeabi_idiv0>:
    3aa0:	4770      	bx	lr
    3aa2:	46c0      	nop			; (mov r8, r8)

00003aa4 <__aeabi_cdrcmple>:
    3aa4:	4684      	mov	ip, r0
    3aa6:	1c10      	adds	r0, r2, #0
    3aa8:	4662      	mov	r2, ip
    3aaa:	468c      	mov	ip, r1
    3aac:	1c19      	adds	r1, r3, #0
    3aae:	4663      	mov	r3, ip
    3ab0:	e000      	b.n	3ab4 <__aeabi_cdcmpeq>
    3ab2:	46c0      	nop			; (mov r8, r8)

00003ab4 <__aeabi_cdcmpeq>:
    3ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ab6:	f000 ff15 	bl	48e4 <__ledf2>
    3aba:	2800      	cmp	r0, #0
    3abc:	d401      	bmi.n	3ac2 <__aeabi_cdcmpeq+0xe>
    3abe:	2100      	movs	r1, #0
    3ac0:	42c8      	cmn	r0, r1
    3ac2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ac4 <__aeabi_dcmpeq>:
    3ac4:	b510      	push	{r4, lr}
    3ac6:	f000 fe6f 	bl	47a8 <__eqdf2>
    3aca:	4240      	negs	r0, r0
    3acc:	3001      	adds	r0, #1
    3ace:	bd10      	pop	{r4, pc}

00003ad0 <__aeabi_dcmplt>:
    3ad0:	b510      	push	{r4, lr}
    3ad2:	f000 ff07 	bl	48e4 <__ledf2>
    3ad6:	2800      	cmp	r0, #0
    3ad8:	db01      	blt.n	3ade <__aeabi_dcmplt+0xe>
    3ada:	2000      	movs	r0, #0
    3adc:	bd10      	pop	{r4, pc}
    3ade:	2001      	movs	r0, #1
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)

00003ae4 <__aeabi_dcmple>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	f000 fefd 	bl	48e4 <__ledf2>
    3aea:	2800      	cmp	r0, #0
    3aec:	dd01      	ble.n	3af2 <__aeabi_dcmple+0xe>
    3aee:	2000      	movs	r0, #0
    3af0:	bd10      	pop	{r4, pc}
    3af2:	2001      	movs	r0, #1
    3af4:	bd10      	pop	{r4, pc}
    3af6:	46c0      	nop			; (mov r8, r8)

00003af8 <__aeabi_dcmpgt>:
    3af8:	b510      	push	{r4, lr}
    3afa:	f000 fe8f 	bl	481c <__gedf2>
    3afe:	2800      	cmp	r0, #0
    3b00:	dc01      	bgt.n	3b06 <__aeabi_dcmpgt+0xe>
    3b02:	2000      	movs	r0, #0
    3b04:	bd10      	pop	{r4, pc}
    3b06:	2001      	movs	r0, #1
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__aeabi_dcmpge>:
    3b0c:	b510      	push	{r4, lr}
    3b0e:	f000 fe85 	bl	481c <__gedf2>
    3b12:	2800      	cmp	r0, #0
    3b14:	da01      	bge.n	3b1a <__aeabi_dcmpge+0xe>
    3b16:	2000      	movs	r0, #0
    3b18:	bd10      	pop	{r4, pc}
    3b1a:	2001      	movs	r0, #1
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)

00003b20 <__aeabi_dadd>:
    3b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b22:	4645      	mov	r5, r8
    3b24:	46de      	mov	lr, fp
    3b26:	4657      	mov	r7, sl
    3b28:	464e      	mov	r6, r9
    3b2a:	030c      	lsls	r4, r1, #12
    3b2c:	b5e0      	push	{r5, r6, r7, lr}
    3b2e:	004e      	lsls	r6, r1, #1
    3b30:	0fc9      	lsrs	r1, r1, #31
    3b32:	4688      	mov	r8, r1
    3b34:	000d      	movs	r5, r1
    3b36:	0a61      	lsrs	r1, r4, #9
    3b38:	0f44      	lsrs	r4, r0, #29
    3b3a:	430c      	orrs	r4, r1
    3b3c:	00c7      	lsls	r7, r0, #3
    3b3e:	0319      	lsls	r1, r3, #12
    3b40:	0058      	lsls	r0, r3, #1
    3b42:	0fdb      	lsrs	r3, r3, #31
    3b44:	469b      	mov	fp, r3
    3b46:	0a4b      	lsrs	r3, r1, #9
    3b48:	0f51      	lsrs	r1, r2, #29
    3b4a:	430b      	orrs	r3, r1
    3b4c:	0d76      	lsrs	r6, r6, #21
    3b4e:	0d40      	lsrs	r0, r0, #21
    3b50:	0019      	movs	r1, r3
    3b52:	00d2      	lsls	r2, r2, #3
    3b54:	45d8      	cmp	r8, fp
    3b56:	d100      	bne.n	3b5a <__aeabi_dadd+0x3a>
    3b58:	e0ae      	b.n	3cb8 <__aeabi_dadd+0x198>
    3b5a:	1a35      	subs	r5, r6, r0
    3b5c:	2d00      	cmp	r5, #0
    3b5e:	dc00      	bgt.n	3b62 <__aeabi_dadd+0x42>
    3b60:	e0f6      	b.n	3d50 <__aeabi_dadd+0x230>
    3b62:	2800      	cmp	r0, #0
    3b64:	d10f      	bne.n	3b86 <__aeabi_dadd+0x66>
    3b66:	4313      	orrs	r3, r2
    3b68:	d100      	bne.n	3b6c <__aeabi_dadd+0x4c>
    3b6a:	e0db      	b.n	3d24 <__aeabi_dadd+0x204>
    3b6c:	1e6b      	subs	r3, r5, #1
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d000      	beq.n	3b74 <__aeabi_dadd+0x54>
    3b72:	e137      	b.n	3de4 <__aeabi_dadd+0x2c4>
    3b74:	1aba      	subs	r2, r7, r2
    3b76:	4297      	cmp	r7, r2
    3b78:	41bf      	sbcs	r7, r7
    3b7a:	1a64      	subs	r4, r4, r1
    3b7c:	427f      	negs	r7, r7
    3b7e:	1be4      	subs	r4, r4, r7
    3b80:	2601      	movs	r6, #1
    3b82:	0017      	movs	r7, r2
    3b84:	e024      	b.n	3bd0 <__aeabi_dadd+0xb0>
    3b86:	4bc6      	ldr	r3, [pc, #792]	; (3ea0 <__aeabi_dadd+0x380>)
    3b88:	429e      	cmp	r6, r3
    3b8a:	d04d      	beq.n	3c28 <__aeabi_dadd+0x108>
    3b8c:	2380      	movs	r3, #128	; 0x80
    3b8e:	041b      	lsls	r3, r3, #16
    3b90:	4319      	orrs	r1, r3
    3b92:	2d38      	cmp	r5, #56	; 0x38
    3b94:	dd00      	ble.n	3b98 <__aeabi_dadd+0x78>
    3b96:	e107      	b.n	3da8 <__aeabi_dadd+0x288>
    3b98:	2d1f      	cmp	r5, #31
    3b9a:	dd00      	ble.n	3b9e <__aeabi_dadd+0x7e>
    3b9c:	e138      	b.n	3e10 <__aeabi_dadd+0x2f0>
    3b9e:	2020      	movs	r0, #32
    3ba0:	1b43      	subs	r3, r0, r5
    3ba2:	469a      	mov	sl, r3
    3ba4:	000b      	movs	r3, r1
    3ba6:	4650      	mov	r0, sl
    3ba8:	4083      	lsls	r3, r0
    3baa:	4699      	mov	r9, r3
    3bac:	0013      	movs	r3, r2
    3bae:	4648      	mov	r0, r9
    3bb0:	40eb      	lsrs	r3, r5
    3bb2:	4318      	orrs	r0, r3
    3bb4:	0003      	movs	r3, r0
    3bb6:	4650      	mov	r0, sl
    3bb8:	4082      	lsls	r2, r0
    3bba:	1e50      	subs	r0, r2, #1
    3bbc:	4182      	sbcs	r2, r0
    3bbe:	40e9      	lsrs	r1, r5
    3bc0:	431a      	orrs	r2, r3
    3bc2:	1aba      	subs	r2, r7, r2
    3bc4:	1a61      	subs	r1, r4, r1
    3bc6:	4297      	cmp	r7, r2
    3bc8:	41a4      	sbcs	r4, r4
    3bca:	0017      	movs	r7, r2
    3bcc:	4264      	negs	r4, r4
    3bce:	1b0c      	subs	r4, r1, r4
    3bd0:	0223      	lsls	r3, r4, #8
    3bd2:	d562      	bpl.n	3c9a <__aeabi_dadd+0x17a>
    3bd4:	0264      	lsls	r4, r4, #9
    3bd6:	0a65      	lsrs	r5, r4, #9
    3bd8:	2d00      	cmp	r5, #0
    3bda:	d100      	bne.n	3bde <__aeabi_dadd+0xbe>
    3bdc:	e0df      	b.n	3d9e <__aeabi_dadd+0x27e>
    3bde:	0028      	movs	r0, r5
    3be0:	f001 fd26 	bl	5630 <__clzsi2>
    3be4:	0003      	movs	r3, r0
    3be6:	3b08      	subs	r3, #8
    3be8:	2b1f      	cmp	r3, #31
    3bea:	dd00      	ble.n	3bee <__aeabi_dadd+0xce>
    3bec:	e0d2      	b.n	3d94 <__aeabi_dadd+0x274>
    3bee:	2220      	movs	r2, #32
    3bf0:	003c      	movs	r4, r7
    3bf2:	1ad2      	subs	r2, r2, r3
    3bf4:	409d      	lsls	r5, r3
    3bf6:	40d4      	lsrs	r4, r2
    3bf8:	409f      	lsls	r7, r3
    3bfa:	4325      	orrs	r5, r4
    3bfc:	429e      	cmp	r6, r3
    3bfe:	dd00      	ble.n	3c02 <__aeabi_dadd+0xe2>
    3c00:	e0c4      	b.n	3d8c <__aeabi_dadd+0x26c>
    3c02:	1b9e      	subs	r6, r3, r6
    3c04:	1c73      	adds	r3, r6, #1
    3c06:	2b1f      	cmp	r3, #31
    3c08:	dd00      	ble.n	3c0c <__aeabi_dadd+0xec>
    3c0a:	e0f1      	b.n	3df0 <__aeabi_dadd+0x2d0>
    3c0c:	2220      	movs	r2, #32
    3c0e:	0038      	movs	r0, r7
    3c10:	0029      	movs	r1, r5
    3c12:	1ad2      	subs	r2, r2, r3
    3c14:	40d8      	lsrs	r0, r3
    3c16:	4091      	lsls	r1, r2
    3c18:	4097      	lsls	r7, r2
    3c1a:	002c      	movs	r4, r5
    3c1c:	4301      	orrs	r1, r0
    3c1e:	1e78      	subs	r0, r7, #1
    3c20:	4187      	sbcs	r7, r0
    3c22:	40dc      	lsrs	r4, r3
    3c24:	2600      	movs	r6, #0
    3c26:	430f      	orrs	r7, r1
    3c28:	077b      	lsls	r3, r7, #29
    3c2a:	d009      	beq.n	3c40 <__aeabi_dadd+0x120>
    3c2c:	230f      	movs	r3, #15
    3c2e:	403b      	ands	r3, r7
    3c30:	2b04      	cmp	r3, #4
    3c32:	d005      	beq.n	3c40 <__aeabi_dadd+0x120>
    3c34:	1d3b      	adds	r3, r7, #4
    3c36:	42bb      	cmp	r3, r7
    3c38:	41bf      	sbcs	r7, r7
    3c3a:	427f      	negs	r7, r7
    3c3c:	19e4      	adds	r4, r4, r7
    3c3e:	001f      	movs	r7, r3
    3c40:	0223      	lsls	r3, r4, #8
    3c42:	d52c      	bpl.n	3c9e <__aeabi_dadd+0x17e>
    3c44:	4b96      	ldr	r3, [pc, #600]	; (3ea0 <__aeabi_dadd+0x380>)
    3c46:	3601      	adds	r6, #1
    3c48:	429e      	cmp	r6, r3
    3c4a:	d100      	bne.n	3c4e <__aeabi_dadd+0x12e>
    3c4c:	e09a      	b.n	3d84 <__aeabi_dadd+0x264>
    3c4e:	4645      	mov	r5, r8
    3c50:	4b94      	ldr	r3, [pc, #592]	; (3ea4 <__aeabi_dadd+0x384>)
    3c52:	08ff      	lsrs	r7, r7, #3
    3c54:	401c      	ands	r4, r3
    3c56:	0760      	lsls	r0, r4, #29
    3c58:	0576      	lsls	r6, r6, #21
    3c5a:	0264      	lsls	r4, r4, #9
    3c5c:	4307      	orrs	r7, r0
    3c5e:	0b24      	lsrs	r4, r4, #12
    3c60:	0d76      	lsrs	r6, r6, #21
    3c62:	2100      	movs	r1, #0
    3c64:	0324      	lsls	r4, r4, #12
    3c66:	0b23      	lsrs	r3, r4, #12
    3c68:	0d0c      	lsrs	r4, r1, #20
    3c6a:	4a8f      	ldr	r2, [pc, #572]	; (3ea8 <__aeabi_dadd+0x388>)
    3c6c:	0524      	lsls	r4, r4, #20
    3c6e:	431c      	orrs	r4, r3
    3c70:	4014      	ands	r4, r2
    3c72:	0533      	lsls	r3, r6, #20
    3c74:	4323      	orrs	r3, r4
    3c76:	005b      	lsls	r3, r3, #1
    3c78:	07ed      	lsls	r5, r5, #31
    3c7a:	085b      	lsrs	r3, r3, #1
    3c7c:	432b      	orrs	r3, r5
    3c7e:	0038      	movs	r0, r7
    3c80:	0019      	movs	r1, r3
    3c82:	bc3c      	pop	{r2, r3, r4, r5}
    3c84:	4690      	mov	r8, r2
    3c86:	4699      	mov	r9, r3
    3c88:	46a2      	mov	sl, r4
    3c8a:	46ab      	mov	fp, r5
    3c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c8e:	4664      	mov	r4, ip
    3c90:	4304      	orrs	r4, r0
    3c92:	d100      	bne.n	3c96 <__aeabi_dadd+0x176>
    3c94:	e211      	b.n	40ba <__aeabi_dadd+0x59a>
    3c96:	0004      	movs	r4, r0
    3c98:	4667      	mov	r7, ip
    3c9a:	077b      	lsls	r3, r7, #29
    3c9c:	d1c6      	bne.n	3c2c <__aeabi_dadd+0x10c>
    3c9e:	4645      	mov	r5, r8
    3ca0:	0760      	lsls	r0, r4, #29
    3ca2:	08ff      	lsrs	r7, r7, #3
    3ca4:	4307      	orrs	r7, r0
    3ca6:	08e4      	lsrs	r4, r4, #3
    3ca8:	4b7d      	ldr	r3, [pc, #500]	; (3ea0 <__aeabi_dadd+0x380>)
    3caa:	429e      	cmp	r6, r3
    3cac:	d030      	beq.n	3d10 <__aeabi_dadd+0x1f0>
    3cae:	0324      	lsls	r4, r4, #12
    3cb0:	0576      	lsls	r6, r6, #21
    3cb2:	0b24      	lsrs	r4, r4, #12
    3cb4:	0d76      	lsrs	r6, r6, #21
    3cb6:	e7d4      	b.n	3c62 <__aeabi_dadd+0x142>
    3cb8:	1a33      	subs	r3, r6, r0
    3cba:	469a      	mov	sl, r3
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	dd78      	ble.n	3db2 <__aeabi_dadd+0x292>
    3cc0:	2800      	cmp	r0, #0
    3cc2:	d031      	beq.n	3d28 <__aeabi_dadd+0x208>
    3cc4:	4876      	ldr	r0, [pc, #472]	; (3ea0 <__aeabi_dadd+0x380>)
    3cc6:	4286      	cmp	r6, r0
    3cc8:	d0ae      	beq.n	3c28 <__aeabi_dadd+0x108>
    3cca:	2080      	movs	r0, #128	; 0x80
    3ccc:	0400      	lsls	r0, r0, #16
    3cce:	4301      	orrs	r1, r0
    3cd0:	4653      	mov	r3, sl
    3cd2:	2b38      	cmp	r3, #56	; 0x38
    3cd4:	dc00      	bgt.n	3cd8 <__aeabi_dadd+0x1b8>
    3cd6:	e0e9      	b.n	3eac <__aeabi_dadd+0x38c>
    3cd8:	430a      	orrs	r2, r1
    3cda:	1e51      	subs	r1, r2, #1
    3cdc:	418a      	sbcs	r2, r1
    3cde:	2100      	movs	r1, #0
    3ce0:	19d2      	adds	r2, r2, r7
    3ce2:	42ba      	cmp	r2, r7
    3ce4:	41bf      	sbcs	r7, r7
    3ce6:	1909      	adds	r1, r1, r4
    3ce8:	427c      	negs	r4, r7
    3cea:	0017      	movs	r7, r2
    3cec:	190c      	adds	r4, r1, r4
    3cee:	0223      	lsls	r3, r4, #8
    3cf0:	d5d3      	bpl.n	3c9a <__aeabi_dadd+0x17a>
    3cf2:	4b6b      	ldr	r3, [pc, #428]	; (3ea0 <__aeabi_dadd+0x380>)
    3cf4:	3601      	adds	r6, #1
    3cf6:	429e      	cmp	r6, r3
    3cf8:	d100      	bne.n	3cfc <__aeabi_dadd+0x1dc>
    3cfa:	e13a      	b.n	3f72 <__aeabi_dadd+0x452>
    3cfc:	2001      	movs	r0, #1
    3cfe:	4b69      	ldr	r3, [pc, #420]	; (3ea4 <__aeabi_dadd+0x384>)
    3d00:	401c      	ands	r4, r3
    3d02:	087b      	lsrs	r3, r7, #1
    3d04:	4007      	ands	r7, r0
    3d06:	431f      	orrs	r7, r3
    3d08:	07e0      	lsls	r0, r4, #31
    3d0a:	4307      	orrs	r7, r0
    3d0c:	0864      	lsrs	r4, r4, #1
    3d0e:	e78b      	b.n	3c28 <__aeabi_dadd+0x108>
    3d10:	0023      	movs	r3, r4
    3d12:	433b      	orrs	r3, r7
    3d14:	d100      	bne.n	3d18 <__aeabi_dadd+0x1f8>
    3d16:	e1cb      	b.n	40b0 <__aeabi_dadd+0x590>
    3d18:	2280      	movs	r2, #128	; 0x80
    3d1a:	0312      	lsls	r2, r2, #12
    3d1c:	4314      	orrs	r4, r2
    3d1e:	0324      	lsls	r4, r4, #12
    3d20:	0b24      	lsrs	r4, r4, #12
    3d22:	e79e      	b.n	3c62 <__aeabi_dadd+0x142>
    3d24:	002e      	movs	r6, r5
    3d26:	e77f      	b.n	3c28 <__aeabi_dadd+0x108>
    3d28:	0008      	movs	r0, r1
    3d2a:	4310      	orrs	r0, r2
    3d2c:	d100      	bne.n	3d30 <__aeabi_dadd+0x210>
    3d2e:	e0b4      	b.n	3e9a <__aeabi_dadd+0x37a>
    3d30:	1e58      	subs	r0, r3, #1
    3d32:	2800      	cmp	r0, #0
    3d34:	d000      	beq.n	3d38 <__aeabi_dadd+0x218>
    3d36:	e0de      	b.n	3ef6 <__aeabi_dadd+0x3d6>
    3d38:	18ba      	adds	r2, r7, r2
    3d3a:	42ba      	cmp	r2, r7
    3d3c:	419b      	sbcs	r3, r3
    3d3e:	1864      	adds	r4, r4, r1
    3d40:	425b      	negs	r3, r3
    3d42:	18e4      	adds	r4, r4, r3
    3d44:	0017      	movs	r7, r2
    3d46:	2601      	movs	r6, #1
    3d48:	0223      	lsls	r3, r4, #8
    3d4a:	d5a6      	bpl.n	3c9a <__aeabi_dadd+0x17a>
    3d4c:	2602      	movs	r6, #2
    3d4e:	e7d5      	b.n	3cfc <__aeabi_dadd+0x1dc>
    3d50:	2d00      	cmp	r5, #0
    3d52:	d16e      	bne.n	3e32 <__aeabi_dadd+0x312>
    3d54:	1c70      	adds	r0, r6, #1
    3d56:	0540      	lsls	r0, r0, #21
    3d58:	0d40      	lsrs	r0, r0, #21
    3d5a:	2801      	cmp	r0, #1
    3d5c:	dc00      	bgt.n	3d60 <__aeabi_dadd+0x240>
    3d5e:	e0f9      	b.n	3f54 <__aeabi_dadd+0x434>
    3d60:	1ab8      	subs	r0, r7, r2
    3d62:	4684      	mov	ip, r0
    3d64:	4287      	cmp	r7, r0
    3d66:	4180      	sbcs	r0, r0
    3d68:	1ae5      	subs	r5, r4, r3
    3d6a:	4240      	negs	r0, r0
    3d6c:	1a2d      	subs	r5, r5, r0
    3d6e:	0228      	lsls	r0, r5, #8
    3d70:	d400      	bmi.n	3d74 <__aeabi_dadd+0x254>
    3d72:	e089      	b.n	3e88 <__aeabi_dadd+0x368>
    3d74:	1bd7      	subs	r7, r2, r7
    3d76:	42ba      	cmp	r2, r7
    3d78:	4192      	sbcs	r2, r2
    3d7a:	1b1c      	subs	r4, r3, r4
    3d7c:	4252      	negs	r2, r2
    3d7e:	1aa5      	subs	r5, r4, r2
    3d80:	46d8      	mov	r8, fp
    3d82:	e729      	b.n	3bd8 <__aeabi_dadd+0xb8>
    3d84:	4645      	mov	r5, r8
    3d86:	2400      	movs	r4, #0
    3d88:	2700      	movs	r7, #0
    3d8a:	e76a      	b.n	3c62 <__aeabi_dadd+0x142>
    3d8c:	4c45      	ldr	r4, [pc, #276]	; (3ea4 <__aeabi_dadd+0x384>)
    3d8e:	1af6      	subs	r6, r6, r3
    3d90:	402c      	ands	r4, r5
    3d92:	e749      	b.n	3c28 <__aeabi_dadd+0x108>
    3d94:	003d      	movs	r5, r7
    3d96:	3828      	subs	r0, #40	; 0x28
    3d98:	4085      	lsls	r5, r0
    3d9a:	2700      	movs	r7, #0
    3d9c:	e72e      	b.n	3bfc <__aeabi_dadd+0xdc>
    3d9e:	0038      	movs	r0, r7
    3da0:	f001 fc46 	bl	5630 <__clzsi2>
    3da4:	3020      	adds	r0, #32
    3da6:	e71d      	b.n	3be4 <__aeabi_dadd+0xc4>
    3da8:	430a      	orrs	r2, r1
    3daa:	1e51      	subs	r1, r2, #1
    3dac:	418a      	sbcs	r2, r1
    3dae:	2100      	movs	r1, #0
    3db0:	e707      	b.n	3bc2 <__aeabi_dadd+0xa2>
    3db2:	2b00      	cmp	r3, #0
    3db4:	d000      	beq.n	3db8 <__aeabi_dadd+0x298>
    3db6:	e0f3      	b.n	3fa0 <__aeabi_dadd+0x480>
    3db8:	1c70      	adds	r0, r6, #1
    3dba:	0543      	lsls	r3, r0, #21
    3dbc:	0d5b      	lsrs	r3, r3, #21
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	dc00      	bgt.n	3dc4 <__aeabi_dadd+0x2a4>
    3dc2:	e0ad      	b.n	3f20 <__aeabi_dadd+0x400>
    3dc4:	4b36      	ldr	r3, [pc, #216]	; (3ea0 <__aeabi_dadd+0x380>)
    3dc6:	4298      	cmp	r0, r3
    3dc8:	d100      	bne.n	3dcc <__aeabi_dadd+0x2ac>
    3dca:	e0d1      	b.n	3f70 <__aeabi_dadd+0x450>
    3dcc:	18ba      	adds	r2, r7, r2
    3dce:	42ba      	cmp	r2, r7
    3dd0:	41bf      	sbcs	r7, r7
    3dd2:	1864      	adds	r4, r4, r1
    3dd4:	427f      	negs	r7, r7
    3dd6:	19e4      	adds	r4, r4, r7
    3dd8:	07e7      	lsls	r7, r4, #31
    3dda:	0852      	lsrs	r2, r2, #1
    3ddc:	4317      	orrs	r7, r2
    3dde:	0864      	lsrs	r4, r4, #1
    3de0:	0006      	movs	r6, r0
    3de2:	e721      	b.n	3c28 <__aeabi_dadd+0x108>
    3de4:	482e      	ldr	r0, [pc, #184]	; (3ea0 <__aeabi_dadd+0x380>)
    3de6:	4285      	cmp	r5, r0
    3de8:	d100      	bne.n	3dec <__aeabi_dadd+0x2cc>
    3dea:	e093      	b.n	3f14 <__aeabi_dadd+0x3f4>
    3dec:	001d      	movs	r5, r3
    3dee:	e6d0      	b.n	3b92 <__aeabi_dadd+0x72>
    3df0:	0029      	movs	r1, r5
    3df2:	3e1f      	subs	r6, #31
    3df4:	40f1      	lsrs	r1, r6
    3df6:	2b20      	cmp	r3, #32
    3df8:	d100      	bne.n	3dfc <__aeabi_dadd+0x2dc>
    3dfa:	e08d      	b.n	3f18 <__aeabi_dadd+0x3f8>
    3dfc:	2240      	movs	r2, #64	; 0x40
    3dfe:	1ad3      	subs	r3, r2, r3
    3e00:	409d      	lsls	r5, r3
    3e02:	432f      	orrs	r7, r5
    3e04:	1e7d      	subs	r5, r7, #1
    3e06:	41af      	sbcs	r7, r5
    3e08:	2400      	movs	r4, #0
    3e0a:	430f      	orrs	r7, r1
    3e0c:	2600      	movs	r6, #0
    3e0e:	e744      	b.n	3c9a <__aeabi_dadd+0x17a>
    3e10:	002b      	movs	r3, r5
    3e12:	0008      	movs	r0, r1
    3e14:	3b20      	subs	r3, #32
    3e16:	40d8      	lsrs	r0, r3
    3e18:	0003      	movs	r3, r0
    3e1a:	2d20      	cmp	r5, #32
    3e1c:	d100      	bne.n	3e20 <__aeabi_dadd+0x300>
    3e1e:	e07d      	b.n	3f1c <__aeabi_dadd+0x3fc>
    3e20:	2040      	movs	r0, #64	; 0x40
    3e22:	1b45      	subs	r5, r0, r5
    3e24:	40a9      	lsls	r1, r5
    3e26:	430a      	orrs	r2, r1
    3e28:	1e51      	subs	r1, r2, #1
    3e2a:	418a      	sbcs	r2, r1
    3e2c:	2100      	movs	r1, #0
    3e2e:	431a      	orrs	r2, r3
    3e30:	e6c7      	b.n	3bc2 <__aeabi_dadd+0xa2>
    3e32:	2e00      	cmp	r6, #0
    3e34:	d050      	beq.n	3ed8 <__aeabi_dadd+0x3b8>
    3e36:	4e1a      	ldr	r6, [pc, #104]	; (3ea0 <__aeabi_dadd+0x380>)
    3e38:	42b0      	cmp	r0, r6
    3e3a:	d057      	beq.n	3eec <__aeabi_dadd+0x3cc>
    3e3c:	2680      	movs	r6, #128	; 0x80
    3e3e:	426b      	negs	r3, r5
    3e40:	4699      	mov	r9, r3
    3e42:	0436      	lsls	r6, r6, #16
    3e44:	4334      	orrs	r4, r6
    3e46:	464b      	mov	r3, r9
    3e48:	2b38      	cmp	r3, #56	; 0x38
    3e4a:	dd00      	ble.n	3e4e <__aeabi_dadd+0x32e>
    3e4c:	e0d6      	b.n	3ffc <__aeabi_dadd+0x4dc>
    3e4e:	2b1f      	cmp	r3, #31
    3e50:	dd00      	ble.n	3e54 <__aeabi_dadd+0x334>
    3e52:	e135      	b.n	40c0 <__aeabi_dadd+0x5a0>
    3e54:	2620      	movs	r6, #32
    3e56:	1af5      	subs	r5, r6, r3
    3e58:	0026      	movs	r6, r4
    3e5a:	40ae      	lsls	r6, r5
    3e5c:	46b2      	mov	sl, r6
    3e5e:	003e      	movs	r6, r7
    3e60:	40de      	lsrs	r6, r3
    3e62:	46ac      	mov	ip, r5
    3e64:	0035      	movs	r5, r6
    3e66:	4656      	mov	r6, sl
    3e68:	432e      	orrs	r6, r5
    3e6a:	4665      	mov	r5, ip
    3e6c:	40af      	lsls	r7, r5
    3e6e:	1e7d      	subs	r5, r7, #1
    3e70:	41af      	sbcs	r7, r5
    3e72:	40dc      	lsrs	r4, r3
    3e74:	4337      	orrs	r7, r6
    3e76:	1bd7      	subs	r7, r2, r7
    3e78:	42ba      	cmp	r2, r7
    3e7a:	4192      	sbcs	r2, r2
    3e7c:	1b0c      	subs	r4, r1, r4
    3e7e:	4252      	negs	r2, r2
    3e80:	1aa4      	subs	r4, r4, r2
    3e82:	0006      	movs	r6, r0
    3e84:	46d8      	mov	r8, fp
    3e86:	e6a3      	b.n	3bd0 <__aeabi_dadd+0xb0>
    3e88:	4664      	mov	r4, ip
    3e8a:	4667      	mov	r7, ip
    3e8c:	432c      	orrs	r4, r5
    3e8e:	d000      	beq.n	3e92 <__aeabi_dadd+0x372>
    3e90:	e6a2      	b.n	3bd8 <__aeabi_dadd+0xb8>
    3e92:	2500      	movs	r5, #0
    3e94:	2600      	movs	r6, #0
    3e96:	2700      	movs	r7, #0
    3e98:	e706      	b.n	3ca8 <__aeabi_dadd+0x188>
    3e9a:	001e      	movs	r6, r3
    3e9c:	e6c4      	b.n	3c28 <__aeabi_dadd+0x108>
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	000007ff 	.word	0x000007ff
    3ea4:	ff7fffff 	.word	0xff7fffff
    3ea8:	800fffff 	.word	0x800fffff
    3eac:	2b1f      	cmp	r3, #31
    3eae:	dc63      	bgt.n	3f78 <__aeabi_dadd+0x458>
    3eb0:	2020      	movs	r0, #32
    3eb2:	1ac3      	subs	r3, r0, r3
    3eb4:	0008      	movs	r0, r1
    3eb6:	4098      	lsls	r0, r3
    3eb8:	469c      	mov	ip, r3
    3eba:	4683      	mov	fp, r0
    3ebc:	4653      	mov	r3, sl
    3ebe:	0010      	movs	r0, r2
    3ec0:	40d8      	lsrs	r0, r3
    3ec2:	0003      	movs	r3, r0
    3ec4:	4658      	mov	r0, fp
    3ec6:	4318      	orrs	r0, r3
    3ec8:	4663      	mov	r3, ip
    3eca:	409a      	lsls	r2, r3
    3ecc:	1e53      	subs	r3, r2, #1
    3ece:	419a      	sbcs	r2, r3
    3ed0:	4653      	mov	r3, sl
    3ed2:	4302      	orrs	r2, r0
    3ed4:	40d9      	lsrs	r1, r3
    3ed6:	e703      	b.n	3ce0 <__aeabi_dadd+0x1c0>
    3ed8:	0026      	movs	r6, r4
    3eda:	433e      	orrs	r6, r7
    3edc:	d006      	beq.n	3eec <__aeabi_dadd+0x3cc>
    3ede:	43eb      	mvns	r3, r5
    3ee0:	4699      	mov	r9, r3
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d0c7      	beq.n	3e76 <__aeabi_dadd+0x356>
    3ee6:	4e94      	ldr	r6, [pc, #592]	; (4138 <__aeabi_dadd+0x618>)
    3ee8:	42b0      	cmp	r0, r6
    3eea:	d1ac      	bne.n	3e46 <__aeabi_dadd+0x326>
    3eec:	000c      	movs	r4, r1
    3eee:	0017      	movs	r7, r2
    3ef0:	0006      	movs	r6, r0
    3ef2:	46d8      	mov	r8, fp
    3ef4:	e698      	b.n	3c28 <__aeabi_dadd+0x108>
    3ef6:	4b90      	ldr	r3, [pc, #576]	; (4138 <__aeabi_dadd+0x618>)
    3ef8:	459a      	cmp	sl, r3
    3efa:	d00b      	beq.n	3f14 <__aeabi_dadd+0x3f4>
    3efc:	4682      	mov	sl, r0
    3efe:	e6e7      	b.n	3cd0 <__aeabi_dadd+0x1b0>
    3f00:	2800      	cmp	r0, #0
    3f02:	d000      	beq.n	3f06 <__aeabi_dadd+0x3e6>
    3f04:	e09e      	b.n	4044 <__aeabi_dadd+0x524>
    3f06:	0018      	movs	r0, r3
    3f08:	4310      	orrs	r0, r2
    3f0a:	d100      	bne.n	3f0e <__aeabi_dadd+0x3ee>
    3f0c:	e0e9      	b.n	40e2 <__aeabi_dadd+0x5c2>
    3f0e:	001c      	movs	r4, r3
    3f10:	0017      	movs	r7, r2
    3f12:	46d8      	mov	r8, fp
    3f14:	4e88      	ldr	r6, [pc, #544]	; (4138 <__aeabi_dadd+0x618>)
    3f16:	e687      	b.n	3c28 <__aeabi_dadd+0x108>
    3f18:	2500      	movs	r5, #0
    3f1a:	e772      	b.n	3e02 <__aeabi_dadd+0x2e2>
    3f1c:	2100      	movs	r1, #0
    3f1e:	e782      	b.n	3e26 <__aeabi_dadd+0x306>
    3f20:	0023      	movs	r3, r4
    3f22:	433b      	orrs	r3, r7
    3f24:	2e00      	cmp	r6, #0
    3f26:	d000      	beq.n	3f2a <__aeabi_dadd+0x40a>
    3f28:	e0ab      	b.n	4082 <__aeabi_dadd+0x562>
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d100      	bne.n	3f30 <__aeabi_dadd+0x410>
    3f2e:	e0e7      	b.n	4100 <__aeabi_dadd+0x5e0>
    3f30:	000b      	movs	r3, r1
    3f32:	4313      	orrs	r3, r2
    3f34:	d100      	bne.n	3f38 <__aeabi_dadd+0x418>
    3f36:	e677      	b.n	3c28 <__aeabi_dadd+0x108>
    3f38:	18ba      	adds	r2, r7, r2
    3f3a:	42ba      	cmp	r2, r7
    3f3c:	41bf      	sbcs	r7, r7
    3f3e:	1864      	adds	r4, r4, r1
    3f40:	427f      	negs	r7, r7
    3f42:	19e4      	adds	r4, r4, r7
    3f44:	0223      	lsls	r3, r4, #8
    3f46:	d400      	bmi.n	3f4a <__aeabi_dadd+0x42a>
    3f48:	e0f2      	b.n	4130 <__aeabi_dadd+0x610>
    3f4a:	4b7c      	ldr	r3, [pc, #496]	; (413c <__aeabi_dadd+0x61c>)
    3f4c:	0017      	movs	r7, r2
    3f4e:	401c      	ands	r4, r3
    3f50:	0006      	movs	r6, r0
    3f52:	e669      	b.n	3c28 <__aeabi_dadd+0x108>
    3f54:	0020      	movs	r0, r4
    3f56:	4338      	orrs	r0, r7
    3f58:	2e00      	cmp	r6, #0
    3f5a:	d1d1      	bne.n	3f00 <__aeabi_dadd+0x3e0>
    3f5c:	2800      	cmp	r0, #0
    3f5e:	d15b      	bne.n	4018 <__aeabi_dadd+0x4f8>
    3f60:	001c      	movs	r4, r3
    3f62:	4314      	orrs	r4, r2
    3f64:	d100      	bne.n	3f68 <__aeabi_dadd+0x448>
    3f66:	e0a8      	b.n	40ba <__aeabi_dadd+0x59a>
    3f68:	001c      	movs	r4, r3
    3f6a:	0017      	movs	r7, r2
    3f6c:	46d8      	mov	r8, fp
    3f6e:	e65b      	b.n	3c28 <__aeabi_dadd+0x108>
    3f70:	0006      	movs	r6, r0
    3f72:	2400      	movs	r4, #0
    3f74:	2700      	movs	r7, #0
    3f76:	e697      	b.n	3ca8 <__aeabi_dadd+0x188>
    3f78:	4650      	mov	r0, sl
    3f7a:	000b      	movs	r3, r1
    3f7c:	3820      	subs	r0, #32
    3f7e:	40c3      	lsrs	r3, r0
    3f80:	4699      	mov	r9, r3
    3f82:	4653      	mov	r3, sl
    3f84:	2b20      	cmp	r3, #32
    3f86:	d100      	bne.n	3f8a <__aeabi_dadd+0x46a>
    3f88:	e095      	b.n	40b6 <__aeabi_dadd+0x596>
    3f8a:	2340      	movs	r3, #64	; 0x40
    3f8c:	4650      	mov	r0, sl
    3f8e:	1a1b      	subs	r3, r3, r0
    3f90:	4099      	lsls	r1, r3
    3f92:	430a      	orrs	r2, r1
    3f94:	1e51      	subs	r1, r2, #1
    3f96:	418a      	sbcs	r2, r1
    3f98:	464b      	mov	r3, r9
    3f9a:	2100      	movs	r1, #0
    3f9c:	431a      	orrs	r2, r3
    3f9e:	e69f      	b.n	3ce0 <__aeabi_dadd+0x1c0>
    3fa0:	2e00      	cmp	r6, #0
    3fa2:	d130      	bne.n	4006 <__aeabi_dadd+0x4e6>
    3fa4:	0026      	movs	r6, r4
    3fa6:	433e      	orrs	r6, r7
    3fa8:	d067      	beq.n	407a <__aeabi_dadd+0x55a>
    3faa:	43db      	mvns	r3, r3
    3fac:	469a      	mov	sl, r3
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d01c      	beq.n	3fec <__aeabi_dadd+0x4cc>
    3fb2:	4e61      	ldr	r6, [pc, #388]	; (4138 <__aeabi_dadd+0x618>)
    3fb4:	42b0      	cmp	r0, r6
    3fb6:	d060      	beq.n	407a <__aeabi_dadd+0x55a>
    3fb8:	4653      	mov	r3, sl
    3fba:	2b38      	cmp	r3, #56	; 0x38
    3fbc:	dd00      	ble.n	3fc0 <__aeabi_dadd+0x4a0>
    3fbe:	e096      	b.n	40ee <__aeabi_dadd+0x5ce>
    3fc0:	2b1f      	cmp	r3, #31
    3fc2:	dd00      	ble.n	3fc6 <__aeabi_dadd+0x4a6>
    3fc4:	e09f      	b.n	4106 <__aeabi_dadd+0x5e6>
    3fc6:	2620      	movs	r6, #32
    3fc8:	1af3      	subs	r3, r6, r3
    3fca:	0026      	movs	r6, r4
    3fcc:	409e      	lsls	r6, r3
    3fce:	469c      	mov	ip, r3
    3fd0:	46b3      	mov	fp, r6
    3fd2:	4653      	mov	r3, sl
    3fd4:	003e      	movs	r6, r7
    3fd6:	40de      	lsrs	r6, r3
    3fd8:	0033      	movs	r3, r6
    3fda:	465e      	mov	r6, fp
    3fdc:	431e      	orrs	r6, r3
    3fde:	4663      	mov	r3, ip
    3fe0:	409f      	lsls	r7, r3
    3fe2:	1e7b      	subs	r3, r7, #1
    3fe4:	419f      	sbcs	r7, r3
    3fe6:	4653      	mov	r3, sl
    3fe8:	40dc      	lsrs	r4, r3
    3fea:	4337      	orrs	r7, r6
    3fec:	18bf      	adds	r7, r7, r2
    3fee:	4297      	cmp	r7, r2
    3ff0:	4192      	sbcs	r2, r2
    3ff2:	1864      	adds	r4, r4, r1
    3ff4:	4252      	negs	r2, r2
    3ff6:	18a4      	adds	r4, r4, r2
    3ff8:	0006      	movs	r6, r0
    3ffa:	e678      	b.n	3cee <__aeabi_dadd+0x1ce>
    3ffc:	4327      	orrs	r7, r4
    3ffe:	1e7c      	subs	r4, r7, #1
    4000:	41a7      	sbcs	r7, r4
    4002:	2400      	movs	r4, #0
    4004:	e737      	b.n	3e76 <__aeabi_dadd+0x356>
    4006:	4e4c      	ldr	r6, [pc, #304]	; (4138 <__aeabi_dadd+0x618>)
    4008:	42b0      	cmp	r0, r6
    400a:	d036      	beq.n	407a <__aeabi_dadd+0x55a>
    400c:	2680      	movs	r6, #128	; 0x80
    400e:	425b      	negs	r3, r3
    4010:	0436      	lsls	r6, r6, #16
    4012:	469a      	mov	sl, r3
    4014:	4334      	orrs	r4, r6
    4016:	e7cf      	b.n	3fb8 <__aeabi_dadd+0x498>
    4018:	0018      	movs	r0, r3
    401a:	4310      	orrs	r0, r2
    401c:	d100      	bne.n	4020 <__aeabi_dadd+0x500>
    401e:	e603      	b.n	3c28 <__aeabi_dadd+0x108>
    4020:	1ab8      	subs	r0, r7, r2
    4022:	4684      	mov	ip, r0
    4024:	4567      	cmp	r7, ip
    4026:	41ad      	sbcs	r5, r5
    4028:	1ae0      	subs	r0, r4, r3
    402a:	426d      	negs	r5, r5
    402c:	1b40      	subs	r0, r0, r5
    402e:	0205      	lsls	r5, r0, #8
    4030:	d400      	bmi.n	4034 <__aeabi_dadd+0x514>
    4032:	e62c      	b.n	3c8e <__aeabi_dadd+0x16e>
    4034:	1bd7      	subs	r7, r2, r7
    4036:	42ba      	cmp	r2, r7
    4038:	4192      	sbcs	r2, r2
    403a:	1b1c      	subs	r4, r3, r4
    403c:	4252      	negs	r2, r2
    403e:	1aa4      	subs	r4, r4, r2
    4040:	46d8      	mov	r8, fp
    4042:	e5f1      	b.n	3c28 <__aeabi_dadd+0x108>
    4044:	0018      	movs	r0, r3
    4046:	4310      	orrs	r0, r2
    4048:	d100      	bne.n	404c <__aeabi_dadd+0x52c>
    404a:	e763      	b.n	3f14 <__aeabi_dadd+0x3f4>
    404c:	08f8      	lsrs	r0, r7, #3
    404e:	0767      	lsls	r7, r4, #29
    4050:	4307      	orrs	r7, r0
    4052:	2080      	movs	r0, #128	; 0x80
    4054:	08e4      	lsrs	r4, r4, #3
    4056:	0300      	lsls	r0, r0, #12
    4058:	4204      	tst	r4, r0
    405a:	d008      	beq.n	406e <__aeabi_dadd+0x54e>
    405c:	08dd      	lsrs	r5, r3, #3
    405e:	4205      	tst	r5, r0
    4060:	d105      	bne.n	406e <__aeabi_dadd+0x54e>
    4062:	08d2      	lsrs	r2, r2, #3
    4064:	0759      	lsls	r1, r3, #29
    4066:	4311      	orrs	r1, r2
    4068:	000f      	movs	r7, r1
    406a:	002c      	movs	r4, r5
    406c:	46d8      	mov	r8, fp
    406e:	0f7b      	lsrs	r3, r7, #29
    4070:	00e4      	lsls	r4, r4, #3
    4072:	431c      	orrs	r4, r3
    4074:	00ff      	lsls	r7, r7, #3
    4076:	4e30      	ldr	r6, [pc, #192]	; (4138 <__aeabi_dadd+0x618>)
    4078:	e5d6      	b.n	3c28 <__aeabi_dadd+0x108>
    407a:	000c      	movs	r4, r1
    407c:	0017      	movs	r7, r2
    407e:	0006      	movs	r6, r0
    4080:	e5d2      	b.n	3c28 <__aeabi_dadd+0x108>
    4082:	2b00      	cmp	r3, #0
    4084:	d038      	beq.n	40f8 <__aeabi_dadd+0x5d8>
    4086:	000b      	movs	r3, r1
    4088:	4313      	orrs	r3, r2
    408a:	d100      	bne.n	408e <__aeabi_dadd+0x56e>
    408c:	e742      	b.n	3f14 <__aeabi_dadd+0x3f4>
    408e:	08f8      	lsrs	r0, r7, #3
    4090:	0767      	lsls	r7, r4, #29
    4092:	4307      	orrs	r7, r0
    4094:	2080      	movs	r0, #128	; 0x80
    4096:	08e4      	lsrs	r4, r4, #3
    4098:	0300      	lsls	r0, r0, #12
    409a:	4204      	tst	r4, r0
    409c:	d0e7      	beq.n	406e <__aeabi_dadd+0x54e>
    409e:	08cb      	lsrs	r3, r1, #3
    40a0:	4203      	tst	r3, r0
    40a2:	d1e4      	bne.n	406e <__aeabi_dadd+0x54e>
    40a4:	08d2      	lsrs	r2, r2, #3
    40a6:	0749      	lsls	r1, r1, #29
    40a8:	4311      	orrs	r1, r2
    40aa:	000f      	movs	r7, r1
    40ac:	001c      	movs	r4, r3
    40ae:	e7de      	b.n	406e <__aeabi_dadd+0x54e>
    40b0:	2700      	movs	r7, #0
    40b2:	2400      	movs	r4, #0
    40b4:	e5d5      	b.n	3c62 <__aeabi_dadd+0x142>
    40b6:	2100      	movs	r1, #0
    40b8:	e76b      	b.n	3f92 <__aeabi_dadd+0x472>
    40ba:	2500      	movs	r5, #0
    40bc:	2700      	movs	r7, #0
    40be:	e5f3      	b.n	3ca8 <__aeabi_dadd+0x188>
    40c0:	464e      	mov	r6, r9
    40c2:	0025      	movs	r5, r4
    40c4:	3e20      	subs	r6, #32
    40c6:	40f5      	lsrs	r5, r6
    40c8:	464b      	mov	r3, r9
    40ca:	002e      	movs	r6, r5
    40cc:	2b20      	cmp	r3, #32
    40ce:	d02d      	beq.n	412c <__aeabi_dadd+0x60c>
    40d0:	2540      	movs	r5, #64	; 0x40
    40d2:	1aed      	subs	r5, r5, r3
    40d4:	40ac      	lsls	r4, r5
    40d6:	4327      	orrs	r7, r4
    40d8:	1e7c      	subs	r4, r7, #1
    40da:	41a7      	sbcs	r7, r4
    40dc:	2400      	movs	r4, #0
    40de:	4337      	orrs	r7, r6
    40e0:	e6c9      	b.n	3e76 <__aeabi_dadd+0x356>
    40e2:	2480      	movs	r4, #128	; 0x80
    40e4:	2500      	movs	r5, #0
    40e6:	0324      	lsls	r4, r4, #12
    40e8:	4e13      	ldr	r6, [pc, #76]	; (4138 <__aeabi_dadd+0x618>)
    40ea:	2700      	movs	r7, #0
    40ec:	e5dc      	b.n	3ca8 <__aeabi_dadd+0x188>
    40ee:	4327      	orrs	r7, r4
    40f0:	1e7c      	subs	r4, r7, #1
    40f2:	41a7      	sbcs	r7, r4
    40f4:	2400      	movs	r4, #0
    40f6:	e779      	b.n	3fec <__aeabi_dadd+0x4cc>
    40f8:	000c      	movs	r4, r1
    40fa:	0017      	movs	r7, r2
    40fc:	4e0e      	ldr	r6, [pc, #56]	; (4138 <__aeabi_dadd+0x618>)
    40fe:	e593      	b.n	3c28 <__aeabi_dadd+0x108>
    4100:	000c      	movs	r4, r1
    4102:	0017      	movs	r7, r2
    4104:	e590      	b.n	3c28 <__aeabi_dadd+0x108>
    4106:	4656      	mov	r6, sl
    4108:	0023      	movs	r3, r4
    410a:	3e20      	subs	r6, #32
    410c:	40f3      	lsrs	r3, r6
    410e:	4699      	mov	r9, r3
    4110:	4653      	mov	r3, sl
    4112:	2b20      	cmp	r3, #32
    4114:	d00e      	beq.n	4134 <__aeabi_dadd+0x614>
    4116:	2340      	movs	r3, #64	; 0x40
    4118:	4656      	mov	r6, sl
    411a:	1b9b      	subs	r3, r3, r6
    411c:	409c      	lsls	r4, r3
    411e:	4327      	orrs	r7, r4
    4120:	1e7c      	subs	r4, r7, #1
    4122:	41a7      	sbcs	r7, r4
    4124:	464b      	mov	r3, r9
    4126:	2400      	movs	r4, #0
    4128:	431f      	orrs	r7, r3
    412a:	e75f      	b.n	3fec <__aeabi_dadd+0x4cc>
    412c:	2400      	movs	r4, #0
    412e:	e7d2      	b.n	40d6 <__aeabi_dadd+0x5b6>
    4130:	0017      	movs	r7, r2
    4132:	e5b2      	b.n	3c9a <__aeabi_dadd+0x17a>
    4134:	2400      	movs	r4, #0
    4136:	e7f2      	b.n	411e <__aeabi_dadd+0x5fe>
    4138:	000007ff 	.word	0x000007ff
    413c:	ff7fffff 	.word	0xff7fffff

00004140 <__aeabi_ddiv>:
    4140:	b5f0      	push	{r4, r5, r6, r7, lr}
    4142:	4657      	mov	r7, sl
    4144:	4645      	mov	r5, r8
    4146:	46de      	mov	lr, fp
    4148:	464e      	mov	r6, r9
    414a:	b5e0      	push	{r5, r6, r7, lr}
    414c:	004c      	lsls	r4, r1, #1
    414e:	030e      	lsls	r6, r1, #12
    4150:	b087      	sub	sp, #28
    4152:	4683      	mov	fp, r0
    4154:	4692      	mov	sl, r2
    4156:	001d      	movs	r5, r3
    4158:	4680      	mov	r8, r0
    415a:	0b36      	lsrs	r6, r6, #12
    415c:	0d64      	lsrs	r4, r4, #21
    415e:	0fcf      	lsrs	r7, r1, #31
    4160:	2c00      	cmp	r4, #0
    4162:	d04f      	beq.n	4204 <__aeabi_ddiv+0xc4>
    4164:	4b6f      	ldr	r3, [pc, #444]	; (4324 <__aeabi_ddiv+0x1e4>)
    4166:	429c      	cmp	r4, r3
    4168:	d035      	beq.n	41d6 <__aeabi_ddiv+0x96>
    416a:	2380      	movs	r3, #128	; 0x80
    416c:	0f42      	lsrs	r2, r0, #29
    416e:	041b      	lsls	r3, r3, #16
    4170:	00f6      	lsls	r6, r6, #3
    4172:	4313      	orrs	r3, r2
    4174:	4333      	orrs	r3, r6
    4176:	4699      	mov	r9, r3
    4178:	00c3      	lsls	r3, r0, #3
    417a:	4698      	mov	r8, r3
    417c:	4b6a      	ldr	r3, [pc, #424]	; (4328 <__aeabi_ddiv+0x1e8>)
    417e:	2600      	movs	r6, #0
    4180:	469c      	mov	ip, r3
    4182:	2300      	movs	r3, #0
    4184:	4464      	add	r4, ip
    4186:	9303      	str	r3, [sp, #12]
    4188:	032b      	lsls	r3, r5, #12
    418a:	0b1b      	lsrs	r3, r3, #12
    418c:	469b      	mov	fp, r3
    418e:	006b      	lsls	r3, r5, #1
    4190:	0fed      	lsrs	r5, r5, #31
    4192:	4650      	mov	r0, sl
    4194:	0d5b      	lsrs	r3, r3, #21
    4196:	9501      	str	r5, [sp, #4]
    4198:	d05e      	beq.n	4258 <__aeabi_ddiv+0x118>
    419a:	4a62      	ldr	r2, [pc, #392]	; (4324 <__aeabi_ddiv+0x1e4>)
    419c:	4293      	cmp	r3, r2
    419e:	d053      	beq.n	4248 <__aeabi_ddiv+0x108>
    41a0:	465a      	mov	r2, fp
    41a2:	00d1      	lsls	r1, r2, #3
    41a4:	2280      	movs	r2, #128	; 0x80
    41a6:	0f40      	lsrs	r0, r0, #29
    41a8:	0412      	lsls	r2, r2, #16
    41aa:	4302      	orrs	r2, r0
    41ac:	430a      	orrs	r2, r1
    41ae:	4693      	mov	fp, r2
    41b0:	4652      	mov	r2, sl
    41b2:	00d1      	lsls	r1, r2, #3
    41b4:	4a5c      	ldr	r2, [pc, #368]	; (4328 <__aeabi_ddiv+0x1e8>)
    41b6:	4694      	mov	ip, r2
    41b8:	2200      	movs	r2, #0
    41ba:	4463      	add	r3, ip
    41bc:	0038      	movs	r0, r7
    41be:	4068      	eors	r0, r5
    41c0:	4684      	mov	ip, r0
    41c2:	9002      	str	r0, [sp, #8]
    41c4:	1ae4      	subs	r4, r4, r3
    41c6:	4316      	orrs	r6, r2
    41c8:	2e0f      	cmp	r6, #15
    41ca:	d900      	bls.n	41ce <__aeabi_ddiv+0x8e>
    41cc:	e0b4      	b.n	4338 <__aeabi_ddiv+0x1f8>
    41ce:	4b57      	ldr	r3, [pc, #348]	; (432c <__aeabi_ddiv+0x1ec>)
    41d0:	00b6      	lsls	r6, r6, #2
    41d2:	599b      	ldr	r3, [r3, r6]
    41d4:	469f      	mov	pc, r3
    41d6:	0003      	movs	r3, r0
    41d8:	4333      	orrs	r3, r6
    41da:	4699      	mov	r9, r3
    41dc:	d16c      	bne.n	42b8 <__aeabi_ddiv+0x178>
    41de:	2300      	movs	r3, #0
    41e0:	4698      	mov	r8, r3
    41e2:	3302      	adds	r3, #2
    41e4:	2608      	movs	r6, #8
    41e6:	9303      	str	r3, [sp, #12]
    41e8:	e7ce      	b.n	4188 <__aeabi_ddiv+0x48>
    41ea:	46cb      	mov	fp, r9
    41ec:	4641      	mov	r1, r8
    41ee:	9a03      	ldr	r2, [sp, #12]
    41f0:	9701      	str	r7, [sp, #4]
    41f2:	2a02      	cmp	r2, #2
    41f4:	d165      	bne.n	42c2 <__aeabi_ddiv+0x182>
    41f6:	9b01      	ldr	r3, [sp, #4]
    41f8:	4c4a      	ldr	r4, [pc, #296]	; (4324 <__aeabi_ddiv+0x1e4>)
    41fa:	469c      	mov	ip, r3
    41fc:	2300      	movs	r3, #0
    41fe:	2200      	movs	r2, #0
    4200:	4698      	mov	r8, r3
    4202:	e06b      	b.n	42dc <__aeabi_ddiv+0x19c>
    4204:	0003      	movs	r3, r0
    4206:	4333      	orrs	r3, r6
    4208:	4699      	mov	r9, r3
    420a:	d04e      	beq.n	42aa <__aeabi_ddiv+0x16a>
    420c:	2e00      	cmp	r6, #0
    420e:	d100      	bne.n	4212 <__aeabi_ddiv+0xd2>
    4210:	e1bc      	b.n	458c <__aeabi_ddiv+0x44c>
    4212:	0030      	movs	r0, r6
    4214:	f001 fa0c 	bl	5630 <__clzsi2>
    4218:	0003      	movs	r3, r0
    421a:	3b0b      	subs	r3, #11
    421c:	2b1c      	cmp	r3, #28
    421e:	dd00      	ble.n	4222 <__aeabi_ddiv+0xe2>
    4220:	e1ac      	b.n	457c <__aeabi_ddiv+0x43c>
    4222:	221d      	movs	r2, #29
    4224:	1ad3      	subs	r3, r2, r3
    4226:	465a      	mov	r2, fp
    4228:	0001      	movs	r1, r0
    422a:	40da      	lsrs	r2, r3
    422c:	3908      	subs	r1, #8
    422e:	408e      	lsls	r6, r1
    4230:	0013      	movs	r3, r2
    4232:	4333      	orrs	r3, r6
    4234:	4699      	mov	r9, r3
    4236:	465b      	mov	r3, fp
    4238:	408b      	lsls	r3, r1
    423a:	4698      	mov	r8, r3
    423c:	2300      	movs	r3, #0
    423e:	4c3c      	ldr	r4, [pc, #240]	; (4330 <__aeabi_ddiv+0x1f0>)
    4240:	2600      	movs	r6, #0
    4242:	1a24      	subs	r4, r4, r0
    4244:	9303      	str	r3, [sp, #12]
    4246:	e79f      	b.n	4188 <__aeabi_ddiv+0x48>
    4248:	4651      	mov	r1, sl
    424a:	465a      	mov	r2, fp
    424c:	4311      	orrs	r1, r2
    424e:	d129      	bne.n	42a4 <__aeabi_ddiv+0x164>
    4250:	2200      	movs	r2, #0
    4252:	4693      	mov	fp, r2
    4254:	3202      	adds	r2, #2
    4256:	e7b1      	b.n	41bc <__aeabi_ddiv+0x7c>
    4258:	4659      	mov	r1, fp
    425a:	4301      	orrs	r1, r0
    425c:	d01e      	beq.n	429c <__aeabi_ddiv+0x15c>
    425e:	465b      	mov	r3, fp
    4260:	2b00      	cmp	r3, #0
    4262:	d100      	bne.n	4266 <__aeabi_ddiv+0x126>
    4264:	e19e      	b.n	45a4 <__aeabi_ddiv+0x464>
    4266:	4658      	mov	r0, fp
    4268:	f001 f9e2 	bl	5630 <__clzsi2>
    426c:	0003      	movs	r3, r0
    426e:	3b0b      	subs	r3, #11
    4270:	2b1c      	cmp	r3, #28
    4272:	dd00      	ble.n	4276 <__aeabi_ddiv+0x136>
    4274:	e18f      	b.n	4596 <__aeabi_ddiv+0x456>
    4276:	0002      	movs	r2, r0
    4278:	4659      	mov	r1, fp
    427a:	3a08      	subs	r2, #8
    427c:	4091      	lsls	r1, r2
    427e:	468b      	mov	fp, r1
    4280:	211d      	movs	r1, #29
    4282:	1acb      	subs	r3, r1, r3
    4284:	4651      	mov	r1, sl
    4286:	40d9      	lsrs	r1, r3
    4288:	000b      	movs	r3, r1
    428a:	4659      	mov	r1, fp
    428c:	430b      	orrs	r3, r1
    428e:	4651      	mov	r1, sl
    4290:	469b      	mov	fp, r3
    4292:	4091      	lsls	r1, r2
    4294:	4b26      	ldr	r3, [pc, #152]	; (4330 <__aeabi_ddiv+0x1f0>)
    4296:	2200      	movs	r2, #0
    4298:	1a1b      	subs	r3, r3, r0
    429a:	e78f      	b.n	41bc <__aeabi_ddiv+0x7c>
    429c:	2300      	movs	r3, #0
    429e:	2201      	movs	r2, #1
    42a0:	469b      	mov	fp, r3
    42a2:	e78b      	b.n	41bc <__aeabi_ddiv+0x7c>
    42a4:	4651      	mov	r1, sl
    42a6:	2203      	movs	r2, #3
    42a8:	e788      	b.n	41bc <__aeabi_ddiv+0x7c>
    42aa:	2300      	movs	r3, #0
    42ac:	4698      	mov	r8, r3
    42ae:	3301      	adds	r3, #1
    42b0:	2604      	movs	r6, #4
    42b2:	2400      	movs	r4, #0
    42b4:	9303      	str	r3, [sp, #12]
    42b6:	e767      	b.n	4188 <__aeabi_ddiv+0x48>
    42b8:	2303      	movs	r3, #3
    42ba:	46b1      	mov	r9, r6
    42bc:	9303      	str	r3, [sp, #12]
    42be:	260c      	movs	r6, #12
    42c0:	e762      	b.n	4188 <__aeabi_ddiv+0x48>
    42c2:	2a03      	cmp	r2, #3
    42c4:	d100      	bne.n	42c8 <__aeabi_ddiv+0x188>
    42c6:	e25c      	b.n	4782 <__aeabi_ddiv+0x642>
    42c8:	9b01      	ldr	r3, [sp, #4]
    42ca:	2a01      	cmp	r2, #1
    42cc:	d000      	beq.n	42d0 <__aeabi_ddiv+0x190>
    42ce:	e1e4      	b.n	469a <__aeabi_ddiv+0x55a>
    42d0:	4013      	ands	r3, r2
    42d2:	469c      	mov	ip, r3
    42d4:	2300      	movs	r3, #0
    42d6:	2400      	movs	r4, #0
    42d8:	2200      	movs	r2, #0
    42da:	4698      	mov	r8, r3
    42dc:	2100      	movs	r1, #0
    42de:	0312      	lsls	r2, r2, #12
    42e0:	0b13      	lsrs	r3, r2, #12
    42e2:	0d0a      	lsrs	r2, r1, #20
    42e4:	0512      	lsls	r2, r2, #20
    42e6:	431a      	orrs	r2, r3
    42e8:	0523      	lsls	r3, r4, #20
    42ea:	4c12      	ldr	r4, [pc, #72]	; (4334 <__aeabi_ddiv+0x1f4>)
    42ec:	4640      	mov	r0, r8
    42ee:	4022      	ands	r2, r4
    42f0:	4313      	orrs	r3, r2
    42f2:	4662      	mov	r2, ip
    42f4:	005b      	lsls	r3, r3, #1
    42f6:	07d2      	lsls	r2, r2, #31
    42f8:	085b      	lsrs	r3, r3, #1
    42fa:	4313      	orrs	r3, r2
    42fc:	0019      	movs	r1, r3
    42fe:	b007      	add	sp, #28
    4300:	bc3c      	pop	{r2, r3, r4, r5}
    4302:	4690      	mov	r8, r2
    4304:	4699      	mov	r9, r3
    4306:	46a2      	mov	sl, r4
    4308:	46ab      	mov	fp, r5
    430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    430c:	2300      	movs	r3, #0
    430e:	2280      	movs	r2, #128	; 0x80
    4310:	469c      	mov	ip, r3
    4312:	0312      	lsls	r2, r2, #12
    4314:	4698      	mov	r8, r3
    4316:	4c03      	ldr	r4, [pc, #12]	; (4324 <__aeabi_ddiv+0x1e4>)
    4318:	e7e0      	b.n	42dc <__aeabi_ddiv+0x19c>
    431a:	2300      	movs	r3, #0
    431c:	4c01      	ldr	r4, [pc, #4]	; (4324 <__aeabi_ddiv+0x1e4>)
    431e:	2200      	movs	r2, #0
    4320:	4698      	mov	r8, r3
    4322:	e7db      	b.n	42dc <__aeabi_ddiv+0x19c>
    4324:	000007ff 	.word	0x000007ff
    4328:	fffffc01 	.word	0xfffffc01
    432c:	00006060 	.word	0x00006060
    4330:	fffffc0d 	.word	0xfffffc0d
    4334:	800fffff 	.word	0x800fffff
    4338:	45d9      	cmp	r9, fp
    433a:	d900      	bls.n	433e <__aeabi_ddiv+0x1fe>
    433c:	e139      	b.n	45b2 <__aeabi_ddiv+0x472>
    433e:	d100      	bne.n	4342 <__aeabi_ddiv+0x202>
    4340:	e134      	b.n	45ac <__aeabi_ddiv+0x46c>
    4342:	2300      	movs	r3, #0
    4344:	4646      	mov	r6, r8
    4346:	464d      	mov	r5, r9
    4348:	469a      	mov	sl, r3
    434a:	3c01      	subs	r4, #1
    434c:	465b      	mov	r3, fp
    434e:	0e0a      	lsrs	r2, r1, #24
    4350:	021b      	lsls	r3, r3, #8
    4352:	431a      	orrs	r2, r3
    4354:	020b      	lsls	r3, r1, #8
    4356:	0c17      	lsrs	r7, r2, #16
    4358:	9303      	str	r3, [sp, #12]
    435a:	0413      	lsls	r3, r2, #16
    435c:	0c1b      	lsrs	r3, r3, #16
    435e:	0039      	movs	r1, r7
    4360:	0028      	movs	r0, r5
    4362:	4690      	mov	r8, r2
    4364:	9301      	str	r3, [sp, #4]
    4366:	f7ff fa27 	bl	37b8 <__udivsi3>
    436a:	0002      	movs	r2, r0
    436c:	9b01      	ldr	r3, [sp, #4]
    436e:	4683      	mov	fp, r0
    4370:	435a      	muls	r2, r3
    4372:	0028      	movs	r0, r5
    4374:	0039      	movs	r1, r7
    4376:	4691      	mov	r9, r2
    4378:	f7ff faa4 	bl	38c4 <__aeabi_uidivmod>
    437c:	0c35      	lsrs	r5, r6, #16
    437e:	0409      	lsls	r1, r1, #16
    4380:	430d      	orrs	r5, r1
    4382:	45a9      	cmp	r9, r5
    4384:	d90d      	bls.n	43a2 <__aeabi_ddiv+0x262>
    4386:	465b      	mov	r3, fp
    4388:	4445      	add	r5, r8
    438a:	3b01      	subs	r3, #1
    438c:	45a8      	cmp	r8, r5
    438e:	d900      	bls.n	4392 <__aeabi_ddiv+0x252>
    4390:	e13a      	b.n	4608 <__aeabi_ddiv+0x4c8>
    4392:	45a9      	cmp	r9, r5
    4394:	d800      	bhi.n	4398 <__aeabi_ddiv+0x258>
    4396:	e137      	b.n	4608 <__aeabi_ddiv+0x4c8>
    4398:	2302      	movs	r3, #2
    439a:	425b      	negs	r3, r3
    439c:	469c      	mov	ip, r3
    439e:	4445      	add	r5, r8
    43a0:	44e3      	add	fp, ip
    43a2:	464b      	mov	r3, r9
    43a4:	1aeb      	subs	r3, r5, r3
    43a6:	0039      	movs	r1, r7
    43a8:	0018      	movs	r0, r3
    43aa:	9304      	str	r3, [sp, #16]
    43ac:	f7ff fa04 	bl	37b8 <__udivsi3>
    43b0:	9b01      	ldr	r3, [sp, #4]
    43b2:	0005      	movs	r5, r0
    43b4:	4343      	muls	r3, r0
    43b6:	0039      	movs	r1, r7
    43b8:	9804      	ldr	r0, [sp, #16]
    43ba:	4699      	mov	r9, r3
    43bc:	f7ff fa82 	bl	38c4 <__aeabi_uidivmod>
    43c0:	0433      	lsls	r3, r6, #16
    43c2:	0409      	lsls	r1, r1, #16
    43c4:	0c1b      	lsrs	r3, r3, #16
    43c6:	430b      	orrs	r3, r1
    43c8:	4599      	cmp	r9, r3
    43ca:	d909      	bls.n	43e0 <__aeabi_ddiv+0x2a0>
    43cc:	4443      	add	r3, r8
    43ce:	1e6a      	subs	r2, r5, #1
    43d0:	4598      	cmp	r8, r3
    43d2:	d900      	bls.n	43d6 <__aeabi_ddiv+0x296>
    43d4:	e11a      	b.n	460c <__aeabi_ddiv+0x4cc>
    43d6:	4599      	cmp	r9, r3
    43d8:	d800      	bhi.n	43dc <__aeabi_ddiv+0x29c>
    43da:	e117      	b.n	460c <__aeabi_ddiv+0x4cc>
    43dc:	3d02      	subs	r5, #2
    43de:	4443      	add	r3, r8
    43e0:	464a      	mov	r2, r9
    43e2:	1a9b      	subs	r3, r3, r2
    43e4:	465a      	mov	r2, fp
    43e6:	0412      	lsls	r2, r2, #16
    43e8:	432a      	orrs	r2, r5
    43ea:	9903      	ldr	r1, [sp, #12]
    43ec:	4693      	mov	fp, r2
    43ee:	0c10      	lsrs	r0, r2, #16
    43f0:	0c0a      	lsrs	r2, r1, #16
    43f2:	4691      	mov	r9, r2
    43f4:	0409      	lsls	r1, r1, #16
    43f6:	465a      	mov	r2, fp
    43f8:	0c09      	lsrs	r1, r1, #16
    43fa:	464e      	mov	r6, r9
    43fc:	000d      	movs	r5, r1
    43fe:	0412      	lsls	r2, r2, #16
    4400:	0c12      	lsrs	r2, r2, #16
    4402:	4345      	muls	r5, r0
    4404:	9105      	str	r1, [sp, #20]
    4406:	4351      	muls	r1, r2
    4408:	4372      	muls	r2, r6
    440a:	4370      	muls	r0, r6
    440c:	1952      	adds	r2, r2, r5
    440e:	0c0e      	lsrs	r6, r1, #16
    4410:	18b2      	adds	r2, r6, r2
    4412:	4295      	cmp	r5, r2
    4414:	d903      	bls.n	441e <__aeabi_ddiv+0x2de>
    4416:	2580      	movs	r5, #128	; 0x80
    4418:	026d      	lsls	r5, r5, #9
    441a:	46ac      	mov	ip, r5
    441c:	4460      	add	r0, ip
    441e:	0c15      	lsrs	r5, r2, #16
    4420:	0409      	lsls	r1, r1, #16
    4422:	0412      	lsls	r2, r2, #16
    4424:	0c09      	lsrs	r1, r1, #16
    4426:	1828      	adds	r0, r5, r0
    4428:	1852      	adds	r2, r2, r1
    442a:	4283      	cmp	r3, r0
    442c:	d200      	bcs.n	4430 <__aeabi_ddiv+0x2f0>
    442e:	e0ce      	b.n	45ce <__aeabi_ddiv+0x48e>
    4430:	d100      	bne.n	4434 <__aeabi_ddiv+0x2f4>
    4432:	e0c8      	b.n	45c6 <__aeabi_ddiv+0x486>
    4434:	1a1d      	subs	r5, r3, r0
    4436:	4653      	mov	r3, sl
    4438:	1a9e      	subs	r6, r3, r2
    443a:	45b2      	cmp	sl, r6
    443c:	4192      	sbcs	r2, r2
    443e:	4252      	negs	r2, r2
    4440:	1aab      	subs	r3, r5, r2
    4442:	469a      	mov	sl, r3
    4444:	4598      	cmp	r8, r3
    4446:	d100      	bne.n	444a <__aeabi_ddiv+0x30a>
    4448:	e117      	b.n	467a <__aeabi_ddiv+0x53a>
    444a:	0039      	movs	r1, r7
    444c:	0018      	movs	r0, r3
    444e:	f7ff f9b3 	bl	37b8 <__udivsi3>
    4452:	9b01      	ldr	r3, [sp, #4]
    4454:	0005      	movs	r5, r0
    4456:	4343      	muls	r3, r0
    4458:	0039      	movs	r1, r7
    445a:	4650      	mov	r0, sl
    445c:	9304      	str	r3, [sp, #16]
    445e:	f7ff fa31 	bl	38c4 <__aeabi_uidivmod>
    4462:	9804      	ldr	r0, [sp, #16]
    4464:	040b      	lsls	r3, r1, #16
    4466:	0c31      	lsrs	r1, r6, #16
    4468:	4319      	orrs	r1, r3
    446a:	4288      	cmp	r0, r1
    446c:	d909      	bls.n	4482 <__aeabi_ddiv+0x342>
    446e:	4441      	add	r1, r8
    4470:	1e6b      	subs	r3, r5, #1
    4472:	4588      	cmp	r8, r1
    4474:	d900      	bls.n	4478 <__aeabi_ddiv+0x338>
    4476:	e107      	b.n	4688 <__aeabi_ddiv+0x548>
    4478:	4288      	cmp	r0, r1
    447a:	d800      	bhi.n	447e <__aeabi_ddiv+0x33e>
    447c:	e104      	b.n	4688 <__aeabi_ddiv+0x548>
    447e:	3d02      	subs	r5, #2
    4480:	4441      	add	r1, r8
    4482:	9b04      	ldr	r3, [sp, #16]
    4484:	1acb      	subs	r3, r1, r3
    4486:	0018      	movs	r0, r3
    4488:	0039      	movs	r1, r7
    448a:	9304      	str	r3, [sp, #16]
    448c:	f7ff f994 	bl	37b8 <__udivsi3>
    4490:	9b01      	ldr	r3, [sp, #4]
    4492:	4682      	mov	sl, r0
    4494:	4343      	muls	r3, r0
    4496:	0039      	movs	r1, r7
    4498:	9804      	ldr	r0, [sp, #16]
    449a:	9301      	str	r3, [sp, #4]
    449c:	f7ff fa12 	bl	38c4 <__aeabi_uidivmod>
    44a0:	9801      	ldr	r0, [sp, #4]
    44a2:	040b      	lsls	r3, r1, #16
    44a4:	0431      	lsls	r1, r6, #16
    44a6:	0c09      	lsrs	r1, r1, #16
    44a8:	4319      	orrs	r1, r3
    44aa:	4288      	cmp	r0, r1
    44ac:	d90d      	bls.n	44ca <__aeabi_ddiv+0x38a>
    44ae:	4653      	mov	r3, sl
    44b0:	4441      	add	r1, r8
    44b2:	3b01      	subs	r3, #1
    44b4:	4588      	cmp	r8, r1
    44b6:	d900      	bls.n	44ba <__aeabi_ddiv+0x37a>
    44b8:	e0e8      	b.n	468c <__aeabi_ddiv+0x54c>
    44ba:	4288      	cmp	r0, r1
    44bc:	d800      	bhi.n	44c0 <__aeabi_ddiv+0x380>
    44be:	e0e5      	b.n	468c <__aeabi_ddiv+0x54c>
    44c0:	2302      	movs	r3, #2
    44c2:	425b      	negs	r3, r3
    44c4:	469c      	mov	ip, r3
    44c6:	4441      	add	r1, r8
    44c8:	44e2      	add	sl, ip
    44ca:	9b01      	ldr	r3, [sp, #4]
    44cc:	042d      	lsls	r5, r5, #16
    44ce:	1ace      	subs	r6, r1, r3
    44d0:	4651      	mov	r1, sl
    44d2:	4329      	orrs	r1, r5
    44d4:	9d05      	ldr	r5, [sp, #20]
    44d6:	464f      	mov	r7, r9
    44d8:	002a      	movs	r2, r5
    44da:	040b      	lsls	r3, r1, #16
    44dc:	0c08      	lsrs	r0, r1, #16
    44de:	0c1b      	lsrs	r3, r3, #16
    44e0:	435a      	muls	r2, r3
    44e2:	4345      	muls	r5, r0
    44e4:	437b      	muls	r3, r7
    44e6:	4378      	muls	r0, r7
    44e8:	195b      	adds	r3, r3, r5
    44ea:	0c17      	lsrs	r7, r2, #16
    44ec:	18fb      	adds	r3, r7, r3
    44ee:	429d      	cmp	r5, r3
    44f0:	d903      	bls.n	44fa <__aeabi_ddiv+0x3ba>
    44f2:	2580      	movs	r5, #128	; 0x80
    44f4:	026d      	lsls	r5, r5, #9
    44f6:	46ac      	mov	ip, r5
    44f8:	4460      	add	r0, ip
    44fa:	0c1d      	lsrs	r5, r3, #16
    44fc:	0412      	lsls	r2, r2, #16
    44fe:	041b      	lsls	r3, r3, #16
    4500:	0c12      	lsrs	r2, r2, #16
    4502:	1828      	adds	r0, r5, r0
    4504:	189b      	adds	r3, r3, r2
    4506:	4286      	cmp	r6, r0
    4508:	d200      	bcs.n	450c <__aeabi_ddiv+0x3cc>
    450a:	e093      	b.n	4634 <__aeabi_ddiv+0x4f4>
    450c:	d100      	bne.n	4510 <__aeabi_ddiv+0x3d0>
    450e:	e08e      	b.n	462e <__aeabi_ddiv+0x4ee>
    4510:	2301      	movs	r3, #1
    4512:	4319      	orrs	r1, r3
    4514:	4ba0      	ldr	r3, [pc, #640]	; (4798 <__aeabi_ddiv+0x658>)
    4516:	18e3      	adds	r3, r4, r3
    4518:	2b00      	cmp	r3, #0
    451a:	dc00      	bgt.n	451e <__aeabi_ddiv+0x3de>
    451c:	e099      	b.n	4652 <__aeabi_ddiv+0x512>
    451e:	074a      	lsls	r2, r1, #29
    4520:	d000      	beq.n	4524 <__aeabi_ddiv+0x3e4>
    4522:	e09e      	b.n	4662 <__aeabi_ddiv+0x522>
    4524:	465a      	mov	r2, fp
    4526:	01d2      	lsls	r2, r2, #7
    4528:	d506      	bpl.n	4538 <__aeabi_ddiv+0x3f8>
    452a:	465a      	mov	r2, fp
    452c:	4b9b      	ldr	r3, [pc, #620]	; (479c <__aeabi_ddiv+0x65c>)
    452e:	401a      	ands	r2, r3
    4530:	2380      	movs	r3, #128	; 0x80
    4532:	4693      	mov	fp, r2
    4534:	00db      	lsls	r3, r3, #3
    4536:	18e3      	adds	r3, r4, r3
    4538:	4a99      	ldr	r2, [pc, #612]	; (47a0 <__aeabi_ddiv+0x660>)
    453a:	4293      	cmp	r3, r2
    453c:	dd68      	ble.n	4610 <__aeabi_ddiv+0x4d0>
    453e:	2301      	movs	r3, #1
    4540:	9a02      	ldr	r2, [sp, #8]
    4542:	4c98      	ldr	r4, [pc, #608]	; (47a4 <__aeabi_ddiv+0x664>)
    4544:	401a      	ands	r2, r3
    4546:	2300      	movs	r3, #0
    4548:	4694      	mov	ip, r2
    454a:	4698      	mov	r8, r3
    454c:	2200      	movs	r2, #0
    454e:	e6c5      	b.n	42dc <__aeabi_ddiv+0x19c>
    4550:	2280      	movs	r2, #128	; 0x80
    4552:	464b      	mov	r3, r9
    4554:	0312      	lsls	r2, r2, #12
    4556:	4213      	tst	r3, r2
    4558:	d00a      	beq.n	4570 <__aeabi_ddiv+0x430>
    455a:	465b      	mov	r3, fp
    455c:	4213      	tst	r3, r2
    455e:	d106      	bne.n	456e <__aeabi_ddiv+0x42e>
    4560:	431a      	orrs	r2, r3
    4562:	0312      	lsls	r2, r2, #12
    4564:	0b12      	lsrs	r2, r2, #12
    4566:	46ac      	mov	ip, r5
    4568:	4688      	mov	r8, r1
    456a:	4c8e      	ldr	r4, [pc, #568]	; (47a4 <__aeabi_ddiv+0x664>)
    456c:	e6b6      	b.n	42dc <__aeabi_ddiv+0x19c>
    456e:	464b      	mov	r3, r9
    4570:	431a      	orrs	r2, r3
    4572:	0312      	lsls	r2, r2, #12
    4574:	0b12      	lsrs	r2, r2, #12
    4576:	46bc      	mov	ip, r7
    4578:	4c8a      	ldr	r4, [pc, #552]	; (47a4 <__aeabi_ddiv+0x664>)
    457a:	e6af      	b.n	42dc <__aeabi_ddiv+0x19c>
    457c:	0003      	movs	r3, r0
    457e:	465a      	mov	r2, fp
    4580:	3b28      	subs	r3, #40	; 0x28
    4582:	409a      	lsls	r2, r3
    4584:	2300      	movs	r3, #0
    4586:	4691      	mov	r9, r2
    4588:	4698      	mov	r8, r3
    458a:	e657      	b.n	423c <__aeabi_ddiv+0xfc>
    458c:	4658      	mov	r0, fp
    458e:	f001 f84f 	bl	5630 <__clzsi2>
    4592:	3020      	adds	r0, #32
    4594:	e640      	b.n	4218 <__aeabi_ddiv+0xd8>
    4596:	0003      	movs	r3, r0
    4598:	4652      	mov	r2, sl
    459a:	3b28      	subs	r3, #40	; 0x28
    459c:	409a      	lsls	r2, r3
    459e:	2100      	movs	r1, #0
    45a0:	4693      	mov	fp, r2
    45a2:	e677      	b.n	4294 <__aeabi_ddiv+0x154>
    45a4:	f001 f844 	bl	5630 <__clzsi2>
    45a8:	3020      	adds	r0, #32
    45aa:	e65f      	b.n	426c <__aeabi_ddiv+0x12c>
    45ac:	4588      	cmp	r8, r1
    45ae:	d200      	bcs.n	45b2 <__aeabi_ddiv+0x472>
    45b0:	e6c7      	b.n	4342 <__aeabi_ddiv+0x202>
    45b2:	464b      	mov	r3, r9
    45b4:	07de      	lsls	r6, r3, #31
    45b6:	085d      	lsrs	r5, r3, #1
    45b8:	4643      	mov	r3, r8
    45ba:	085b      	lsrs	r3, r3, #1
    45bc:	431e      	orrs	r6, r3
    45be:	4643      	mov	r3, r8
    45c0:	07db      	lsls	r3, r3, #31
    45c2:	469a      	mov	sl, r3
    45c4:	e6c2      	b.n	434c <__aeabi_ddiv+0x20c>
    45c6:	2500      	movs	r5, #0
    45c8:	4592      	cmp	sl, r2
    45ca:	d300      	bcc.n	45ce <__aeabi_ddiv+0x48e>
    45cc:	e733      	b.n	4436 <__aeabi_ddiv+0x2f6>
    45ce:	9e03      	ldr	r6, [sp, #12]
    45d0:	4659      	mov	r1, fp
    45d2:	46b4      	mov	ip, r6
    45d4:	44e2      	add	sl, ip
    45d6:	45b2      	cmp	sl, r6
    45d8:	41ad      	sbcs	r5, r5
    45da:	426d      	negs	r5, r5
    45dc:	4445      	add	r5, r8
    45de:	18eb      	adds	r3, r5, r3
    45e0:	3901      	subs	r1, #1
    45e2:	4598      	cmp	r8, r3
    45e4:	d207      	bcs.n	45f6 <__aeabi_ddiv+0x4b6>
    45e6:	4298      	cmp	r0, r3
    45e8:	d900      	bls.n	45ec <__aeabi_ddiv+0x4ac>
    45ea:	e07f      	b.n	46ec <__aeabi_ddiv+0x5ac>
    45ec:	d100      	bne.n	45f0 <__aeabi_ddiv+0x4b0>
    45ee:	e0bc      	b.n	476a <__aeabi_ddiv+0x62a>
    45f0:	1a1d      	subs	r5, r3, r0
    45f2:	468b      	mov	fp, r1
    45f4:	e71f      	b.n	4436 <__aeabi_ddiv+0x2f6>
    45f6:	4598      	cmp	r8, r3
    45f8:	d1fa      	bne.n	45f0 <__aeabi_ddiv+0x4b0>
    45fa:	9d03      	ldr	r5, [sp, #12]
    45fc:	4555      	cmp	r5, sl
    45fe:	d9f2      	bls.n	45e6 <__aeabi_ddiv+0x4a6>
    4600:	4643      	mov	r3, r8
    4602:	468b      	mov	fp, r1
    4604:	1a1d      	subs	r5, r3, r0
    4606:	e716      	b.n	4436 <__aeabi_ddiv+0x2f6>
    4608:	469b      	mov	fp, r3
    460a:	e6ca      	b.n	43a2 <__aeabi_ddiv+0x262>
    460c:	0015      	movs	r5, r2
    460e:	e6e7      	b.n	43e0 <__aeabi_ddiv+0x2a0>
    4610:	465a      	mov	r2, fp
    4612:	08c9      	lsrs	r1, r1, #3
    4614:	0752      	lsls	r2, r2, #29
    4616:	430a      	orrs	r2, r1
    4618:	055b      	lsls	r3, r3, #21
    461a:	4690      	mov	r8, r2
    461c:	0d5c      	lsrs	r4, r3, #21
    461e:	465a      	mov	r2, fp
    4620:	2301      	movs	r3, #1
    4622:	9902      	ldr	r1, [sp, #8]
    4624:	0252      	lsls	r2, r2, #9
    4626:	4019      	ands	r1, r3
    4628:	0b12      	lsrs	r2, r2, #12
    462a:	468c      	mov	ip, r1
    462c:	e656      	b.n	42dc <__aeabi_ddiv+0x19c>
    462e:	2b00      	cmp	r3, #0
    4630:	d100      	bne.n	4634 <__aeabi_ddiv+0x4f4>
    4632:	e76f      	b.n	4514 <__aeabi_ddiv+0x3d4>
    4634:	4446      	add	r6, r8
    4636:	1e4a      	subs	r2, r1, #1
    4638:	45b0      	cmp	r8, r6
    463a:	d929      	bls.n	4690 <__aeabi_ddiv+0x550>
    463c:	0011      	movs	r1, r2
    463e:	4286      	cmp	r6, r0
    4640:	d000      	beq.n	4644 <__aeabi_ddiv+0x504>
    4642:	e765      	b.n	4510 <__aeabi_ddiv+0x3d0>
    4644:	9a03      	ldr	r2, [sp, #12]
    4646:	4293      	cmp	r3, r2
    4648:	d000      	beq.n	464c <__aeabi_ddiv+0x50c>
    464a:	e761      	b.n	4510 <__aeabi_ddiv+0x3d0>
    464c:	e762      	b.n	4514 <__aeabi_ddiv+0x3d4>
    464e:	2101      	movs	r1, #1
    4650:	4249      	negs	r1, r1
    4652:	2001      	movs	r0, #1
    4654:	1ac2      	subs	r2, r0, r3
    4656:	2a38      	cmp	r2, #56	; 0x38
    4658:	dd21      	ble.n	469e <__aeabi_ddiv+0x55e>
    465a:	9b02      	ldr	r3, [sp, #8]
    465c:	4003      	ands	r3, r0
    465e:	469c      	mov	ip, r3
    4660:	e638      	b.n	42d4 <__aeabi_ddiv+0x194>
    4662:	220f      	movs	r2, #15
    4664:	400a      	ands	r2, r1
    4666:	2a04      	cmp	r2, #4
    4668:	d100      	bne.n	466c <__aeabi_ddiv+0x52c>
    466a:	e75b      	b.n	4524 <__aeabi_ddiv+0x3e4>
    466c:	000a      	movs	r2, r1
    466e:	1d11      	adds	r1, r2, #4
    4670:	4291      	cmp	r1, r2
    4672:	4192      	sbcs	r2, r2
    4674:	4252      	negs	r2, r2
    4676:	4493      	add	fp, r2
    4678:	e754      	b.n	4524 <__aeabi_ddiv+0x3e4>
    467a:	4b47      	ldr	r3, [pc, #284]	; (4798 <__aeabi_ddiv+0x658>)
    467c:	18e3      	adds	r3, r4, r3
    467e:	2b00      	cmp	r3, #0
    4680:	dde5      	ble.n	464e <__aeabi_ddiv+0x50e>
    4682:	2201      	movs	r2, #1
    4684:	4252      	negs	r2, r2
    4686:	e7f2      	b.n	466e <__aeabi_ddiv+0x52e>
    4688:	001d      	movs	r5, r3
    468a:	e6fa      	b.n	4482 <__aeabi_ddiv+0x342>
    468c:	469a      	mov	sl, r3
    468e:	e71c      	b.n	44ca <__aeabi_ddiv+0x38a>
    4690:	42b0      	cmp	r0, r6
    4692:	d839      	bhi.n	4708 <__aeabi_ddiv+0x5c8>
    4694:	d06e      	beq.n	4774 <__aeabi_ddiv+0x634>
    4696:	0011      	movs	r1, r2
    4698:	e73a      	b.n	4510 <__aeabi_ddiv+0x3d0>
    469a:	9302      	str	r3, [sp, #8]
    469c:	e73a      	b.n	4514 <__aeabi_ddiv+0x3d4>
    469e:	2a1f      	cmp	r2, #31
    46a0:	dc3c      	bgt.n	471c <__aeabi_ddiv+0x5dc>
    46a2:	2320      	movs	r3, #32
    46a4:	1a9b      	subs	r3, r3, r2
    46a6:	000c      	movs	r4, r1
    46a8:	4658      	mov	r0, fp
    46aa:	4099      	lsls	r1, r3
    46ac:	4098      	lsls	r0, r3
    46ae:	1e4b      	subs	r3, r1, #1
    46b0:	4199      	sbcs	r1, r3
    46b2:	465b      	mov	r3, fp
    46b4:	40d4      	lsrs	r4, r2
    46b6:	40d3      	lsrs	r3, r2
    46b8:	4320      	orrs	r0, r4
    46ba:	4308      	orrs	r0, r1
    46bc:	001a      	movs	r2, r3
    46be:	0743      	lsls	r3, r0, #29
    46c0:	d009      	beq.n	46d6 <__aeabi_ddiv+0x596>
    46c2:	230f      	movs	r3, #15
    46c4:	4003      	ands	r3, r0
    46c6:	2b04      	cmp	r3, #4
    46c8:	d005      	beq.n	46d6 <__aeabi_ddiv+0x596>
    46ca:	0001      	movs	r1, r0
    46cc:	1d08      	adds	r0, r1, #4
    46ce:	4288      	cmp	r0, r1
    46d0:	419b      	sbcs	r3, r3
    46d2:	425b      	negs	r3, r3
    46d4:	18d2      	adds	r2, r2, r3
    46d6:	0213      	lsls	r3, r2, #8
    46d8:	d53a      	bpl.n	4750 <__aeabi_ddiv+0x610>
    46da:	2301      	movs	r3, #1
    46dc:	9a02      	ldr	r2, [sp, #8]
    46de:	2401      	movs	r4, #1
    46e0:	401a      	ands	r2, r3
    46e2:	2300      	movs	r3, #0
    46e4:	4694      	mov	ip, r2
    46e6:	4698      	mov	r8, r3
    46e8:	2200      	movs	r2, #0
    46ea:	e5f7      	b.n	42dc <__aeabi_ddiv+0x19c>
    46ec:	2102      	movs	r1, #2
    46ee:	4249      	negs	r1, r1
    46f0:	468c      	mov	ip, r1
    46f2:	9d03      	ldr	r5, [sp, #12]
    46f4:	44e3      	add	fp, ip
    46f6:	46ac      	mov	ip, r5
    46f8:	44e2      	add	sl, ip
    46fa:	45aa      	cmp	sl, r5
    46fc:	41ad      	sbcs	r5, r5
    46fe:	426d      	negs	r5, r5
    4700:	4445      	add	r5, r8
    4702:	18ed      	adds	r5, r5, r3
    4704:	1a2d      	subs	r5, r5, r0
    4706:	e696      	b.n	4436 <__aeabi_ddiv+0x2f6>
    4708:	1e8a      	subs	r2, r1, #2
    470a:	9903      	ldr	r1, [sp, #12]
    470c:	004d      	lsls	r5, r1, #1
    470e:	428d      	cmp	r5, r1
    4710:	4189      	sbcs	r1, r1
    4712:	4249      	negs	r1, r1
    4714:	4441      	add	r1, r8
    4716:	1876      	adds	r6, r6, r1
    4718:	9503      	str	r5, [sp, #12]
    471a:	e78f      	b.n	463c <__aeabi_ddiv+0x4fc>
    471c:	201f      	movs	r0, #31
    471e:	4240      	negs	r0, r0
    4720:	1ac3      	subs	r3, r0, r3
    4722:	4658      	mov	r0, fp
    4724:	40d8      	lsrs	r0, r3
    4726:	0003      	movs	r3, r0
    4728:	2a20      	cmp	r2, #32
    472a:	d028      	beq.n	477e <__aeabi_ddiv+0x63e>
    472c:	2040      	movs	r0, #64	; 0x40
    472e:	465d      	mov	r5, fp
    4730:	1a82      	subs	r2, r0, r2
    4732:	4095      	lsls	r5, r2
    4734:	4329      	orrs	r1, r5
    4736:	1e4a      	subs	r2, r1, #1
    4738:	4191      	sbcs	r1, r2
    473a:	4319      	orrs	r1, r3
    473c:	2307      	movs	r3, #7
    473e:	2200      	movs	r2, #0
    4740:	400b      	ands	r3, r1
    4742:	d009      	beq.n	4758 <__aeabi_ddiv+0x618>
    4744:	230f      	movs	r3, #15
    4746:	2200      	movs	r2, #0
    4748:	400b      	ands	r3, r1
    474a:	0008      	movs	r0, r1
    474c:	2b04      	cmp	r3, #4
    474e:	d1bd      	bne.n	46cc <__aeabi_ddiv+0x58c>
    4750:	0001      	movs	r1, r0
    4752:	0753      	lsls	r3, r2, #29
    4754:	0252      	lsls	r2, r2, #9
    4756:	0b12      	lsrs	r2, r2, #12
    4758:	08c9      	lsrs	r1, r1, #3
    475a:	4319      	orrs	r1, r3
    475c:	2301      	movs	r3, #1
    475e:	4688      	mov	r8, r1
    4760:	9902      	ldr	r1, [sp, #8]
    4762:	2400      	movs	r4, #0
    4764:	4019      	ands	r1, r3
    4766:	468c      	mov	ip, r1
    4768:	e5b8      	b.n	42dc <__aeabi_ddiv+0x19c>
    476a:	4552      	cmp	r2, sl
    476c:	d8be      	bhi.n	46ec <__aeabi_ddiv+0x5ac>
    476e:	468b      	mov	fp, r1
    4770:	2500      	movs	r5, #0
    4772:	e660      	b.n	4436 <__aeabi_ddiv+0x2f6>
    4774:	9d03      	ldr	r5, [sp, #12]
    4776:	429d      	cmp	r5, r3
    4778:	d3c6      	bcc.n	4708 <__aeabi_ddiv+0x5c8>
    477a:	0011      	movs	r1, r2
    477c:	e762      	b.n	4644 <__aeabi_ddiv+0x504>
    477e:	2500      	movs	r5, #0
    4780:	e7d8      	b.n	4734 <__aeabi_ddiv+0x5f4>
    4782:	2280      	movs	r2, #128	; 0x80
    4784:	465b      	mov	r3, fp
    4786:	0312      	lsls	r2, r2, #12
    4788:	431a      	orrs	r2, r3
    478a:	9b01      	ldr	r3, [sp, #4]
    478c:	0312      	lsls	r2, r2, #12
    478e:	0b12      	lsrs	r2, r2, #12
    4790:	469c      	mov	ip, r3
    4792:	4688      	mov	r8, r1
    4794:	4c03      	ldr	r4, [pc, #12]	; (47a4 <__aeabi_ddiv+0x664>)
    4796:	e5a1      	b.n	42dc <__aeabi_ddiv+0x19c>
    4798:	000003ff 	.word	0x000003ff
    479c:	feffffff 	.word	0xfeffffff
    47a0:	000007fe 	.word	0x000007fe
    47a4:	000007ff 	.word	0x000007ff

000047a8 <__eqdf2>:
    47a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47aa:	464f      	mov	r7, r9
    47ac:	4646      	mov	r6, r8
    47ae:	46d6      	mov	lr, sl
    47b0:	005c      	lsls	r4, r3, #1
    47b2:	b5c0      	push	{r6, r7, lr}
    47b4:	031f      	lsls	r7, r3, #12
    47b6:	0fdb      	lsrs	r3, r3, #31
    47b8:	469a      	mov	sl, r3
    47ba:	4b17      	ldr	r3, [pc, #92]	; (4818 <__eqdf2+0x70>)
    47bc:	030e      	lsls	r6, r1, #12
    47be:	004d      	lsls	r5, r1, #1
    47c0:	4684      	mov	ip, r0
    47c2:	4680      	mov	r8, r0
    47c4:	0b36      	lsrs	r6, r6, #12
    47c6:	0d6d      	lsrs	r5, r5, #21
    47c8:	0fc9      	lsrs	r1, r1, #31
    47ca:	4691      	mov	r9, r2
    47cc:	0b3f      	lsrs	r7, r7, #12
    47ce:	0d64      	lsrs	r4, r4, #21
    47d0:	2001      	movs	r0, #1
    47d2:	429d      	cmp	r5, r3
    47d4:	d008      	beq.n	47e8 <__eqdf2+0x40>
    47d6:	429c      	cmp	r4, r3
    47d8:	d001      	beq.n	47de <__eqdf2+0x36>
    47da:	42a5      	cmp	r5, r4
    47dc:	d00b      	beq.n	47f6 <__eqdf2+0x4e>
    47de:	bc1c      	pop	{r2, r3, r4}
    47e0:	4690      	mov	r8, r2
    47e2:	4699      	mov	r9, r3
    47e4:	46a2      	mov	sl, r4
    47e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e8:	4663      	mov	r3, ip
    47ea:	4333      	orrs	r3, r6
    47ec:	d1f7      	bne.n	47de <__eqdf2+0x36>
    47ee:	42ac      	cmp	r4, r5
    47f0:	d1f5      	bne.n	47de <__eqdf2+0x36>
    47f2:	433a      	orrs	r2, r7
    47f4:	d1f3      	bne.n	47de <__eqdf2+0x36>
    47f6:	2001      	movs	r0, #1
    47f8:	42be      	cmp	r6, r7
    47fa:	d1f0      	bne.n	47de <__eqdf2+0x36>
    47fc:	45c8      	cmp	r8, r9
    47fe:	d1ee      	bne.n	47de <__eqdf2+0x36>
    4800:	4551      	cmp	r1, sl
    4802:	d007      	beq.n	4814 <__eqdf2+0x6c>
    4804:	2d00      	cmp	r5, #0
    4806:	d1ea      	bne.n	47de <__eqdf2+0x36>
    4808:	4663      	mov	r3, ip
    480a:	431e      	orrs	r6, r3
    480c:	0030      	movs	r0, r6
    480e:	1e46      	subs	r6, r0, #1
    4810:	41b0      	sbcs	r0, r6
    4812:	e7e4      	b.n	47de <__eqdf2+0x36>
    4814:	2000      	movs	r0, #0
    4816:	e7e2      	b.n	47de <__eqdf2+0x36>
    4818:	000007ff 	.word	0x000007ff

0000481c <__gedf2>:
    481c:	b5f0      	push	{r4, r5, r6, r7, lr}
    481e:	4645      	mov	r5, r8
    4820:	46de      	mov	lr, fp
    4822:	4657      	mov	r7, sl
    4824:	464e      	mov	r6, r9
    4826:	b5e0      	push	{r5, r6, r7, lr}
    4828:	031f      	lsls	r7, r3, #12
    482a:	0b3d      	lsrs	r5, r7, #12
    482c:	4f2c      	ldr	r7, [pc, #176]	; (48e0 <__gedf2+0xc4>)
    482e:	030e      	lsls	r6, r1, #12
    4830:	004c      	lsls	r4, r1, #1
    4832:	46ab      	mov	fp, r5
    4834:	005d      	lsls	r5, r3, #1
    4836:	4684      	mov	ip, r0
    4838:	0b36      	lsrs	r6, r6, #12
    483a:	0d64      	lsrs	r4, r4, #21
    483c:	0fc9      	lsrs	r1, r1, #31
    483e:	4690      	mov	r8, r2
    4840:	0d6d      	lsrs	r5, r5, #21
    4842:	0fdb      	lsrs	r3, r3, #31
    4844:	42bc      	cmp	r4, r7
    4846:	d02a      	beq.n	489e <__gedf2+0x82>
    4848:	4f25      	ldr	r7, [pc, #148]	; (48e0 <__gedf2+0xc4>)
    484a:	42bd      	cmp	r5, r7
    484c:	d02d      	beq.n	48aa <__gedf2+0x8e>
    484e:	2c00      	cmp	r4, #0
    4850:	d10f      	bne.n	4872 <__gedf2+0x56>
    4852:	4330      	orrs	r0, r6
    4854:	0007      	movs	r7, r0
    4856:	4681      	mov	r9, r0
    4858:	4278      	negs	r0, r7
    485a:	4178      	adcs	r0, r7
    485c:	b2c0      	uxtb	r0, r0
    485e:	2d00      	cmp	r5, #0
    4860:	d117      	bne.n	4892 <__gedf2+0x76>
    4862:	465f      	mov	r7, fp
    4864:	433a      	orrs	r2, r7
    4866:	d114      	bne.n	4892 <__gedf2+0x76>
    4868:	464b      	mov	r3, r9
    486a:	2000      	movs	r0, #0
    486c:	2b00      	cmp	r3, #0
    486e:	d00a      	beq.n	4886 <__gedf2+0x6a>
    4870:	e006      	b.n	4880 <__gedf2+0x64>
    4872:	2d00      	cmp	r5, #0
    4874:	d102      	bne.n	487c <__gedf2+0x60>
    4876:	4658      	mov	r0, fp
    4878:	4302      	orrs	r2, r0
    487a:	d001      	beq.n	4880 <__gedf2+0x64>
    487c:	4299      	cmp	r1, r3
    487e:	d018      	beq.n	48b2 <__gedf2+0x96>
    4880:	4248      	negs	r0, r1
    4882:	2101      	movs	r1, #1
    4884:	4308      	orrs	r0, r1
    4886:	bc3c      	pop	{r2, r3, r4, r5}
    4888:	4690      	mov	r8, r2
    488a:	4699      	mov	r9, r3
    488c:	46a2      	mov	sl, r4
    488e:	46ab      	mov	fp, r5
    4890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4892:	2800      	cmp	r0, #0
    4894:	d0f2      	beq.n	487c <__gedf2+0x60>
    4896:	2001      	movs	r0, #1
    4898:	3b01      	subs	r3, #1
    489a:	4318      	orrs	r0, r3
    489c:	e7f3      	b.n	4886 <__gedf2+0x6a>
    489e:	0037      	movs	r7, r6
    48a0:	4307      	orrs	r7, r0
    48a2:	d0d1      	beq.n	4848 <__gedf2+0x2c>
    48a4:	2002      	movs	r0, #2
    48a6:	4240      	negs	r0, r0
    48a8:	e7ed      	b.n	4886 <__gedf2+0x6a>
    48aa:	465f      	mov	r7, fp
    48ac:	4317      	orrs	r7, r2
    48ae:	d0ce      	beq.n	484e <__gedf2+0x32>
    48b0:	e7f8      	b.n	48a4 <__gedf2+0x88>
    48b2:	42ac      	cmp	r4, r5
    48b4:	dce4      	bgt.n	4880 <__gedf2+0x64>
    48b6:	da03      	bge.n	48c0 <__gedf2+0xa4>
    48b8:	1e48      	subs	r0, r1, #1
    48ba:	2101      	movs	r1, #1
    48bc:	4308      	orrs	r0, r1
    48be:	e7e2      	b.n	4886 <__gedf2+0x6a>
    48c0:	455e      	cmp	r6, fp
    48c2:	d8dd      	bhi.n	4880 <__gedf2+0x64>
    48c4:	d006      	beq.n	48d4 <__gedf2+0xb8>
    48c6:	2000      	movs	r0, #0
    48c8:	455e      	cmp	r6, fp
    48ca:	d2dc      	bcs.n	4886 <__gedf2+0x6a>
    48cc:	2301      	movs	r3, #1
    48ce:	1e48      	subs	r0, r1, #1
    48d0:	4318      	orrs	r0, r3
    48d2:	e7d8      	b.n	4886 <__gedf2+0x6a>
    48d4:	45c4      	cmp	ip, r8
    48d6:	d8d3      	bhi.n	4880 <__gedf2+0x64>
    48d8:	2000      	movs	r0, #0
    48da:	45c4      	cmp	ip, r8
    48dc:	d3f6      	bcc.n	48cc <__gedf2+0xb0>
    48de:	e7d2      	b.n	4886 <__gedf2+0x6a>
    48e0:	000007ff 	.word	0x000007ff

000048e4 <__ledf2>:
    48e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48e6:	464e      	mov	r6, r9
    48e8:	4645      	mov	r5, r8
    48ea:	46de      	mov	lr, fp
    48ec:	4657      	mov	r7, sl
    48ee:	005c      	lsls	r4, r3, #1
    48f0:	b5e0      	push	{r5, r6, r7, lr}
    48f2:	031f      	lsls	r7, r3, #12
    48f4:	0fdb      	lsrs	r3, r3, #31
    48f6:	4699      	mov	r9, r3
    48f8:	4b2a      	ldr	r3, [pc, #168]	; (49a4 <__ledf2+0xc0>)
    48fa:	030e      	lsls	r6, r1, #12
    48fc:	004d      	lsls	r5, r1, #1
    48fe:	0fc9      	lsrs	r1, r1, #31
    4900:	4684      	mov	ip, r0
    4902:	0b36      	lsrs	r6, r6, #12
    4904:	0d6d      	lsrs	r5, r5, #21
    4906:	468b      	mov	fp, r1
    4908:	4690      	mov	r8, r2
    490a:	0b3f      	lsrs	r7, r7, #12
    490c:	0d64      	lsrs	r4, r4, #21
    490e:	429d      	cmp	r5, r3
    4910:	d020      	beq.n	4954 <__ledf2+0x70>
    4912:	4b24      	ldr	r3, [pc, #144]	; (49a4 <__ledf2+0xc0>)
    4914:	429c      	cmp	r4, r3
    4916:	d022      	beq.n	495e <__ledf2+0x7a>
    4918:	2d00      	cmp	r5, #0
    491a:	d112      	bne.n	4942 <__ledf2+0x5e>
    491c:	4330      	orrs	r0, r6
    491e:	4243      	negs	r3, r0
    4920:	4143      	adcs	r3, r0
    4922:	b2db      	uxtb	r3, r3
    4924:	2c00      	cmp	r4, #0
    4926:	d01f      	beq.n	4968 <__ledf2+0x84>
    4928:	2b00      	cmp	r3, #0
    492a:	d00c      	beq.n	4946 <__ledf2+0x62>
    492c:	464b      	mov	r3, r9
    492e:	2001      	movs	r0, #1
    4930:	3b01      	subs	r3, #1
    4932:	4303      	orrs	r3, r0
    4934:	0018      	movs	r0, r3
    4936:	bc3c      	pop	{r2, r3, r4, r5}
    4938:	4690      	mov	r8, r2
    493a:	4699      	mov	r9, r3
    493c:	46a2      	mov	sl, r4
    493e:	46ab      	mov	fp, r5
    4940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4942:	2c00      	cmp	r4, #0
    4944:	d016      	beq.n	4974 <__ledf2+0x90>
    4946:	45cb      	cmp	fp, r9
    4948:	d017      	beq.n	497a <__ledf2+0x96>
    494a:	465b      	mov	r3, fp
    494c:	4259      	negs	r1, r3
    494e:	2301      	movs	r3, #1
    4950:	430b      	orrs	r3, r1
    4952:	e7ef      	b.n	4934 <__ledf2+0x50>
    4954:	0031      	movs	r1, r6
    4956:	2302      	movs	r3, #2
    4958:	4301      	orrs	r1, r0
    495a:	d1eb      	bne.n	4934 <__ledf2+0x50>
    495c:	e7d9      	b.n	4912 <__ledf2+0x2e>
    495e:	0039      	movs	r1, r7
    4960:	2302      	movs	r3, #2
    4962:	4311      	orrs	r1, r2
    4964:	d1e6      	bne.n	4934 <__ledf2+0x50>
    4966:	e7d7      	b.n	4918 <__ledf2+0x34>
    4968:	433a      	orrs	r2, r7
    496a:	d1dd      	bne.n	4928 <__ledf2+0x44>
    496c:	2300      	movs	r3, #0
    496e:	2800      	cmp	r0, #0
    4970:	d0e0      	beq.n	4934 <__ledf2+0x50>
    4972:	e7ea      	b.n	494a <__ledf2+0x66>
    4974:	433a      	orrs	r2, r7
    4976:	d1e6      	bne.n	4946 <__ledf2+0x62>
    4978:	e7e7      	b.n	494a <__ledf2+0x66>
    497a:	42a5      	cmp	r5, r4
    497c:	dce5      	bgt.n	494a <__ledf2+0x66>
    497e:	db05      	blt.n	498c <__ledf2+0xa8>
    4980:	42be      	cmp	r6, r7
    4982:	d8e2      	bhi.n	494a <__ledf2+0x66>
    4984:	d007      	beq.n	4996 <__ledf2+0xb2>
    4986:	2300      	movs	r3, #0
    4988:	42be      	cmp	r6, r7
    498a:	d2d3      	bcs.n	4934 <__ledf2+0x50>
    498c:	4659      	mov	r1, fp
    498e:	2301      	movs	r3, #1
    4990:	3901      	subs	r1, #1
    4992:	430b      	orrs	r3, r1
    4994:	e7ce      	b.n	4934 <__ledf2+0x50>
    4996:	45c4      	cmp	ip, r8
    4998:	d8d7      	bhi.n	494a <__ledf2+0x66>
    499a:	2300      	movs	r3, #0
    499c:	45c4      	cmp	ip, r8
    499e:	d3f5      	bcc.n	498c <__ledf2+0xa8>
    49a0:	e7c8      	b.n	4934 <__ledf2+0x50>
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	000007ff 	.word	0x000007ff

000049a8 <__aeabi_dmul>:
    49a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49aa:	4657      	mov	r7, sl
    49ac:	4645      	mov	r5, r8
    49ae:	46de      	mov	lr, fp
    49b0:	464e      	mov	r6, r9
    49b2:	b5e0      	push	{r5, r6, r7, lr}
    49b4:	030c      	lsls	r4, r1, #12
    49b6:	4698      	mov	r8, r3
    49b8:	004e      	lsls	r6, r1, #1
    49ba:	0b23      	lsrs	r3, r4, #12
    49bc:	b087      	sub	sp, #28
    49be:	0007      	movs	r7, r0
    49c0:	4692      	mov	sl, r2
    49c2:	469b      	mov	fp, r3
    49c4:	0d76      	lsrs	r6, r6, #21
    49c6:	0fcd      	lsrs	r5, r1, #31
    49c8:	2e00      	cmp	r6, #0
    49ca:	d06b      	beq.n	4aa4 <__aeabi_dmul+0xfc>
    49cc:	4b6d      	ldr	r3, [pc, #436]	; (4b84 <__aeabi_dmul+0x1dc>)
    49ce:	429e      	cmp	r6, r3
    49d0:	d035      	beq.n	4a3e <__aeabi_dmul+0x96>
    49d2:	2480      	movs	r4, #128	; 0x80
    49d4:	465b      	mov	r3, fp
    49d6:	0f42      	lsrs	r2, r0, #29
    49d8:	0424      	lsls	r4, r4, #16
    49da:	00db      	lsls	r3, r3, #3
    49dc:	4314      	orrs	r4, r2
    49de:	431c      	orrs	r4, r3
    49e0:	00c3      	lsls	r3, r0, #3
    49e2:	4699      	mov	r9, r3
    49e4:	4b68      	ldr	r3, [pc, #416]	; (4b88 <__aeabi_dmul+0x1e0>)
    49e6:	46a3      	mov	fp, r4
    49e8:	469c      	mov	ip, r3
    49ea:	2300      	movs	r3, #0
    49ec:	2700      	movs	r7, #0
    49ee:	4466      	add	r6, ip
    49f0:	9302      	str	r3, [sp, #8]
    49f2:	4643      	mov	r3, r8
    49f4:	031c      	lsls	r4, r3, #12
    49f6:	005a      	lsls	r2, r3, #1
    49f8:	0fdb      	lsrs	r3, r3, #31
    49fa:	4650      	mov	r0, sl
    49fc:	0b24      	lsrs	r4, r4, #12
    49fe:	0d52      	lsrs	r2, r2, #21
    4a00:	4698      	mov	r8, r3
    4a02:	d100      	bne.n	4a06 <__aeabi_dmul+0x5e>
    4a04:	e076      	b.n	4af4 <__aeabi_dmul+0x14c>
    4a06:	4b5f      	ldr	r3, [pc, #380]	; (4b84 <__aeabi_dmul+0x1dc>)
    4a08:	429a      	cmp	r2, r3
    4a0a:	d06d      	beq.n	4ae8 <__aeabi_dmul+0x140>
    4a0c:	2380      	movs	r3, #128	; 0x80
    4a0e:	0f41      	lsrs	r1, r0, #29
    4a10:	041b      	lsls	r3, r3, #16
    4a12:	430b      	orrs	r3, r1
    4a14:	495c      	ldr	r1, [pc, #368]	; (4b88 <__aeabi_dmul+0x1e0>)
    4a16:	00e4      	lsls	r4, r4, #3
    4a18:	468c      	mov	ip, r1
    4a1a:	431c      	orrs	r4, r3
    4a1c:	00c3      	lsls	r3, r0, #3
    4a1e:	2000      	movs	r0, #0
    4a20:	4462      	add	r2, ip
    4a22:	4641      	mov	r1, r8
    4a24:	18b6      	adds	r6, r6, r2
    4a26:	4069      	eors	r1, r5
    4a28:	1c72      	adds	r2, r6, #1
    4a2a:	9101      	str	r1, [sp, #4]
    4a2c:	4694      	mov	ip, r2
    4a2e:	4307      	orrs	r7, r0
    4a30:	2f0f      	cmp	r7, #15
    4a32:	d900      	bls.n	4a36 <__aeabi_dmul+0x8e>
    4a34:	e0b0      	b.n	4b98 <__aeabi_dmul+0x1f0>
    4a36:	4a55      	ldr	r2, [pc, #340]	; (4b8c <__aeabi_dmul+0x1e4>)
    4a38:	00bf      	lsls	r7, r7, #2
    4a3a:	59d2      	ldr	r2, [r2, r7]
    4a3c:	4697      	mov	pc, r2
    4a3e:	465b      	mov	r3, fp
    4a40:	4303      	orrs	r3, r0
    4a42:	4699      	mov	r9, r3
    4a44:	d000      	beq.n	4a48 <__aeabi_dmul+0xa0>
    4a46:	e087      	b.n	4b58 <__aeabi_dmul+0x1b0>
    4a48:	2300      	movs	r3, #0
    4a4a:	469b      	mov	fp, r3
    4a4c:	3302      	adds	r3, #2
    4a4e:	2708      	movs	r7, #8
    4a50:	9302      	str	r3, [sp, #8]
    4a52:	e7ce      	b.n	49f2 <__aeabi_dmul+0x4a>
    4a54:	4642      	mov	r2, r8
    4a56:	9201      	str	r2, [sp, #4]
    4a58:	2802      	cmp	r0, #2
    4a5a:	d067      	beq.n	4b2c <__aeabi_dmul+0x184>
    4a5c:	2803      	cmp	r0, #3
    4a5e:	d100      	bne.n	4a62 <__aeabi_dmul+0xba>
    4a60:	e20e      	b.n	4e80 <__aeabi_dmul+0x4d8>
    4a62:	2801      	cmp	r0, #1
    4a64:	d000      	beq.n	4a68 <__aeabi_dmul+0xc0>
    4a66:	e162      	b.n	4d2e <__aeabi_dmul+0x386>
    4a68:	2300      	movs	r3, #0
    4a6a:	2400      	movs	r4, #0
    4a6c:	2200      	movs	r2, #0
    4a6e:	4699      	mov	r9, r3
    4a70:	9901      	ldr	r1, [sp, #4]
    4a72:	4001      	ands	r1, r0
    4a74:	b2cd      	uxtb	r5, r1
    4a76:	2100      	movs	r1, #0
    4a78:	0312      	lsls	r2, r2, #12
    4a7a:	0d0b      	lsrs	r3, r1, #20
    4a7c:	0b12      	lsrs	r2, r2, #12
    4a7e:	051b      	lsls	r3, r3, #20
    4a80:	4313      	orrs	r3, r2
    4a82:	4a43      	ldr	r2, [pc, #268]	; (4b90 <__aeabi_dmul+0x1e8>)
    4a84:	0524      	lsls	r4, r4, #20
    4a86:	4013      	ands	r3, r2
    4a88:	431c      	orrs	r4, r3
    4a8a:	0064      	lsls	r4, r4, #1
    4a8c:	07ed      	lsls	r5, r5, #31
    4a8e:	0864      	lsrs	r4, r4, #1
    4a90:	432c      	orrs	r4, r5
    4a92:	4648      	mov	r0, r9
    4a94:	0021      	movs	r1, r4
    4a96:	b007      	add	sp, #28
    4a98:	bc3c      	pop	{r2, r3, r4, r5}
    4a9a:	4690      	mov	r8, r2
    4a9c:	4699      	mov	r9, r3
    4a9e:	46a2      	mov	sl, r4
    4aa0:	46ab      	mov	fp, r5
    4aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aa4:	4303      	orrs	r3, r0
    4aa6:	4699      	mov	r9, r3
    4aa8:	d04f      	beq.n	4b4a <__aeabi_dmul+0x1a2>
    4aaa:	465b      	mov	r3, fp
    4aac:	2b00      	cmp	r3, #0
    4aae:	d100      	bne.n	4ab2 <__aeabi_dmul+0x10a>
    4ab0:	e189      	b.n	4dc6 <__aeabi_dmul+0x41e>
    4ab2:	4658      	mov	r0, fp
    4ab4:	f000 fdbc 	bl	5630 <__clzsi2>
    4ab8:	0003      	movs	r3, r0
    4aba:	3b0b      	subs	r3, #11
    4abc:	2b1c      	cmp	r3, #28
    4abe:	dd00      	ble.n	4ac2 <__aeabi_dmul+0x11a>
    4ac0:	e17a      	b.n	4db8 <__aeabi_dmul+0x410>
    4ac2:	221d      	movs	r2, #29
    4ac4:	1ad3      	subs	r3, r2, r3
    4ac6:	003a      	movs	r2, r7
    4ac8:	0001      	movs	r1, r0
    4aca:	465c      	mov	r4, fp
    4acc:	40da      	lsrs	r2, r3
    4ace:	3908      	subs	r1, #8
    4ad0:	408c      	lsls	r4, r1
    4ad2:	0013      	movs	r3, r2
    4ad4:	408f      	lsls	r7, r1
    4ad6:	4323      	orrs	r3, r4
    4ad8:	469b      	mov	fp, r3
    4ada:	46b9      	mov	r9, r7
    4adc:	2300      	movs	r3, #0
    4ade:	4e2d      	ldr	r6, [pc, #180]	; (4b94 <__aeabi_dmul+0x1ec>)
    4ae0:	2700      	movs	r7, #0
    4ae2:	1a36      	subs	r6, r6, r0
    4ae4:	9302      	str	r3, [sp, #8]
    4ae6:	e784      	b.n	49f2 <__aeabi_dmul+0x4a>
    4ae8:	4653      	mov	r3, sl
    4aea:	4323      	orrs	r3, r4
    4aec:	d12a      	bne.n	4b44 <__aeabi_dmul+0x19c>
    4aee:	2400      	movs	r4, #0
    4af0:	2002      	movs	r0, #2
    4af2:	e796      	b.n	4a22 <__aeabi_dmul+0x7a>
    4af4:	4653      	mov	r3, sl
    4af6:	4323      	orrs	r3, r4
    4af8:	d020      	beq.n	4b3c <__aeabi_dmul+0x194>
    4afa:	2c00      	cmp	r4, #0
    4afc:	d100      	bne.n	4b00 <__aeabi_dmul+0x158>
    4afe:	e157      	b.n	4db0 <__aeabi_dmul+0x408>
    4b00:	0020      	movs	r0, r4
    4b02:	f000 fd95 	bl	5630 <__clzsi2>
    4b06:	0003      	movs	r3, r0
    4b08:	3b0b      	subs	r3, #11
    4b0a:	2b1c      	cmp	r3, #28
    4b0c:	dd00      	ble.n	4b10 <__aeabi_dmul+0x168>
    4b0e:	e149      	b.n	4da4 <__aeabi_dmul+0x3fc>
    4b10:	211d      	movs	r1, #29
    4b12:	1acb      	subs	r3, r1, r3
    4b14:	4651      	mov	r1, sl
    4b16:	0002      	movs	r2, r0
    4b18:	40d9      	lsrs	r1, r3
    4b1a:	4653      	mov	r3, sl
    4b1c:	3a08      	subs	r2, #8
    4b1e:	4094      	lsls	r4, r2
    4b20:	4093      	lsls	r3, r2
    4b22:	430c      	orrs	r4, r1
    4b24:	4a1b      	ldr	r2, [pc, #108]	; (4b94 <__aeabi_dmul+0x1ec>)
    4b26:	1a12      	subs	r2, r2, r0
    4b28:	2000      	movs	r0, #0
    4b2a:	e77a      	b.n	4a22 <__aeabi_dmul+0x7a>
    4b2c:	2501      	movs	r5, #1
    4b2e:	9b01      	ldr	r3, [sp, #4]
    4b30:	4c14      	ldr	r4, [pc, #80]	; (4b84 <__aeabi_dmul+0x1dc>)
    4b32:	401d      	ands	r5, r3
    4b34:	2300      	movs	r3, #0
    4b36:	2200      	movs	r2, #0
    4b38:	4699      	mov	r9, r3
    4b3a:	e79c      	b.n	4a76 <__aeabi_dmul+0xce>
    4b3c:	2400      	movs	r4, #0
    4b3e:	2200      	movs	r2, #0
    4b40:	2001      	movs	r0, #1
    4b42:	e76e      	b.n	4a22 <__aeabi_dmul+0x7a>
    4b44:	4653      	mov	r3, sl
    4b46:	2003      	movs	r0, #3
    4b48:	e76b      	b.n	4a22 <__aeabi_dmul+0x7a>
    4b4a:	2300      	movs	r3, #0
    4b4c:	469b      	mov	fp, r3
    4b4e:	3301      	adds	r3, #1
    4b50:	2704      	movs	r7, #4
    4b52:	2600      	movs	r6, #0
    4b54:	9302      	str	r3, [sp, #8]
    4b56:	e74c      	b.n	49f2 <__aeabi_dmul+0x4a>
    4b58:	2303      	movs	r3, #3
    4b5a:	4681      	mov	r9, r0
    4b5c:	270c      	movs	r7, #12
    4b5e:	9302      	str	r3, [sp, #8]
    4b60:	e747      	b.n	49f2 <__aeabi_dmul+0x4a>
    4b62:	2280      	movs	r2, #128	; 0x80
    4b64:	2300      	movs	r3, #0
    4b66:	2500      	movs	r5, #0
    4b68:	0312      	lsls	r2, r2, #12
    4b6a:	4699      	mov	r9, r3
    4b6c:	4c05      	ldr	r4, [pc, #20]	; (4b84 <__aeabi_dmul+0x1dc>)
    4b6e:	e782      	b.n	4a76 <__aeabi_dmul+0xce>
    4b70:	465c      	mov	r4, fp
    4b72:	464b      	mov	r3, r9
    4b74:	9802      	ldr	r0, [sp, #8]
    4b76:	e76f      	b.n	4a58 <__aeabi_dmul+0xb0>
    4b78:	465c      	mov	r4, fp
    4b7a:	464b      	mov	r3, r9
    4b7c:	9501      	str	r5, [sp, #4]
    4b7e:	9802      	ldr	r0, [sp, #8]
    4b80:	e76a      	b.n	4a58 <__aeabi_dmul+0xb0>
    4b82:	46c0      	nop			; (mov r8, r8)
    4b84:	000007ff 	.word	0x000007ff
    4b88:	fffffc01 	.word	0xfffffc01
    4b8c:	000060a0 	.word	0x000060a0
    4b90:	800fffff 	.word	0x800fffff
    4b94:	fffffc0d 	.word	0xfffffc0d
    4b98:	464a      	mov	r2, r9
    4b9a:	4649      	mov	r1, r9
    4b9c:	0c17      	lsrs	r7, r2, #16
    4b9e:	0c1a      	lsrs	r2, r3, #16
    4ba0:	041b      	lsls	r3, r3, #16
    4ba2:	0c1b      	lsrs	r3, r3, #16
    4ba4:	0408      	lsls	r0, r1, #16
    4ba6:	0019      	movs	r1, r3
    4ba8:	0c00      	lsrs	r0, r0, #16
    4baa:	4341      	muls	r1, r0
    4bac:	0015      	movs	r5, r2
    4bae:	4688      	mov	r8, r1
    4bb0:	0019      	movs	r1, r3
    4bb2:	437d      	muls	r5, r7
    4bb4:	4379      	muls	r1, r7
    4bb6:	9503      	str	r5, [sp, #12]
    4bb8:	4689      	mov	r9, r1
    4bba:	0029      	movs	r1, r5
    4bbc:	0015      	movs	r5, r2
    4bbe:	4345      	muls	r5, r0
    4bc0:	444d      	add	r5, r9
    4bc2:	9502      	str	r5, [sp, #8]
    4bc4:	4645      	mov	r5, r8
    4bc6:	0c2d      	lsrs	r5, r5, #16
    4bc8:	46aa      	mov	sl, r5
    4bca:	9d02      	ldr	r5, [sp, #8]
    4bcc:	4455      	add	r5, sl
    4bce:	45a9      	cmp	r9, r5
    4bd0:	d906      	bls.n	4be0 <__aeabi_dmul+0x238>
    4bd2:	468a      	mov	sl, r1
    4bd4:	2180      	movs	r1, #128	; 0x80
    4bd6:	0249      	lsls	r1, r1, #9
    4bd8:	4689      	mov	r9, r1
    4bda:	44ca      	add	sl, r9
    4bdc:	4651      	mov	r1, sl
    4bde:	9103      	str	r1, [sp, #12]
    4be0:	0c29      	lsrs	r1, r5, #16
    4be2:	9104      	str	r1, [sp, #16]
    4be4:	4641      	mov	r1, r8
    4be6:	0409      	lsls	r1, r1, #16
    4be8:	042d      	lsls	r5, r5, #16
    4bea:	0c09      	lsrs	r1, r1, #16
    4bec:	4688      	mov	r8, r1
    4bee:	0029      	movs	r1, r5
    4bf0:	0c25      	lsrs	r5, r4, #16
    4bf2:	0424      	lsls	r4, r4, #16
    4bf4:	4441      	add	r1, r8
    4bf6:	0c24      	lsrs	r4, r4, #16
    4bf8:	9105      	str	r1, [sp, #20]
    4bfa:	0021      	movs	r1, r4
    4bfc:	4341      	muls	r1, r0
    4bfe:	4688      	mov	r8, r1
    4c00:	0021      	movs	r1, r4
    4c02:	4379      	muls	r1, r7
    4c04:	468a      	mov	sl, r1
    4c06:	4368      	muls	r0, r5
    4c08:	4641      	mov	r1, r8
    4c0a:	4450      	add	r0, sl
    4c0c:	4681      	mov	r9, r0
    4c0e:	0c08      	lsrs	r0, r1, #16
    4c10:	4448      	add	r0, r9
    4c12:	436f      	muls	r7, r5
    4c14:	4582      	cmp	sl, r0
    4c16:	d903      	bls.n	4c20 <__aeabi_dmul+0x278>
    4c18:	2180      	movs	r1, #128	; 0x80
    4c1a:	0249      	lsls	r1, r1, #9
    4c1c:	4689      	mov	r9, r1
    4c1e:	444f      	add	r7, r9
    4c20:	0c01      	lsrs	r1, r0, #16
    4c22:	4689      	mov	r9, r1
    4c24:	0039      	movs	r1, r7
    4c26:	4449      	add	r1, r9
    4c28:	9102      	str	r1, [sp, #8]
    4c2a:	4641      	mov	r1, r8
    4c2c:	040f      	lsls	r7, r1, #16
    4c2e:	9904      	ldr	r1, [sp, #16]
    4c30:	0c3f      	lsrs	r7, r7, #16
    4c32:	4688      	mov	r8, r1
    4c34:	0400      	lsls	r0, r0, #16
    4c36:	19c0      	adds	r0, r0, r7
    4c38:	4480      	add	r8, r0
    4c3a:	4641      	mov	r1, r8
    4c3c:	9104      	str	r1, [sp, #16]
    4c3e:	4659      	mov	r1, fp
    4c40:	0c0f      	lsrs	r7, r1, #16
    4c42:	0409      	lsls	r1, r1, #16
    4c44:	0c09      	lsrs	r1, r1, #16
    4c46:	4688      	mov	r8, r1
    4c48:	4359      	muls	r1, r3
    4c4a:	468a      	mov	sl, r1
    4c4c:	0039      	movs	r1, r7
    4c4e:	4351      	muls	r1, r2
    4c50:	4689      	mov	r9, r1
    4c52:	4641      	mov	r1, r8
    4c54:	434a      	muls	r2, r1
    4c56:	4651      	mov	r1, sl
    4c58:	0c09      	lsrs	r1, r1, #16
    4c5a:	468b      	mov	fp, r1
    4c5c:	437b      	muls	r3, r7
    4c5e:	18d2      	adds	r2, r2, r3
    4c60:	445a      	add	r2, fp
    4c62:	4293      	cmp	r3, r2
    4c64:	d903      	bls.n	4c6e <__aeabi_dmul+0x2c6>
    4c66:	2380      	movs	r3, #128	; 0x80
    4c68:	025b      	lsls	r3, r3, #9
    4c6a:	469b      	mov	fp, r3
    4c6c:	44d9      	add	r9, fp
    4c6e:	4651      	mov	r1, sl
    4c70:	0409      	lsls	r1, r1, #16
    4c72:	0c09      	lsrs	r1, r1, #16
    4c74:	468a      	mov	sl, r1
    4c76:	4641      	mov	r1, r8
    4c78:	4361      	muls	r1, r4
    4c7a:	437c      	muls	r4, r7
    4c7c:	0c13      	lsrs	r3, r2, #16
    4c7e:	0412      	lsls	r2, r2, #16
    4c80:	444b      	add	r3, r9
    4c82:	4452      	add	r2, sl
    4c84:	46a1      	mov	r9, r4
    4c86:	468a      	mov	sl, r1
    4c88:	003c      	movs	r4, r7
    4c8a:	4641      	mov	r1, r8
    4c8c:	436c      	muls	r4, r5
    4c8e:	434d      	muls	r5, r1
    4c90:	4651      	mov	r1, sl
    4c92:	444d      	add	r5, r9
    4c94:	0c0f      	lsrs	r7, r1, #16
    4c96:	197d      	adds	r5, r7, r5
    4c98:	45a9      	cmp	r9, r5
    4c9a:	d903      	bls.n	4ca4 <__aeabi_dmul+0x2fc>
    4c9c:	2180      	movs	r1, #128	; 0x80
    4c9e:	0249      	lsls	r1, r1, #9
    4ca0:	4688      	mov	r8, r1
    4ca2:	4444      	add	r4, r8
    4ca4:	9f04      	ldr	r7, [sp, #16]
    4ca6:	9903      	ldr	r1, [sp, #12]
    4ca8:	46b8      	mov	r8, r7
    4caa:	4441      	add	r1, r8
    4cac:	468b      	mov	fp, r1
    4cae:	4583      	cmp	fp, r0
    4cb0:	4180      	sbcs	r0, r0
    4cb2:	4241      	negs	r1, r0
    4cb4:	4688      	mov	r8, r1
    4cb6:	4651      	mov	r1, sl
    4cb8:	0408      	lsls	r0, r1, #16
    4cba:	042f      	lsls	r7, r5, #16
    4cbc:	0c00      	lsrs	r0, r0, #16
    4cbe:	183f      	adds	r7, r7, r0
    4cc0:	4658      	mov	r0, fp
    4cc2:	9902      	ldr	r1, [sp, #8]
    4cc4:	1810      	adds	r0, r2, r0
    4cc6:	4689      	mov	r9, r1
    4cc8:	4290      	cmp	r0, r2
    4cca:	4192      	sbcs	r2, r2
    4ccc:	444f      	add	r7, r9
    4cce:	46ba      	mov	sl, r7
    4cd0:	4252      	negs	r2, r2
    4cd2:	4699      	mov	r9, r3
    4cd4:	4693      	mov	fp, r2
    4cd6:	44c2      	add	sl, r8
    4cd8:	44d1      	add	r9, sl
    4cda:	44cb      	add	fp, r9
    4cdc:	428f      	cmp	r7, r1
    4cde:	41bf      	sbcs	r7, r7
    4ce0:	45c2      	cmp	sl, r8
    4ce2:	4189      	sbcs	r1, r1
    4ce4:	4599      	cmp	r9, r3
    4ce6:	419b      	sbcs	r3, r3
    4ce8:	4593      	cmp	fp, r2
    4cea:	4192      	sbcs	r2, r2
    4cec:	427f      	negs	r7, r7
    4cee:	4249      	negs	r1, r1
    4cf0:	0c2d      	lsrs	r5, r5, #16
    4cf2:	4252      	negs	r2, r2
    4cf4:	430f      	orrs	r7, r1
    4cf6:	425b      	negs	r3, r3
    4cf8:	4313      	orrs	r3, r2
    4cfa:	197f      	adds	r7, r7, r5
    4cfc:	18ff      	adds	r7, r7, r3
    4cfe:	465b      	mov	r3, fp
    4d00:	193c      	adds	r4, r7, r4
    4d02:	0ddb      	lsrs	r3, r3, #23
    4d04:	9a05      	ldr	r2, [sp, #20]
    4d06:	0264      	lsls	r4, r4, #9
    4d08:	431c      	orrs	r4, r3
    4d0a:	0243      	lsls	r3, r0, #9
    4d0c:	4313      	orrs	r3, r2
    4d0e:	1e5d      	subs	r5, r3, #1
    4d10:	41ab      	sbcs	r3, r5
    4d12:	465a      	mov	r2, fp
    4d14:	0dc0      	lsrs	r0, r0, #23
    4d16:	4303      	orrs	r3, r0
    4d18:	0252      	lsls	r2, r2, #9
    4d1a:	4313      	orrs	r3, r2
    4d1c:	01e2      	lsls	r2, r4, #7
    4d1e:	d556      	bpl.n	4dce <__aeabi_dmul+0x426>
    4d20:	2001      	movs	r0, #1
    4d22:	085a      	lsrs	r2, r3, #1
    4d24:	4003      	ands	r3, r0
    4d26:	4313      	orrs	r3, r2
    4d28:	07e2      	lsls	r2, r4, #31
    4d2a:	4313      	orrs	r3, r2
    4d2c:	0864      	lsrs	r4, r4, #1
    4d2e:	485a      	ldr	r0, [pc, #360]	; (4e98 <__aeabi_dmul+0x4f0>)
    4d30:	4460      	add	r0, ip
    4d32:	2800      	cmp	r0, #0
    4d34:	dd4d      	ble.n	4dd2 <__aeabi_dmul+0x42a>
    4d36:	075a      	lsls	r2, r3, #29
    4d38:	d009      	beq.n	4d4e <__aeabi_dmul+0x3a6>
    4d3a:	220f      	movs	r2, #15
    4d3c:	401a      	ands	r2, r3
    4d3e:	2a04      	cmp	r2, #4
    4d40:	d005      	beq.n	4d4e <__aeabi_dmul+0x3a6>
    4d42:	1d1a      	adds	r2, r3, #4
    4d44:	429a      	cmp	r2, r3
    4d46:	419b      	sbcs	r3, r3
    4d48:	425b      	negs	r3, r3
    4d4a:	18e4      	adds	r4, r4, r3
    4d4c:	0013      	movs	r3, r2
    4d4e:	01e2      	lsls	r2, r4, #7
    4d50:	d504      	bpl.n	4d5c <__aeabi_dmul+0x3b4>
    4d52:	2080      	movs	r0, #128	; 0x80
    4d54:	4a51      	ldr	r2, [pc, #324]	; (4e9c <__aeabi_dmul+0x4f4>)
    4d56:	00c0      	lsls	r0, r0, #3
    4d58:	4014      	ands	r4, r2
    4d5a:	4460      	add	r0, ip
    4d5c:	4a50      	ldr	r2, [pc, #320]	; (4ea0 <__aeabi_dmul+0x4f8>)
    4d5e:	4290      	cmp	r0, r2
    4d60:	dd00      	ble.n	4d64 <__aeabi_dmul+0x3bc>
    4d62:	e6e3      	b.n	4b2c <__aeabi_dmul+0x184>
    4d64:	2501      	movs	r5, #1
    4d66:	08db      	lsrs	r3, r3, #3
    4d68:	0762      	lsls	r2, r4, #29
    4d6a:	431a      	orrs	r2, r3
    4d6c:	0264      	lsls	r4, r4, #9
    4d6e:	9b01      	ldr	r3, [sp, #4]
    4d70:	4691      	mov	r9, r2
    4d72:	0b22      	lsrs	r2, r4, #12
    4d74:	0544      	lsls	r4, r0, #21
    4d76:	0d64      	lsrs	r4, r4, #21
    4d78:	401d      	ands	r5, r3
    4d7a:	e67c      	b.n	4a76 <__aeabi_dmul+0xce>
    4d7c:	2280      	movs	r2, #128	; 0x80
    4d7e:	4659      	mov	r1, fp
    4d80:	0312      	lsls	r2, r2, #12
    4d82:	4211      	tst	r1, r2
    4d84:	d008      	beq.n	4d98 <__aeabi_dmul+0x3f0>
    4d86:	4214      	tst	r4, r2
    4d88:	d106      	bne.n	4d98 <__aeabi_dmul+0x3f0>
    4d8a:	4322      	orrs	r2, r4
    4d8c:	0312      	lsls	r2, r2, #12
    4d8e:	0b12      	lsrs	r2, r2, #12
    4d90:	4645      	mov	r5, r8
    4d92:	4699      	mov	r9, r3
    4d94:	4c43      	ldr	r4, [pc, #268]	; (4ea4 <__aeabi_dmul+0x4fc>)
    4d96:	e66e      	b.n	4a76 <__aeabi_dmul+0xce>
    4d98:	465b      	mov	r3, fp
    4d9a:	431a      	orrs	r2, r3
    4d9c:	0312      	lsls	r2, r2, #12
    4d9e:	0b12      	lsrs	r2, r2, #12
    4da0:	4c40      	ldr	r4, [pc, #256]	; (4ea4 <__aeabi_dmul+0x4fc>)
    4da2:	e668      	b.n	4a76 <__aeabi_dmul+0xce>
    4da4:	0003      	movs	r3, r0
    4da6:	4654      	mov	r4, sl
    4da8:	3b28      	subs	r3, #40	; 0x28
    4daa:	409c      	lsls	r4, r3
    4dac:	2300      	movs	r3, #0
    4dae:	e6b9      	b.n	4b24 <__aeabi_dmul+0x17c>
    4db0:	f000 fc3e 	bl	5630 <__clzsi2>
    4db4:	3020      	adds	r0, #32
    4db6:	e6a6      	b.n	4b06 <__aeabi_dmul+0x15e>
    4db8:	0003      	movs	r3, r0
    4dba:	3b28      	subs	r3, #40	; 0x28
    4dbc:	409f      	lsls	r7, r3
    4dbe:	2300      	movs	r3, #0
    4dc0:	46bb      	mov	fp, r7
    4dc2:	4699      	mov	r9, r3
    4dc4:	e68a      	b.n	4adc <__aeabi_dmul+0x134>
    4dc6:	f000 fc33 	bl	5630 <__clzsi2>
    4dca:	3020      	adds	r0, #32
    4dcc:	e674      	b.n	4ab8 <__aeabi_dmul+0x110>
    4dce:	46b4      	mov	ip, r6
    4dd0:	e7ad      	b.n	4d2e <__aeabi_dmul+0x386>
    4dd2:	2501      	movs	r5, #1
    4dd4:	1a2a      	subs	r2, r5, r0
    4dd6:	2a38      	cmp	r2, #56	; 0x38
    4dd8:	dd06      	ble.n	4de8 <__aeabi_dmul+0x440>
    4dda:	9b01      	ldr	r3, [sp, #4]
    4ddc:	2400      	movs	r4, #0
    4dde:	401d      	ands	r5, r3
    4de0:	2300      	movs	r3, #0
    4de2:	2200      	movs	r2, #0
    4de4:	4699      	mov	r9, r3
    4de6:	e646      	b.n	4a76 <__aeabi_dmul+0xce>
    4de8:	2a1f      	cmp	r2, #31
    4dea:	dc21      	bgt.n	4e30 <__aeabi_dmul+0x488>
    4dec:	2520      	movs	r5, #32
    4dee:	0020      	movs	r0, r4
    4df0:	1aad      	subs	r5, r5, r2
    4df2:	001e      	movs	r6, r3
    4df4:	40ab      	lsls	r3, r5
    4df6:	40a8      	lsls	r0, r5
    4df8:	40d6      	lsrs	r6, r2
    4dfa:	1e5d      	subs	r5, r3, #1
    4dfc:	41ab      	sbcs	r3, r5
    4dfe:	4330      	orrs	r0, r6
    4e00:	4318      	orrs	r0, r3
    4e02:	40d4      	lsrs	r4, r2
    4e04:	0743      	lsls	r3, r0, #29
    4e06:	d009      	beq.n	4e1c <__aeabi_dmul+0x474>
    4e08:	230f      	movs	r3, #15
    4e0a:	4003      	ands	r3, r0
    4e0c:	2b04      	cmp	r3, #4
    4e0e:	d005      	beq.n	4e1c <__aeabi_dmul+0x474>
    4e10:	0003      	movs	r3, r0
    4e12:	1d18      	adds	r0, r3, #4
    4e14:	4298      	cmp	r0, r3
    4e16:	419b      	sbcs	r3, r3
    4e18:	425b      	negs	r3, r3
    4e1a:	18e4      	adds	r4, r4, r3
    4e1c:	0223      	lsls	r3, r4, #8
    4e1e:	d521      	bpl.n	4e64 <__aeabi_dmul+0x4bc>
    4e20:	2501      	movs	r5, #1
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	2401      	movs	r4, #1
    4e26:	401d      	ands	r5, r3
    4e28:	2300      	movs	r3, #0
    4e2a:	2200      	movs	r2, #0
    4e2c:	4699      	mov	r9, r3
    4e2e:	e622      	b.n	4a76 <__aeabi_dmul+0xce>
    4e30:	251f      	movs	r5, #31
    4e32:	0021      	movs	r1, r4
    4e34:	426d      	negs	r5, r5
    4e36:	1a28      	subs	r0, r5, r0
    4e38:	40c1      	lsrs	r1, r0
    4e3a:	0008      	movs	r0, r1
    4e3c:	2a20      	cmp	r2, #32
    4e3e:	d01d      	beq.n	4e7c <__aeabi_dmul+0x4d4>
    4e40:	355f      	adds	r5, #95	; 0x5f
    4e42:	1aaa      	subs	r2, r5, r2
    4e44:	4094      	lsls	r4, r2
    4e46:	4323      	orrs	r3, r4
    4e48:	1e5c      	subs	r4, r3, #1
    4e4a:	41a3      	sbcs	r3, r4
    4e4c:	2507      	movs	r5, #7
    4e4e:	4303      	orrs	r3, r0
    4e50:	401d      	ands	r5, r3
    4e52:	2200      	movs	r2, #0
    4e54:	2d00      	cmp	r5, #0
    4e56:	d009      	beq.n	4e6c <__aeabi_dmul+0x4c4>
    4e58:	220f      	movs	r2, #15
    4e5a:	2400      	movs	r4, #0
    4e5c:	401a      	ands	r2, r3
    4e5e:	0018      	movs	r0, r3
    4e60:	2a04      	cmp	r2, #4
    4e62:	d1d6      	bne.n	4e12 <__aeabi_dmul+0x46a>
    4e64:	0003      	movs	r3, r0
    4e66:	0765      	lsls	r5, r4, #29
    4e68:	0264      	lsls	r4, r4, #9
    4e6a:	0b22      	lsrs	r2, r4, #12
    4e6c:	08db      	lsrs	r3, r3, #3
    4e6e:	432b      	orrs	r3, r5
    4e70:	2501      	movs	r5, #1
    4e72:	4699      	mov	r9, r3
    4e74:	9b01      	ldr	r3, [sp, #4]
    4e76:	2400      	movs	r4, #0
    4e78:	401d      	ands	r5, r3
    4e7a:	e5fc      	b.n	4a76 <__aeabi_dmul+0xce>
    4e7c:	2400      	movs	r4, #0
    4e7e:	e7e2      	b.n	4e46 <__aeabi_dmul+0x49e>
    4e80:	2280      	movs	r2, #128	; 0x80
    4e82:	2501      	movs	r5, #1
    4e84:	0312      	lsls	r2, r2, #12
    4e86:	4322      	orrs	r2, r4
    4e88:	9901      	ldr	r1, [sp, #4]
    4e8a:	0312      	lsls	r2, r2, #12
    4e8c:	0b12      	lsrs	r2, r2, #12
    4e8e:	400d      	ands	r5, r1
    4e90:	4699      	mov	r9, r3
    4e92:	4c04      	ldr	r4, [pc, #16]	; (4ea4 <__aeabi_dmul+0x4fc>)
    4e94:	e5ef      	b.n	4a76 <__aeabi_dmul+0xce>
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	000003ff 	.word	0x000003ff
    4e9c:	feffffff 	.word	0xfeffffff
    4ea0:	000007fe 	.word	0x000007fe
    4ea4:	000007ff 	.word	0x000007ff

00004ea8 <__aeabi_dsub>:
    4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eaa:	4646      	mov	r6, r8
    4eac:	46d6      	mov	lr, sl
    4eae:	464f      	mov	r7, r9
    4eb0:	030c      	lsls	r4, r1, #12
    4eb2:	b5c0      	push	{r6, r7, lr}
    4eb4:	0fcd      	lsrs	r5, r1, #31
    4eb6:	004e      	lsls	r6, r1, #1
    4eb8:	0a61      	lsrs	r1, r4, #9
    4eba:	0f44      	lsrs	r4, r0, #29
    4ebc:	430c      	orrs	r4, r1
    4ebe:	00c1      	lsls	r1, r0, #3
    4ec0:	0058      	lsls	r0, r3, #1
    4ec2:	0d40      	lsrs	r0, r0, #21
    4ec4:	4684      	mov	ip, r0
    4ec6:	468a      	mov	sl, r1
    4ec8:	000f      	movs	r7, r1
    4eca:	0319      	lsls	r1, r3, #12
    4ecc:	0f50      	lsrs	r0, r2, #29
    4ece:	0a49      	lsrs	r1, r1, #9
    4ed0:	4301      	orrs	r1, r0
    4ed2:	48c6      	ldr	r0, [pc, #792]	; (51ec <__aeabi_dsub+0x344>)
    4ed4:	0d76      	lsrs	r6, r6, #21
    4ed6:	46a8      	mov	r8, r5
    4ed8:	0fdb      	lsrs	r3, r3, #31
    4eda:	00d2      	lsls	r2, r2, #3
    4edc:	4584      	cmp	ip, r0
    4ede:	d100      	bne.n	4ee2 <__aeabi_dsub+0x3a>
    4ee0:	e0d8      	b.n	5094 <__aeabi_dsub+0x1ec>
    4ee2:	2001      	movs	r0, #1
    4ee4:	4043      	eors	r3, r0
    4ee6:	42ab      	cmp	r3, r5
    4ee8:	d100      	bne.n	4eec <__aeabi_dsub+0x44>
    4eea:	e0a6      	b.n	503a <__aeabi_dsub+0x192>
    4eec:	4660      	mov	r0, ip
    4eee:	1a35      	subs	r5, r6, r0
    4ef0:	2d00      	cmp	r5, #0
    4ef2:	dc00      	bgt.n	4ef6 <__aeabi_dsub+0x4e>
    4ef4:	e105      	b.n	5102 <__aeabi_dsub+0x25a>
    4ef6:	2800      	cmp	r0, #0
    4ef8:	d110      	bne.n	4f1c <__aeabi_dsub+0x74>
    4efa:	000b      	movs	r3, r1
    4efc:	4313      	orrs	r3, r2
    4efe:	d100      	bne.n	4f02 <__aeabi_dsub+0x5a>
    4f00:	e0d7      	b.n	50b2 <__aeabi_dsub+0x20a>
    4f02:	1e6b      	subs	r3, r5, #1
    4f04:	2b00      	cmp	r3, #0
    4f06:	d000      	beq.n	4f0a <__aeabi_dsub+0x62>
    4f08:	e14b      	b.n	51a2 <__aeabi_dsub+0x2fa>
    4f0a:	4653      	mov	r3, sl
    4f0c:	1a9f      	subs	r7, r3, r2
    4f0e:	45ba      	cmp	sl, r7
    4f10:	4180      	sbcs	r0, r0
    4f12:	1a64      	subs	r4, r4, r1
    4f14:	4240      	negs	r0, r0
    4f16:	1a24      	subs	r4, r4, r0
    4f18:	2601      	movs	r6, #1
    4f1a:	e01e      	b.n	4f5a <__aeabi_dsub+0xb2>
    4f1c:	4bb3      	ldr	r3, [pc, #716]	; (51ec <__aeabi_dsub+0x344>)
    4f1e:	429e      	cmp	r6, r3
    4f20:	d048      	beq.n	4fb4 <__aeabi_dsub+0x10c>
    4f22:	2380      	movs	r3, #128	; 0x80
    4f24:	041b      	lsls	r3, r3, #16
    4f26:	4319      	orrs	r1, r3
    4f28:	2d38      	cmp	r5, #56	; 0x38
    4f2a:	dd00      	ble.n	4f2e <__aeabi_dsub+0x86>
    4f2c:	e119      	b.n	5162 <__aeabi_dsub+0x2ba>
    4f2e:	2d1f      	cmp	r5, #31
    4f30:	dd00      	ble.n	4f34 <__aeabi_dsub+0x8c>
    4f32:	e14c      	b.n	51ce <__aeabi_dsub+0x326>
    4f34:	2320      	movs	r3, #32
    4f36:	000f      	movs	r7, r1
    4f38:	1b5b      	subs	r3, r3, r5
    4f3a:	0010      	movs	r0, r2
    4f3c:	409a      	lsls	r2, r3
    4f3e:	409f      	lsls	r7, r3
    4f40:	40e8      	lsrs	r0, r5
    4f42:	1e53      	subs	r3, r2, #1
    4f44:	419a      	sbcs	r2, r3
    4f46:	40e9      	lsrs	r1, r5
    4f48:	4307      	orrs	r7, r0
    4f4a:	4317      	orrs	r7, r2
    4f4c:	4653      	mov	r3, sl
    4f4e:	1bdf      	subs	r7, r3, r7
    4f50:	1a61      	subs	r1, r4, r1
    4f52:	45ba      	cmp	sl, r7
    4f54:	41a4      	sbcs	r4, r4
    4f56:	4264      	negs	r4, r4
    4f58:	1b0c      	subs	r4, r1, r4
    4f5a:	0223      	lsls	r3, r4, #8
    4f5c:	d400      	bmi.n	4f60 <__aeabi_dsub+0xb8>
    4f5e:	e0c5      	b.n	50ec <__aeabi_dsub+0x244>
    4f60:	0264      	lsls	r4, r4, #9
    4f62:	0a65      	lsrs	r5, r4, #9
    4f64:	2d00      	cmp	r5, #0
    4f66:	d100      	bne.n	4f6a <__aeabi_dsub+0xc2>
    4f68:	e0f6      	b.n	5158 <__aeabi_dsub+0x2b0>
    4f6a:	0028      	movs	r0, r5
    4f6c:	f000 fb60 	bl	5630 <__clzsi2>
    4f70:	0003      	movs	r3, r0
    4f72:	3b08      	subs	r3, #8
    4f74:	2b1f      	cmp	r3, #31
    4f76:	dd00      	ble.n	4f7a <__aeabi_dsub+0xd2>
    4f78:	e0e9      	b.n	514e <__aeabi_dsub+0x2a6>
    4f7a:	2220      	movs	r2, #32
    4f7c:	003c      	movs	r4, r7
    4f7e:	1ad2      	subs	r2, r2, r3
    4f80:	409d      	lsls	r5, r3
    4f82:	40d4      	lsrs	r4, r2
    4f84:	409f      	lsls	r7, r3
    4f86:	4325      	orrs	r5, r4
    4f88:	429e      	cmp	r6, r3
    4f8a:	dd00      	ble.n	4f8e <__aeabi_dsub+0xe6>
    4f8c:	e0db      	b.n	5146 <__aeabi_dsub+0x29e>
    4f8e:	1b9e      	subs	r6, r3, r6
    4f90:	1c73      	adds	r3, r6, #1
    4f92:	2b1f      	cmp	r3, #31
    4f94:	dd00      	ble.n	4f98 <__aeabi_dsub+0xf0>
    4f96:	e10a      	b.n	51ae <__aeabi_dsub+0x306>
    4f98:	2220      	movs	r2, #32
    4f9a:	0038      	movs	r0, r7
    4f9c:	1ad2      	subs	r2, r2, r3
    4f9e:	0029      	movs	r1, r5
    4fa0:	4097      	lsls	r7, r2
    4fa2:	002c      	movs	r4, r5
    4fa4:	4091      	lsls	r1, r2
    4fa6:	40d8      	lsrs	r0, r3
    4fa8:	1e7a      	subs	r2, r7, #1
    4faa:	4197      	sbcs	r7, r2
    4fac:	40dc      	lsrs	r4, r3
    4fae:	2600      	movs	r6, #0
    4fb0:	4301      	orrs	r1, r0
    4fb2:	430f      	orrs	r7, r1
    4fb4:	077b      	lsls	r3, r7, #29
    4fb6:	d009      	beq.n	4fcc <__aeabi_dsub+0x124>
    4fb8:	230f      	movs	r3, #15
    4fba:	403b      	ands	r3, r7
    4fbc:	2b04      	cmp	r3, #4
    4fbe:	d005      	beq.n	4fcc <__aeabi_dsub+0x124>
    4fc0:	1d3b      	adds	r3, r7, #4
    4fc2:	42bb      	cmp	r3, r7
    4fc4:	41bf      	sbcs	r7, r7
    4fc6:	427f      	negs	r7, r7
    4fc8:	19e4      	adds	r4, r4, r7
    4fca:	001f      	movs	r7, r3
    4fcc:	0223      	lsls	r3, r4, #8
    4fce:	d525      	bpl.n	501c <__aeabi_dsub+0x174>
    4fd0:	4b86      	ldr	r3, [pc, #536]	; (51ec <__aeabi_dsub+0x344>)
    4fd2:	3601      	adds	r6, #1
    4fd4:	429e      	cmp	r6, r3
    4fd6:	d100      	bne.n	4fda <__aeabi_dsub+0x132>
    4fd8:	e0af      	b.n	513a <__aeabi_dsub+0x292>
    4fda:	4b85      	ldr	r3, [pc, #532]	; (51f0 <__aeabi_dsub+0x348>)
    4fdc:	2501      	movs	r5, #1
    4fde:	401c      	ands	r4, r3
    4fe0:	4643      	mov	r3, r8
    4fe2:	0762      	lsls	r2, r4, #29
    4fe4:	08ff      	lsrs	r7, r7, #3
    4fe6:	0264      	lsls	r4, r4, #9
    4fe8:	0576      	lsls	r6, r6, #21
    4fea:	4317      	orrs	r7, r2
    4fec:	0b24      	lsrs	r4, r4, #12
    4fee:	0d76      	lsrs	r6, r6, #21
    4ff0:	401d      	ands	r5, r3
    4ff2:	2100      	movs	r1, #0
    4ff4:	0324      	lsls	r4, r4, #12
    4ff6:	0b23      	lsrs	r3, r4, #12
    4ff8:	0d0c      	lsrs	r4, r1, #20
    4ffa:	4a7e      	ldr	r2, [pc, #504]	; (51f4 <__aeabi_dsub+0x34c>)
    4ffc:	0524      	lsls	r4, r4, #20
    4ffe:	431c      	orrs	r4, r3
    5000:	4014      	ands	r4, r2
    5002:	0533      	lsls	r3, r6, #20
    5004:	4323      	orrs	r3, r4
    5006:	005b      	lsls	r3, r3, #1
    5008:	07ed      	lsls	r5, r5, #31
    500a:	085b      	lsrs	r3, r3, #1
    500c:	432b      	orrs	r3, r5
    500e:	0038      	movs	r0, r7
    5010:	0019      	movs	r1, r3
    5012:	bc1c      	pop	{r2, r3, r4}
    5014:	4690      	mov	r8, r2
    5016:	4699      	mov	r9, r3
    5018:	46a2      	mov	sl, r4
    501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    501c:	2501      	movs	r5, #1
    501e:	4643      	mov	r3, r8
    5020:	0762      	lsls	r2, r4, #29
    5022:	08ff      	lsrs	r7, r7, #3
    5024:	4317      	orrs	r7, r2
    5026:	08e4      	lsrs	r4, r4, #3
    5028:	401d      	ands	r5, r3
    502a:	4b70      	ldr	r3, [pc, #448]	; (51ec <__aeabi_dsub+0x344>)
    502c:	429e      	cmp	r6, r3
    502e:	d036      	beq.n	509e <__aeabi_dsub+0x1f6>
    5030:	0324      	lsls	r4, r4, #12
    5032:	0576      	lsls	r6, r6, #21
    5034:	0b24      	lsrs	r4, r4, #12
    5036:	0d76      	lsrs	r6, r6, #21
    5038:	e7db      	b.n	4ff2 <__aeabi_dsub+0x14a>
    503a:	4663      	mov	r3, ip
    503c:	1af3      	subs	r3, r6, r3
    503e:	2b00      	cmp	r3, #0
    5040:	dc00      	bgt.n	5044 <__aeabi_dsub+0x19c>
    5042:	e094      	b.n	516e <__aeabi_dsub+0x2c6>
    5044:	4660      	mov	r0, ip
    5046:	2800      	cmp	r0, #0
    5048:	d035      	beq.n	50b6 <__aeabi_dsub+0x20e>
    504a:	4868      	ldr	r0, [pc, #416]	; (51ec <__aeabi_dsub+0x344>)
    504c:	4286      	cmp	r6, r0
    504e:	d0b1      	beq.n	4fb4 <__aeabi_dsub+0x10c>
    5050:	2780      	movs	r7, #128	; 0x80
    5052:	043f      	lsls	r7, r7, #16
    5054:	4339      	orrs	r1, r7
    5056:	2b38      	cmp	r3, #56	; 0x38
    5058:	dc00      	bgt.n	505c <__aeabi_dsub+0x1b4>
    505a:	e0fd      	b.n	5258 <__aeabi_dsub+0x3b0>
    505c:	430a      	orrs	r2, r1
    505e:	0017      	movs	r7, r2
    5060:	2100      	movs	r1, #0
    5062:	1e7a      	subs	r2, r7, #1
    5064:	4197      	sbcs	r7, r2
    5066:	4457      	add	r7, sl
    5068:	4557      	cmp	r7, sl
    506a:	4180      	sbcs	r0, r0
    506c:	1909      	adds	r1, r1, r4
    506e:	4244      	negs	r4, r0
    5070:	190c      	adds	r4, r1, r4
    5072:	0223      	lsls	r3, r4, #8
    5074:	d53a      	bpl.n	50ec <__aeabi_dsub+0x244>
    5076:	4b5d      	ldr	r3, [pc, #372]	; (51ec <__aeabi_dsub+0x344>)
    5078:	3601      	adds	r6, #1
    507a:	429e      	cmp	r6, r3
    507c:	d100      	bne.n	5080 <__aeabi_dsub+0x1d8>
    507e:	e14b      	b.n	5318 <__aeabi_dsub+0x470>
    5080:	2201      	movs	r2, #1
    5082:	4b5b      	ldr	r3, [pc, #364]	; (51f0 <__aeabi_dsub+0x348>)
    5084:	401c      	ands	r4, r3
    5086:	087b      	lsrs	r3, r7, #1
    5088:	4017      	ands	r7, r2
    508a:	431f      	orrs	r7, r3
    508c:	07e2      	lsls	r2, r4, #31
    508e:	4317      	orrs	r7, r2
    5090:	0864      	lsrs	r4, r4, #1
    5092:	e78f      	b.n	4fb4 <__aeabi_dsub+0x10c>
    5094:	0008      	movs	r0, r1
    5096:	4310      	orrs	r0, r2
    5098:	d000      	beq.n	509c <__aeabi_dsub+0x1f4>
    509a:	e724      	b.n	4ee6 <__aeabi_dsub+0x3e>
    509c:	e721      	b.n	4ee2 <__aeabi_dsub+0x3a>
    509e:	0023      	movs	r3, r4
    50a0:	433b      	orrs	r3, r7
    50a2:	d100      	bne.n	50a6 <__aeabi_dsub+0x1fe>
    50a4:	e1b9      	b.n	541a <__aeabi_dsub+0x572>
    50a6:	2280      	movs	r2, #128	; 0x80
    50a8:	0312      	lsls	r2, r2, #12
    50aa:	4314      	orrs	r4, r2
    50ac:	0324      	lsls	r4, r4, #12
    50ae:	0b24      	lsrs	r4, r4, #12
    50b0:	e79f      	b.n	4ff2 <__aeabi_dsub+0x14a>
    50b2:	002e      	movs	r6, r5
    50b4:	e77e      	b.n	4fb4 <__aeabi_dsub+0x10c>
    50b6:	0008      	movs	r0, r1
    50b8:	4310      	orrs	r0, r2
    50ba:	d100      	bne.n	50be <__aeabi_dsub+0x216>
    50bc:	e0ca      	b.n	5254 <__aeabi_dsub+0x3ac>
    50be:	1e58      	subs	r0, r3, #1
    50c0:	4684      	mov	ip, r0
    50c2:	2800      	cmp	r0, #0
    50c4:	d000      	beq.n	50c8 <__aeabi_dsub+0x220>
    50c6:	e0e7      	b.n	5298 <__aeabi_dsub+0x3f0>
    50c8:	4452      	add	r2, sl
    50ca:	4552      	cmp	r2, sl
    50cc:	4180      	sbcs	r0, r0
    50ce:	1864      	adds	r4, r4, r1
    50d0:	4240      	negs	r0, r0
    50d2:	1824      	adds	r4, r4, r0
    50d4:	0017      	movs	r7, r2
    50d6:	2601      	movs	r6, #1
    50d8:	0223      	lsls	r3, r4, #8
    50da:	d507      	bpl.n	50ec <__aeabi_dsub+0x244>
    50dc:	2602      	movs	r6, #2
    50de:	e7cf      	b.n	5080 <__aeabi_dsub+0x1d8>
    50e0:	4664      	mov	r4, ip
    50e2:	432c      	orrs	r4, r5
    50e4:	d100      	bne.n	50e8 <__aeabi_dsub+0x240>
    50e6:	e1b3      	b.n	5450 <__aeabi_dsub+0x5a8>
    50e8:	002c      	movs	r4, r5
    50ea:	4667      	mov	r7, ip
    50ec:	077b      	lsls	r3, r7, #29
    50ee:	d000      	beq.n	50f2 <__aeabi_dsub+0x24a>
    50f0:	e762      	b.n	4fb8 <__aeabi_dsub+0x110>
    50f2:	0763      	lsls	r3, r4, #29
    50f4:	08ff      	lsrs	r7, r7, #3
    50f6:	431f      	orrs	r7, r3
    50f8:	2501      	movs	r5, #1
    50fa:	4643      	mov	r3, r8
    50fc:	08e4      	lsrs	r4, r4, #3
    50fe:	401d      	ands	r5, r3
    5100:	e793      	b.n	502a <__aeabi_dsub+0x182>
    5102:	2d00      	cmp	r5, #0
    5104:	d178      	bne.n	51f8 <__aeabi_dsub+0x350>
    5106:	1c75      	adds	r5, r6, #1
    5108:	056d      	lsls	r5, r5, #21
    510a:	0d6d      	lsrs	r5, r5, #21
    510c:	2d01      	cmp	r5, #1
    510e:	dc00      	bgt.n	5112 <__aeabi_dsub+0x26a>
    5110:	e0f2      	b.n	52f8 <__aeabi_dsub+0x450>
    5112:	4650      	mov	r0, sl
    5114:	1a80      	subs	r0, r0, r2
    5116:	4582      	cmp	sl, r0
    5118:	41bf      	sbcs	r7, r7
    511a:	1a65      	subs	r5, r4, r1
    511c:	427f      	negs	r7, r7
    511e:	1bed      	subs	r5, r5, r7
    5120:	4684      	mov	ip, r0
    5122:	0228      	lsls	r0, r5, #8
    5124:	d400      	bmi.n	5128 <__aeabi_dsub+0x280>
    5126:	e08c      	b.n	5242 <__aeabi_dsub+0x39a>
    5128:	4650      	mov	r0, sl
    512a:	1a17      	subs	r7, r2, r0
    512c:	42ba      	cmp	r2, r7
    512e:	4192      	sbcs	r2, r2
    5130:	1b0c      	subs	r4, r1, r4
    5132:	4255      	negs	r5, r2
    5134:	1b65      	subs	r5, r4, r5
    5136:	4698      	mov	r8, r3
    5138:	e714      	b.n	4f64 <__aeabi_dsub+0xbc>
    513a:	2501      	movs	r5, #1
    513c:	4643      	mov	r3, r8
    513e:	2400      	movs	r4, #0
    5140:	401d      	ands	r5, r3
    5142:	2700      	movs	r7, #0
    5144:	e755      	b.n	4ff2 <__aeabi_dsub+0x14a>
    5146:	4c2a      	ldr	r4, [pc, #168]	; (51f0 <__aeabi_dsub+0x348>)
    5148:	1af6      	subs	r6, r6, r3
    514a:	402c      	ands	r4, r5
    514c:	e732      	b.n	4fb4 <__aeabi_dsub+0x10c>
    514e:	003d      	movs	r5, r7
    5150:	3828      	subs	r0, #40	; 0x28
    5152:	4085      	lsls	r5, r0
    5154:	2700      	movs	r7, #0
    5156:	e717      	b.n	4f88 <__aeabi_dsub+0xe0>
    5158:	0038      	movs	r0, r7
    515a:	f000 fa69 	bl	5630 <__clzsi2>
    515e:	3020      	adds	r0, #32
    5160:	e706      	b.n	4f70 <__aeabi_dsub+0xc8>
    5162:	430a      	orrs	r2, r1
    5164:	0017      	movs	r7, r2
    5166:	2100      	movs	r1, #0
    5168:	1e7a      	subs	r2, r7, #1
    516a:	4197      	sbcs	r7, r2
    516c:	e6ee      	b.n	4f4c <__aeabi_dsub+0xa4>
    516e:	2b00      	cmp	r3, #0
    5170:	d000      	beq.n	5174 <__aeabi_dsub+0x2cc>
    5172:	e0e5      	b.n	5340 <__aeabi_dsub+0x498>
    5174:	1c73      	adds	r3, r6, #1
    5176:	469c      	mov	ip, r3
    5178:	055b      	lsls	r3, r3, #21
    517a:	0d5b      	lsrs	r3, r3, #21
    517c:	2b01      	cmp	r3, #1
    517e:	dc00      	bgt.n	5182 <__aeabi_dsub+0x2da>
    5180:	e09f      	b.n	52c2 <__aeabi_dsub+0x41a>
    5182:	4b1a      	ldr	r3, [pc, #104]	; (51ec <__aeabi_dsub+0x344>)
    5184:	459c      	cmp	ip, r3
    5186:	d100      	bne.n	518a <__aeabi_dsub+0x2e2>
    5188:	e0c5      	b.n	5316 <__aeabi_dsub+0x46e>
    518a:	4452      	add	r2, sl
    518c:	4552      	cmp	r2, sl
    518e:	4180      	sbcs	r0, r0
    5190:	1864      	adds	r4, r4, r1
    5192:	4240      	negs	r0, r0
    5194:	1824      	adds	r4, r4, r0
    5196:	07e7      	lsls	r7, r4, #31
    5198:	0852      	lsrs	r2, r2, #1
    519a:	4317      	orrs	r7, r2
    519c:	0864      	lsrs	r4, r4, #1
    519e:	4666      	mov	r6, ip
    51a0:	e708      	b.n	4fb4 <__aeabi_dsub+0x10c>
    51a2:	4812      	ldr	r0, [pc, #72]	; (51ec <__aeabi_dsub+0x344>)
    51a4:	4285      	cmp	r5, r0
    51a6:	d100      	bne.n	51aa <__aeabi_dsub+0x302>
    51a8:	e085      	b.n	52b6 <__aeabi_dsub+0x40e>
    51aa:	001d      	movs	r5, r3
    51ac:	e6bc      	b.n	4f28 <__aeabi_dsub+0x80>
    51ae:	0029      	movs	r1, r5
    51b0:	3e1f      	subs	r6, #31
    51b2:	40f1      	lsrs	r1, r6
    51b4:	2b20      	cmp	r3, #32
    51b6:	d100      	bne.n	51ba <__aeabi_dsub+0x312>
    51b8:	e07f      	b.n	52ba <__aeabi_dsub+0x412>
    51ba:	2240      	movs	r2, #64	; 0x40
    51bc:	1ad3      	subs	r3, r2, r3
    51be:	409d      	lsls	r5, r3
    51c0:	432f      	orrs	r7, r5
    51c2:	1e7d      	subs	r5, r7, #1
    51c4:	41af      	sbcs	r7, r5
    51c6:	2400      	movs	r4, #0
    51c8:	430f      	orrs	r7, r1
    51ca:	2600      	movs	r6, #0
    51cc:	e78e      	b.n	50ec <__aeabi_dsub+0x244>
    51ce:	002b      	movs	r3, r5
    51d0:	000f      	movs	r7, r1
    51d2:	3b20      	subs	r3, #32
    51d4:	40df      	lsrs	r7, r3
    51d6:	2d20      	cmp	r5, #32
    51d8:	d071      	beq.n	52be <__aeabi_dsub+0x416>
    51da:	2340      	movs	r3, #64	; 0x40
    51dc:	1b5d      	subs	r5, r3, r5
    51de:	40a9      	lsls	r1, r5
    51e0:	430a      	orrs	r2, r1
    51e2:	1e51      	subs	r1, r2, #1
    51e4:	418a      	sbcs	r2, r1
    51e6:	2100      	movs	r1, #0
    51e8:	4317      	orrs	r7, r2
    51ea:	e6af      	b.n	4f4c <__aeabi_dsub+0xa4>
    51ec:	000007ff 	.word	0x000007ff
    51f0:	ff7fffff 	.word	0xff7fffff
    51f4:	800fffff 	.word	0x800fffff
    51f8:	2e00      	cmp	r6, #0
    51fa:	d03e      	beq.n	527a <__aeabi_dsub+0x3d2>
    51fc:	4eb3      	ldr	r6, [pc, #716]	; (54cc <__aeabi_dsub+0x624>)
    51fe:	45b4      	cmp	ip, r6
    5200:	d045      	beq.n	528e <__aeabi_dsub+0x3e6>
    5202:	2680      	movs	r6, #128	; 0x80
    5204:	0436      	lsls	r6, r6, #16
    5206:	426d      	negs	r5, r5
    5208:	4334      	orrs	r4, r6
    520a:	2d38      	cmp	r5, #56	; 0x38
    520c:	dd00      	ble.n	5210 <__aeabi_dsub+0x368>
    520e:	e0a8      	b.n	5362 <__aeabi_dsub+0x4ba>
    5210:	2d1f      	cmp	r5, #31
    5212:	dd00      	ble.n	5216 <__aeabi_dsub+0x36e>
    5214:	e11f      	b.n	5456 <__aeabi_dsub+0x5ae>
    5216:	2620      	movs	r6, #32
    5218:	0027      	movs	r7, r4
    521a:	4650      	mov	r0, sl
    521c:	1b76      	subs	r6, r6, r5
    521e:	40b7      	lsls	r7, r6
    5220:	40e8      	lsrs	r0, r5
    5222:	4307      	orrs	r7, r0
    5224:	4650      	mov	r0, sl
    5226:	40b0      	lsls	r0, r6
    5228:	1e46      	subs	r6, r0, #1
    522a:	41b0      	sbcs	r0, r6
    522c:	40ec      	lsrs	r4, r5
    522e:	4338      	orrs	r0, r7
    5230:	1a17      	subs	r7, r2, r0
    5232:	42ba      	cmp	r2, r7
    5234:	4192      	sbcs	r2, r2
    5236:	1b0c      	subs	r4, r1, r4
    5238:	4252      	negs	r2, r2
    523a:	1aa4      	subs	r4, r4, r2
    523c:	4666      	mov	r6, ip
    523e:	4698      	mov	r8, r3
    5240:	e68b      	b.n	4f5a <__aeabi_dsub+0xb2>
    5242:	4664      	mov	r4, ip
    5244:	4667      	mov	r7, ip
    5246:	432c      	orrs	r4, r5
    5248:	d000      	beq.n	524c <__aeabi_dsub+0x3a4>
    524a:	e68b      	b.n	4f64 <__aeabi_dsub+0xbc>
    524c:	2500      	movs	r5, #0
    524e:	2600      	movs	r6, #0
    5250:	2700      	movs	r7, #0
    5252:	e6ea      	b.n	502a <__aeabi_dsub+0x182>
    5254:	001e      	movs	r6, r3
    5256:	e6ad      	b.n	4fb4 <__aeabi_dsub+0x10c>
    5258:	2b1f      	cmp	r3, #31
    525a:	dc60      	bgt.n	531e <__aeabi_dsub+0x476>
    525c:	2720      	movs	r7, #32
    525e:	1af8      	subs	r0, r7, r3
    5260:	000f      	movs	r7, r1
    5262:	4684      	mov	ip, r0
    5264:	4087      	lsls	r7, r0
    5266:	0010      	movs	r0, r2
    5268:	40d8      	lsrs	r0, r3
    526a:	4307      	orrs	r7, r0
    526c:	4660      	mov	r0, ip
    526e:	4082      	lsls	r2, r0
    5270:	1e50      	subs	r0, r2, #1
    5272:	4182      	sbcs	r2, r0
    5274:	40d9      	lsrs	r1, r3
    5276:	4317      	orrs	r7, r2
    5278:	e6f5      	b.n	5066 <__aeabi_dsub+0x1be>
    527a:	0026      	movs	r6, r4
    527c:	4650      	mov	r0, sl
    527e:	4306      	orrs	r6, r0
    5280:	d005      	beq.n	528e <__aeabi_dsub+0x3e6>
    5282:	43ed      	mvns	r5, r5
    5284:	2d00      	cmp	r5, #0
    5286:	d0d3      	beq.n	5230 <__aeabi_dsub+0x388>
    5288:	4e90      	ldr	r6, [pc, #576]	; (54cc <__aeabi_dsub+0x624>)
    528a:	45b4      	cmp	ip, r6
    528c:	d1bd      	bne.n	520a <__aeabi_dsub+0x362>
    528e:	000c      	movs	r4, r1
    5290:	0017      	movs	r7, r2
    5292:	4666      	mov	r6, ip
    5294:	4698      	mov	r8, r3
    5296:	e68d      	b.n	4fb4 <__aeabi_dsub+0x10c>
    5298:	488c      	ldr	r0, [pc, #560]	; (54cc <__aeabi_dsub+0x624>)
    529a:	4283      	cmp	r3, r0
    529c:	d00b      	beq.n	52b6 <__aeabi_dsub+0x40e>
    529e:	4663      	mov	r3, ip
    52a0:	e6d9      	b.n	5056 <__aeabi_dsub+0x1ae>
    52a2:	2d00      	cmp	r5, #0
    52a4:	d000      	beq.n	52a8 <__aeabi_dsub+0x400>
    52a6:	e096      	b.n	53d6 <__aeabi_dsub+0x52e>
    52a8:	0008      	movs	r0, r1
    52aa:	4310      	orrs	r0, r2
    52ac:	d100      	bne.n	52b0 <__aeabi_dsub+0x408>
    52ae:	e0e2      	b.n	5476 <__aeabi_dsub+0x5ce>
    52b0:	000c      	movs	r4, r1
    52b2:	0017      	movs	r7, r2
    52b4:	4698      	mov	r8, r3
    52b6:	4e85      	ldr	r6, [pc, #532]	; (54cc <__aeabi_dsub+0x624>)
    52b8:	e67c      	b.n	4fb4 <__aeabi_dsub+0x10c>
    52ba:	2500      	movs	r5, #0
    52bc:	e780      	b.n	51c0 <__aeabi_dsub+0x318>
    52be:	2100      	movs	r1, #0
    52c0:	e78e      	b.n	51e0 <__aeabi_dsub+0x338>
    52c2:	0023      	movs	r3, r4
    52c4:	4650      	mov	r0, sl
    52c6:	4303      	orrs	r3, r0
    52c8:	2e00      	cmp	r6, #0
    52ca:	d000      	beq.n	52ce <__aeabi_dsub+0x426>
    52cc:	e0a8      	b.n	5420 <__aeabi_dsub+0x578>
    52ce:	2b00      	cmp	r3, #0
    52d0:	d100      	bne.n	52d4 <__aeabi_dsub+0x42c>
    52d2:	e0de      	b.n	5492 <__aeabi_dsub+0x5ea>
    52d4:	000b      	movs	r3, r1
    52d6:	4313      	orrs	r3, r2
    52d8:	d100      	bne.n	52dc <__aeabi_dsub+0x434>
    52da:	e66b      	b.n	4fb4 <__aeabi_dsub+0x10c>
    52dc:	4452      	add	r2, sl
    52de:	4552      	cmp	r2, sl
    52e0:	4180      	sbcs	r0, r0
    52e2:	1864      	adds	r4, r4, r1
    52e4:	4240      	negs	r0, r0
    52e6:	1824      	adds	r4, r4, r0
    52e8:	0017      	movs	r7, r2
    52ea:	0223      	lsls	r3, r4, #8
    52ec:	d400      	bmi.n	52f0 <__aeabi_dsub+0x448>
    52ee:	e6fd      	b.n	50ec <__aeabi_dsub+0x244>
    52f0:	4b77      	ldr	r3, [pc, #476]	; (54d0 <__aeabi_dsub+0x628>)
    52f2:	4666      	mov	r6, ip
    52f4:	401c      	ands	r4, r3
    52f6:	e65d      	b.n	4fb4 <__aeabi_dsub+0x10c>
    52f8:	0025      	movs	r5, r4
    52fa:	4650      	mov	r0, sl
    52fc:	4305      	orrs	r5, r0
    52fe:	2e00      	cmp	r6, #0
    5300:	d1cf      	bne.n	52a2 <__aeabi_dsub+0x3fa>
    5302:	2d00      	cmp	r5, #0
    5304:	d14f      	bne.n	53a6 <__aeabi_dsub+0x4fe>
    5306:	000c      	movs	r4, r1
    5308:	4314      	orrs	r4, r2
    530a:	d100      	bne.n	530e <__aeabi_dsub+0x466>
    530c:	e0a0      	b.n	5450 <__aeabi_dsub+0x5a8>
    530e:	000c      	movs	r4, r1
    5310:	0017      	movs	r7, r2
    5312:	4698      	mov	r8, r3
    5314:	e64e      	b.n	4fb4 <__aeabi_dsub+0x10c>
    5316:	4666      	mov	r6, ip
    5318:	2400      	movs	r4, #0
    531a:	2700      	movs	r7, #0
    531c:	e685      	b.n	502a <__aeabi_dsub+0x182>
    531e:	001f      	movs	r7, r3
    5320:	0008      	movs	r0, r1
    5322:	3f20      	subs	r7, #32
    5324:	40f8      	lsrs	r0, r7
    5326:	0007      	movs	r7, r0
    5328:	2b20      	cmp	r3, #32
    532a:	d100      	bne.n	532e <__aeabi_dsub+0x486>
    532c:	e08e      	b.n	544c <__aeabi_dsub+0x5a4>
    532e:	2040      	movs	r0, #64	; 0x40
    5330:	1ac3      	subs	r3, r0, r3
    5332:	4099      	lsls	r1, r3
    5334:	430a      	orrs	r2, r1
    5336:	1e51      	subs	r1, r2, #1
    5338:	418a      	sbcs	r2, r1
    533a:	2100      	movs	r1, #0
    533c:	4317      	orrs	r7, r2
    533e:	e692      	b.n	5066 <__aeabi_dsub+0x1be>
    5340:	2e00      	cmp	r6, #0
    5342:	d114      	bne.n	536e <__aeabi_dsub+0x4c6>
    5344:	0026      	movs	r6, r4
    5346:	4650      	mov	r0, sl
    5348:	4306      	orrs	r6, r0
    534a:	d062      	beq.n	5412 <__aeabi_dsub+0x56a>
    534c:	43db      	mvns	r3, r3
    534e:	2b00      	cmp	r3, #0
    5350:	d15c      	bne.n	540c <__aeabi_dsub+0x564>
    5352:	1887      	adds	r7, r0, r2
    5354:	4297      	cmp	r7, r2
    5356:	4192      	sbcs	r2, r2
    5358:	1864      	adds	r4, r4, r1
    535a:	4252      	negs	r2, r2
    535c:	18a4      	adds	r4, r4, r2
    535e:	4666      	mov	r6, ip
    5360:	e687      	b.n	5072 <__aeabi_dsub+0x1ca>
    5362:	4650      	mov	r0, sl
    5364:	4320      	orrs	r0, r4
    5366:	1e44      	subs	r4, r0, #1
    5368:	41a0      	sbcs	r0, r4
    536a:	2400      	movs	r4, #0
    536c:	e760      	b.n	5230 <__aeabi_dsub+0x388>
    536e:	4e57      	ldr	r6, [pc, #348]	; (54cc <__aeabi_dsub+0x624>)
    5370:	45b4      	cmp	ip, r6
    5372:	d04e      	beq.n	5412 <__aeabi_dsub+0x56a>
    5374:	2680      	movs	r6, #128	; 0x80
    5376:	0436      	lsls	r6, r6, #16
    5378:	425b      	negs	r3, r3
    537a:	4334      	orrs	r4, r6
    537c:	2b38      	cmp	r3, #56	; 0x38
    537e:	dd00      	ble.n	5382 <__aeabi_dsub+0x4da>
    5380:	e07f      	b.n	5482 <__aeabi_dsub+0x5da>
    5382:	2b1f      	cmp	r3, #31
    5384:	dd00      	ble.n	5388 <__aeabi_dsub+0x4e0>
    5386:	e08b      	b.n	54a0 <__aeabi_dsub+0x5f8>
    5388:	2620      	movs	r6, #32
    538a:	0027      	movs	r7, r4
    538c:	4650      	mov	r0, sl
    538e:	1af6      	subs	r6, r6, r3
    5390:	40b7      	lsls	r7, r6
    5392:	40d8      	lsrs	r0, r3
    5394:	4307      	orrs	r7, r0
    5396:	4650      	mov	r0, sl
    5398:	40b0      	lsls	r0, r6
    539a:	1e46      	subs	r6, r0, #1
    539c:	41b0      	sbcs	r0, r6
    539e:	4307      	orrs	r7, r0
    53a0:	40dc      	lsrs	r4, r3
    53a2:	18bf      	adds	r7, r7, r2
    53a4:	e7d6      	b.n	5354 <__aeabi_dsub+0x4ac>
    53a6:	000d      	movs	r5, r1
    53a8:	4315      	orrs	r5, r2
    53aa:	d100      	bne.n	53ae <__aeabi_dsub+0x506>
    53ac:	e602      	b.n	4fb4 <__aeabi_dsub+0x10c>
    53ae:	4650      	mov	r0, sl
    53b0:	1a80      	subs	r0, r0, r2
    53b2:	4582      	cmp	sl, r0
    53b4:	41bf      	sbcs	r7, r7
    53b6:	1a65      	subs	r5, r4, r1
    53b8:	427f      	negs	r7, r7
    53ba:	1bed      	subs	r5, r5, r7
    53bc:	4684      	mov	ip, r0
    53be:	0228      	lsls	r0, r5, #8
    53c0:	d400      	bmi.n	53c4 <__aeabi_dsub+0x51c>
    53c2:	e68d      	b.n	50e0 <__aeabi_dsub+0x238>
    53c4:	4650      	mov	r0, sl
    53c6:	1a17      	subs	r7, r2, r0
    53c8:	42ba      	cmp	r2, r7
    53ca:	4192      	sbcs	r2, r2
    53cc:	1b0c      	subs	r4, r1, r4
    53ce:	4252      	negs	r2, r2
    53d0:	1aa4      	subs	r4, r4, r2
    53d2:	4698      	mov	r8, r3
    53d4:	e5ee      	b.n	4fb4 <__aeabi_dsub+0x10c>
    53d6:	000d      	movs	r5, r1
    53d8:	4315      	orrs	r5, r2
    53da:	d100      	bne.n	53de <__aeabi_dsub+0x536>
    53dc:	e76b      	b.n	52b6 <__aeabi_dsub+0x40e>
    53de:	4650      	mov	r0, sl
    53e0:	0767      	lsls	r7, r4, #29
    53e2:	08c0      	lsrs	r0, r0, #3
    53e4:	4307      	orrs	r7, r0
    53e6:	2080      	movs	r0, #128	; 0x80
    53e8:	08e4      	lsrs	r4, r4, #3
    53ea:	0300      	lsls	r0, r0, #12
    53ec:	4204      	tst	r4, r0
    53ee:	d007      	beq.n	5400 <__aeabi_dsub+0x558>
    53f0:	08cd      	lsrs	r5, r1, #3
    53f2:	4205      	tst	r5, r0
    53f4:	d104      	bne.n	5400 <__aeabi_dsub+0x558>
    53f6:	002c      	movs	r4, r5
    53f8:	4698      	mov	r8, r3
    53fa:	08d7      	lsrs	r7, r2, #3
    53fc:	0749      	lsls	r1, r1, #29
    53fe:	430f      	orrs	r7, r1
    5400:	0f7b      	lsrs	r3, r7, #29
    5402:	00e4      	lsls	r4, r4, #3
    5404:	431c      	orrs	r4, r3
    5406:	00ff      	lsls	r7, r7, #3
    5408:	4e30      	ldr	r6, [pc, #192]	; (54cc <__aeabi_dsub+0x624>)
    540a:	e5d3      	b.n	4fb4 <__aeabi_dsub+0x10c>
    540c:	4e2f      	ldr	r6, [pc, #188]	; (54cc <__aeabi_dsub+0x624>)
    540e:	45b4      	cmp	ip, r6
    5410:	d1b4      	bne.n	537c <__aeabi_dsub+0x4d4>
    5412:	000c      	movs	r4, r1
    5414:	0017      	movs	r7, r2
    5416:	4666      	mov	r6, ip
    5418:	e5cc      	b.n	4fb4 <__aeabi_dsub+0x10c>
    541a:	2700      	movs	r7, #0
    541c:	2400      	movs	r4, #0
    541e:	e5e8      	b.n	4ff2 <__aeabi_dsub+0x14a>
    5420:	2b00      	cmp	r3, #0
    5422:	d039      	beq.n	5498 <__aeabi_dsub+0x5f0>
    5424:	000b      	movs	r3, r1
    5426:	4313      	orrs	r3, r2
    5428:	d100      	bne.n	542c <__aeabi_dsub+0x584>
    542a:	e744      	b.n	52b6 <__aeabi_dsub+0x40e>
    542c:	08c0      	lsrs	r0, r0, #3
    542e:	0767      	lsls	r7, r4, #29
    5430:	4307      	orrs	r7, r0
    5432:	2080      	movs	r0, #128	; 0x80
    5434:	08e4      	lsrs	r4, r4, #3
    5436:	0300      	lsls	r0, r0, #12
    5438:	4204      	tst	r4, r0
    543a:	d0e1      	beq.n	5400 <__aeabi_dsub+0x558>
    543c:	08cb      	lsrs	r3, r1, #3
    543e:	4203      	tst	r3, r0
    5440:	d1de      	bne.n	5400 <__aeabi_dsub+0x558>
    5442:	08d7      	lsrs	r7, r2, #3
    5444:	0749      	lsls	r1, r1, #29
    5446:	430f      	orrs	r7, r1
    5448:	001c      	movs	r4, r3
    544a:	e7d9      	b.n	5400 <__aeabi_dsub+0x558>
    544c:	2100      	movs	r1, #0
    544e:	e771      	b.n	5334 <__aeabi_dsub+0x48c>
    5450:	2500      	movs	r5, #0
    5452:	2700      	movs	r7, #0
    5454:	e5e9      	b.n	502a <__aeabi_dsub+0x182>
    5456:	002e      	movs	r6, r5
    5458:	0027      	movs	r7, r4
    545a:	3e20      	subs	r6, #32
    545c:	40f7      	lsrs	r7, r6
    545e:	2d20      	cmp	r5, #32
    5460:	d02f      	beq.n	54c2 <__aeabi_dsub+0x61a>
    5462:	2640      	movs	r6, #64	; 0x40
    5464:	1b75      	subs	r5, r6, r5
    5466:	40ac      	lsls	r4, r5
    5468:	4650      	mov	r0, sl
    546a:	4320      	orrs	r0, r4
    546c:	1e44      	subs	r4, r0, #1
    546e:	41a0      	sbcs	r0, r4
    5470:	2400      	movs	r4, #0
    5472:	4338      	orrs	r0, r7
    5474:	e6dc      	b.n	5230 <__aeabi_dsub+0x388>
    5476:	2480      	movs	r4, #128	; 0x80
    5478:	2500      	movs	r5, #0
    547a:	0324      	lsls	r4, r4, #12
    547c:	4e13      	ldr	r6, [pc, #76]	; (54cc <__aeabi_dsub+0x624>)
    547e:	2700      	movs	r7, #0
    5480:	e5d3      	b.n	502a <__aeabi_dsub+0x182>
    5482:	4650      	mov	r0, sl
    5484:	4320      	orrs	r0, r4
    5486:	0007      	movs	r7, r0
    5488:	1e78      	subs	r0, r7, #1
    548a:	4187      	sbcs	r7, r0
    548c:	2400      	movs	r4, #0
    548e:	18bf      	adds	r7, r7, r2
    5490:	e760      	b.n	5354 <__aeabi_dsub+0x4ac>
    5492:	000c      	movs	r4, r1
    5494:	0017      	movs	r7, r2
    5496:	e58d      	b.n	4fb4 <__aeabi_dsub+0x10c>
    5498:	000c      	movs	r4, r1
    549a:	0017      	movs	r7, r2
    549c:	4e0b      	ldr	r6, [pc, #44]	; (54cc <__aeabi_dsub+0x624>)
    549e:	e589      	b.n	4fb4 <__aeabi_dsub+0x10c>
    54a0:	001e      	movs	r6, r3
    54a2:	0027      	movs	r7, r4
    54a4:	3e20      	subs	r6, #32
    54a6:	40f7      	lsrs	r7, r6
    54a8:	2b20      	cmp	r3, #32
    54aa:	d00c      	beq.n	54c6 <__aeabi_dsub+0x61e>
    54ac:	2640      	movs	r6, #64	; 0x40
    54ae:	1af3      	subs	r3, r6, r3
    54b0:	409c      	lsls	r4, r3
    54b2:	4650      	mov	r0, sl
    54b4:	4320      	orrs	r0, r4
    54b6:	1e44      	subs	r4, r0, #1
    54b8:	41a0      	sbcs	r0, r4
    54ba:	4307      	orrs	r7, r0
    54bc:	2400      	movs	r4, #0
    54be:	18bf      	adds	r7, r7, r2
    54c0:	e748      	b.n	5354 <__aeabi_dsub+0x4ac>
    54c2:	2400      	movs	r4, #0
    54c4:	e7d0      	b.n	5468 <__aeabi_dsub+0x5c0>
    54c6:	2400      	movs	r4, #0
    54c8:	e7f3      	b.n	54b2 <__aeabi_dsub+0x60a>
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	000007ff 	.word	0x000007ff
    54d0:	ff7fffff 	.word	0xff7fffff

000054d4 <__aeabi_d2iz>:
    54d4:	b530      	push	{r4, r5, lr}
    54d6:	4d13      	ldr	r5, [pc, #76]	; (5524 <__aeabi_d2iz+0x50>)
    54d8:	030a      	lsls	r2, r1, #12
    54da:	004b      	lsls	r3, r1, #1
    54dc:	0b12      	lsrs	r2, r2, #12
    54de:	0d5b      	lsrs	r3, r3, #21
    54e0:	0fc9      	lsrs	r1, r1, #31
    54e2:	2400      	movs	r4, #0
    54e4:	42ab      	cmp	r3, r5
    54e6:	dd10      	ble.n	550a <__aeabi_d2iz+0x36>
    54e8:	4c0f      	ldr	r4, [pc, #60]	; (5528 <__aeabi_d2iz+0x54>)
    54ea:	42a3      	cmp	r3, r4
    54ec:	dc0f      	bgt.n	550e <__aeabi_d2iz+0x3a>
    54ee:	2480      	movs	r4, #128	; 0x80
    54f0:	4d0e      	ldr	r5, [pc, #56]	; (552c <__aeabi_d2iz+0x58>)
    54f2:	0364      	lsls	r4, r4, #13
    54f4:	4322      	orrs	r2, r4
    54f6:	1aed      	subs	r5, r5, r3
    54f8:	2d1f      	cmp	r5, #31
    54fa:	dd0b      	ble.n	5514 <__aeabi_d2iz+0x40>
    54fc:	480c      	ldr	r0, [pc, #48]	; (5530 <__aeabi_d2iz+0x5c>)
    54fe:	1ac3      	subs	r3, r0, r3
    5500:	40da      	lsrs	r2, r3
    5502:	4254      	negs	r4, r2
    5504:	2900      	cmp	r1, #0
    5506:	d100      	bne.n	550a <__aeabi_d2iz+0x36>
    5508:	0014      	movs	r4, r2
    550a:	0020      	movs	r0, r4
    550c:	bd30      	pop	{r4, r5, pc}
    550e:	4b09      	ldr	r3, [pc, #36]	; (5534 <__aeabi_d2iz+0x60>)
    5510:	18cc      	adds	r4, r1, r3
    5512:	e7fa      	b.n	550a <__aeabi_d2iz+0x36>
    5514:	4c08      	ldr	r4, [pc, #32]	; (5538 <__aeabi_d2iz+0x64>)
    5516:	40e8      	lsrs	r0, r5
    5518:	46a4      	mov	ip, r4
    551a:	4463      	add	r3, ip
    551c:	409a      	lsls	r2, r3
    551e:	4302      	orrs	r2, r0
    5520:	e7ef      	b.n	5502 <__aeabi_d2iz+0x2e>
    5522:	46c0      	nop			; (mov r8, r8)
    5524:	000003fe 	.word	0x000003fe
    5528:	0000041d 	.word	0x0000041d
    552c:	00000433 	.word	0x00000433
    5530:	00000413 	.word	0x00000413
    5534:	7fffffff 	.word	0x7fffffff
    5538:	fffffbed 	.word	0xfffffbed

0000553c <__aeabi_i2d>:
    553c:	b570      	push	{r4, r5, r6, lr}
    553e:	2800      	cmp	r0, #0
    5540:	d030      	beq.n	55a4 <__aeabi_i2d+0x68>
    5542:	17c3      	asrs	r3, r0, #31
    5544:	18c4      	adds	r4, r0, r3
    5546:	405c      	eors	r4, r3
    5548:	0fc5      	lsrs	r5, r0, #31
    554a:	0020      	movs	r0, r4
    554c:	f000 f870 	bl	5630 <__clzsi2>
    5550:	4b17      	ldr	r3, [pc, #92]	; (55b0 <__aeabi_i2d+0x74>)
    5552:	4a18      	ldr	r2, [pc, #96]	; (55b4 <__aeabi_i2d+0x78>)
    5554:	1a1b      	subs	r3, r3, r0
    5556:	1ad2      	subs	r2, r2, r3
    5558:	2a1f      	cmp	r2, #31
    555a:	dd18      	ble.n	558e <__aeabi_i2d+0x52>
    555c:	4a16      	ldr	r2, [pc, #88]	; (55b8 <__aeabi_i2d+0x7c>)
    555e:	1ad2      	subs	r2, r2, r3
    5560:	4094      	lsls	r4, r2
    5562:	2200      	movs	r2, #0
    5564:	0324      	lsls	r4, r4, #12
    5566:	055b      	lsls	r3, r3, #21
    5568:	0b24      	lsrs	r4, r4, #12
    556a:	0d5b      	lsrs	r3, r3, #21
    556c:	2100      	movs	r1, #0
    556e:	0010      	movs	r0, r2
    5570:	0324      	lsls	r4, r4, #12
    5572:	0d0a      	lsrs	r2, r1, #20
    5574:	0b24      	lsrs	r4, r4, #12
    5576:	0512      	lsls	r2, r2, #20
    5578:	4322      	orrs	r2, r4
    557a:	4c10      	ldr	r4, [pc, #64]	; (55bc <__aeabi_i2d+0x80>)
    557c:	051b      	lsls	r3, r3, #20
    557e:	4022      	ands	r2, r4
    5580:	4313      	orrs	r3, r2
    5582:	005b      	lsls	r3, r3, #1
    5584:	07ed      	lsls	r5, r5, #31
    5586:	085b      	lsrs	r3, r3, #1
    5588:	432b      	orrs	r3, r5
    558a:	0019      	movs	r1, r3
    558c:	bd70      	pop	{r4, r5, r6, pc}
    558e:	0021      	movs	r1, r4
    5590:	4091      	lsls	r1, r2
    5592:	000a      	movs	r2, r1
    5594:	210b      	movs	r1, #11
    5596:	1a08      	subs	r0, r1, r0
    5598:	40c4      	lsrs	r4, r0
    559a:	055b      	lsls	r3, r3, #21
    559c:	0324      	lsls	r4, r4, #12
    559e:	0b24      	lsrs	r4, r4, #12
    55a0:	0d5b      	lsrs	r3, r3, #21
    55a2:	e7e3      	b.n	556c <__aeabi_i2d+0x30>
    55a4:	2500      	movs	r5, #0
    55a6:	2300      	movs	r3, #0
    55a8:	2400      	movs	r4, #0
    55aa:	2200      	movs	r2, #0
    55ac:	e7de      	b.n	556c <__aeabi_i2d+0x30>
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	0000041e 	.word	0x0000041e
    55b4:	00000433 	.word	0x00000433
    55b8:	00000413 	.word	0x00000413
    55bc:	800fffff 	.word	0x800fffff

000055c0 <__aeabi_ui2d>:
    55c0:	b510      	push	{r4, lr}
    55c2:	1e04      	subs	r4, r0, #0
    55c4:	d028      	beq.n	5618 <__aeabi_ui2d+0x58>
    55c6:	f000 f833 	bl	5630 <__clzsi2>
    55ca:	4b15      	ldr	r3, [pc, #84]	; (5620 <__aeabi_ui2d+0x60>)
    55cc:	4a15      	ldr	r2, [pc, #84]	; (5624 <__aeabi_ui2d+0x64>)
    55ce:	1a1b      	subs	r3, r3, r0
    55d0:	1ad2      	subs	r2, r2, r3
    55d2:	2a1f      	cmp	r2, #31
    55d4:	dd15      	ble.n	5602 <__aeabi_ui2d+0x42>
    55d6:	4a14      	ldr	r2, [pc, #80]	; (5628 <__aeabi_ui2d+0x68>)
    55d8:	1ad2      	subs	r2, r2, r3
    55da:	4094      	lsls	r4, r2
    55dc:	2200      	movs	r2, #0
    55de:	0324      	lsls	r4, r4, #12
    55e0:	055b      	lsls	r3, r3, #21
    55e2:	0b24      	lsrs	r4, r4, #12
    55e4:	0d5b      	lsrs	r3, r3, #21
    55e6:	2100      	movs	r1, #0
    55e8:	0010      	movs	r0, r2
    55ea:	0324      	lsls	r4, r4, #12
    55ec:	0d0a      	lsrs	r2, r1, #20
    55ee:	0b24      	lsrs	r4, r4, #12
    55f0:	0512      	lsls	r2, r2, #20
    55f2:	4322      	orrs	r2, r4
    55f4:	4c0d      	ldr	r4, [pc, #52]	; (562c <__aeabi_ui2d+0x6c>)
    55f6:	051b      	lsls	r3, r3, #20
    55f8:	4022      	ands	r2, r4
    55fa:	4313      	orrs	r3, r2
    55fc:	005b      	lsls	r3, r3, #1
    55fe:	0859      	lsrs	r1, r3, #1
    5600:	bd10      	pop	{r4, pc}
    5602:	0021      	movs	r1, r4
    5604:	4091      	lsls	r1, r2
    5606:	000a      	movs	r2, r1
    5608:	210b      	movs	r1, #11
    560a:	1a08      	subs	r0, r1, r0
    560c:	40c4      	lsrs	r4, r0
    560e:	055b      	lsls	r3, r3, #21
    5610:	0324      	lsls	r4, r4, #12
    5612:	0b24      	lsrs	r4, r4, #12
    5614:	0d5b      	lsrs	r3, r3, #21
    5616:	e7e6      	b.n	55e6 <__aeabi_ui2d+0x26>
    5618:	2300      	movs	r3, #0
    561a:	2400      	movs	r4, #0
    561c:	2200      	movs	r2, #0
    561e:	e7e2      	b.n	55e6 <__aeabi_ui2d+0x26>
    5620:	0000041e 	.word	0x0000041e
    5624:	00000433 	.word	0x00000433
    5628:	00000413 	.word	0x00000413
    562c:	800fffff 	.word	0x800fffff

00005630 <__clzsi2>:
    5630:	211c      	movs	r1, #28
    5632:	2301      	movs	r3, #1
    5634:	041b      	lsls	r3, r3, #16
    5636:	4298      	cmp	r0, r3
    5638:	d301      	bcc.n	563e <__clzsi2+0xe>
    563a:	0c00      	lsrs	r0, r0, #16
    563c:	3910      	subs	r1, #16
    563e:	0a1b      	lsrs	r3, r3, #8
    5640:	4298      	cmp	r0, r3
    5642:	d301      	bcc.n	5648 <__clzsi2+0x18>
    5644:	0a00      	lsrs	r0, r0, #8
    5646:	3908      	subs	r1, #8
    5648:	091b      	lsrs	r3, r3, #4
    564a:	4298      	cmp	r0, r3
    564c:	d301      	bcc.n	5652 <__clzsi2+0x22>
    564e:	0900      	lsrs	r0, r0, #4
    5650:	3904      	subs	r1, #4
    5652:	a202      	add	r2, pc, #8	; (adr r2, 565c <__clzsi2+0x2c>)
    5654:	5c10      	ldrb	r0, [r2, r0]
    5656:	1840      	adds	r0, r0, r1
    5658:	4770      	bx	lr
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	02020304 	.word	0x02020304
    5660:	01010101 	.word	0x01010101
	...

0000566c <__libc_init_array>:
    566c:	b570      	push	{r4, r5, r6, lr}
    566e:	2600      	movs	r6, #0
    5670:	4d0c      	ldr	r5, [pc, #48]	; (56a4 <__libc_init_array+0x38>)
    5672:	4c0d      	ldr	r4, [pc, #52]	; (56a8 <__libc_init_array+0x3c>)
    5674:	1b64      	subs	r4, r4, r5
    5676:	10a4      	asrs	r4, r4, #2
    5678:	42a6      	cmp	r6, r4
    567a:	d109      	bne.n	5690 <__libc_init_array+0x24>
    567c:	2600      	movs	r6, #0
    567e:	f000 fd79 	bl	6174 <_init>
    5682:	4d0a      	ldr	r5, [pc, #40]	; (56ac <__libc_init_array+0x40>)
    5684:	4c0a      	ldr	r4, [pc, #40]	; (56b0 <__libc_init_array+0x44>)
    5686:	1b64      	subs	r4, r4, r5
    5688:	10a4      	asrs	r4, r4, #2
    568a:	42a6      	cmp	r6, r4
    568c:	d105      	bne.n	569a <__libc_init_array+0x2e>
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	00b3      	lsls	r3, r6, #2
    5692:	58eb      	ldr	r3, [r5, r3]
    5694:	4798      	blx	r3
    5696:	3601      	adds	r6, #1
    5698:	e7ee      	b.n	5678 <__libc_init_array+0xc>
    569a:	00b3      	lsls	r3, r6, #2
    569c:	58eb      	ldr	r3, [r5, r3]
    569e:	4798      	blx	r3
    56a0:	3601      	adds	r6, #1
    56a2:	e7f2      	b.n	568a <__libc_init_array+0x1e>
    56a4:	00006180 	.word	0x00006180
    56a8:	00006180 	.word	0x00006180
    56ac:	00006180 	.word	0x00006180
    56b0:	00006184 	.word	0x00006184

000056b4 <malloc>:
    56b4:	b510      	push	{r4, lr}
    56b6:	4b03      	ldr	r3, [pc, #12]	; (56c4 <malloc+0x10>)
    56b8:	0001      	movs	r1, r0
    56ba:	6818      	ldr	r0, [r3, #0]
    56bc:	f000 f858 	bl	5770 <_malloc_r>
    56c0:	bd10      	pop	{r4, pc}
    56c2:	46c0      	nop			; (mov r8, r8)
    56c4:	20000028 	.word	0x20000028

000056c8 <memcpy>:
    56c8:	2300      	movs	r3, #0
    56ca:	b510      	push	{r4, lr}
    56cc:	429a      	cmp	r2, r3
    56ce:	d100      	bne.n	56d2 <memcpy+0xa>
    56d0:	bd10      	pop	{r4, pc}
    56d2:	5ccc      	ldrb	r4, [r1, r3]
    56d4:	54c4      	strb	r4, [r0, r3]
    56d6:	3301      	adds	r3, #1
    56d8:	e7f8      	b.n	56cc <memcpy+0x4>
	...

000056dc <_free_r>:
    56dc:	b570      	push	{r4, r5, r6, lr}
    56de:	0005      	movs	r5, r0
    56e0:	2900      	cmp	r1, #0
    56e2:	d010      	beq.n	5706 <_free_r+0x2a>
    56e4:	1f0c      	subs	r4, r1, #4
    56e6:	6823      	ldr	r3, [r4, #0]
    56e8:	2b00      	cmp	r3, #0
    56ea:	da00      	bge.n	56ee <_free_r+0x12>
    56ec:	18e4      	adds	r4, r4, r3
    56ee:	0028      	movs	r0, r5
    56f0:	f000 f8e4 	bl	58bc <__malloc_lock>
    56f4:	4a1d      	ldr	r2, [pc, #116]	; (576c <_free_r+0x90>)
    56f6:	6813      	ldr	r3, [r2, #0]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d105      	bne.n	5708 <_free_r+0x2c>
    56fc:	6063      	str	r3, [r4, #4]
    56fe:	6014      	str	r4, [r2, #0]
    5700:	0028      	movs	r0, r5
    5702:	f000 f8dc 	bl	58be <__malloc_unlock>
    5706:	bd70      	pop	{r4, r5, r6, pc}
    5708:	42a3      	cmp	r3, r4
    570a:	d909      	bls.n	5720 <_free_r+0x44>
    570c:	6821      	ldr	r1, [r4, #0]
    570e:	1860      	adds	r0, r4, r1
    5710:	4283      	cmp	r3, r0
    5712:	d1f3      	bne.n	56fc <_free_r+0x20>
    5714:	6818      	ldr	r0, [r3, #0]
    5716:	685b      	ldr	r3, [r3, #4]
    5718:	1841      	adds	r1, r0, r1
    571a:	6021      	str	r1, [r4, #0]
    571c:	e7ee      	b.n	56fc <_free_r+0x20>
    571e:	0013      	movs	r3, r2
    5720:	685a      	ldr	r2, [r3, #4]
    5722:	2a00      	cmp	r2, #0
    5724:	d001      	beq.n	572a <_free_r+0x4e>
    5726:	42a2      	cmp	r2, r4
    5728:	d9f9      	bls.n	571e <_free_r+0x42>
    572a:	6819      	ldr	r1, [r3, #0]
    572c:	1858      	adds	r0, r3, r1
    572e:	42a0      	cmp	r0, r4
    5730:	d10b      	bne.n	574a <_free_r+0x6e>
    5732:	6820      	ldr	r0, [r4, #0]
    5734:	1809      	adds	r1, r1, r0
    5736:	1858      	adds	r0, r3, r1
    5738:	6019      	str	r1, [r3, #0]
    573a:	4282      	cmp	r2, r0
    573c:	d1e0      	bne.n	5700 <_free_r+0x24>
    573e:	6810      	ldr	r0, [r2, #0]
    5740:	6852      	ldr	r2, [r2, #4]
    5742:	1841      	adds	r1, r0, r1
    5744:	6019      	str	r1, [r3, #0]
    5746:	605a      	str	r2, [r3, #4]
    5748:	e7da      	b.n	5700 <_free_r+0x24>
    574a:	42a0      	cmp	r0, r4
    574c:	d902      	bls.n	5754 <_free_r+0x78>
    574e:	230c      	movs	r3, #12
    5750:	602b      	str	r3, [r5, #0]
    5752:	e7d5      	b.n	5700 <_free_r+0x24>
    5754:	6821      	ldr	r1, [r4, #0]
    5756:	1860      	adds	r0, r4, r1
    5758:	4282      	cmp	r2, r0
    575a:	d103      	bne.n	5764 <_free_r+0x88>
    575c:	6810      	ldr	r0, [r2, #0]
    575e:	6852      	ldr	r2, [r2, #4]
    5760:	1841      	adds	r1, r0, r1
    5762:	6021      	str	r1, [r4, #0]
    5764:	6062      	str	r2, [r4, #4]
    5766:	605c      	str	r4, [r3, #4]
    5768:	e7ca      	b.n	5700 <_free_r+0x24>
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	200000b0 	.word	0x200000b0

00005770 <_malloc_r>:
    5770:	2303      	movs	r3, #3
    5772:	b570      	push	{r4, r5, r6, lr}
    5774:	1ccd      	adds	r5, r1, #3
    5776:	439d      	bics	r5, r3
    5778:	3508      	adds	r5, #8
    577a:	0006      	movs	r6, r0
    577c:	2d0c      	cmp	r5, #12
    577e:	d21e      	bcs.n	57be <_malloc_r+0x4e>
    5780:	250c      	movs	r5, #12
    5782:	42a9      	cmp	r1, r5
    5784:	d81d      	bhi.n	57c2 <_malloc_r+0x52>
    5786:	0030      	movs	r0, r6
    5788:	f000 f898 	bl	58bc <__malloc_lock>
    578c:	4a25      	ldr	r2, [pc, #148]	; (5824 <_malloc_r+0xb4>)
    578e:	6814      	ldr	r4, [r2, #0]
    5790:	0021      	movs	r1, r4
    5792:	2900      	cmp	r1, #0
    5794:	d119      	bne.n	57ca <_malloc_r+0x5a>
    5796:	4c24      	ldr	r4, [pc, #144]	; (5828 <_malloc_r+0xb8>)
    5798:	6823      	ldr	r3, [r4, #0]
    579a:	2b00      	cmp	r3, #0
    579c:	d103      	bne.n	57a6 <_malloc_r+0x36>
    579e:	0030      	movs	r0, r6
    57a0:	f000 f844 	bl	582c <_sbrk_r>
    57a4:	6020      	str	r0, [r4, #0]
    57a6:	0029      	movs	r1, r5
    57a8:	0030      	movs	r0, r6
    57aa:	f000 f83f 	bl	582c <_sbrk_r>
    57ae:	1c43      	adds	r3, r0, #1
    57b0:	d12c      	bne.n	580c <_malloc_r+0x9c>
    57b2:	230c      	movs	r3, #12
    57b4:	0030      	movs	r0, r6
    57b6:	6033      	str	r3, [r6, #0]
    57b8:	f000 f881 	bl	58be <__malloc_unlock>
    57bc:	e003      	b.n	57c6 <_malloc_r+0x56>
    57be:	2d00      	cmp	r5, #0
    57c0:	dadf      	bge.n	5782 <_malloc_r+0x12>
    57c2:	230c      	movs	r3, #12
    57c4:	6033      	str	r3, [r6, #0]
    57c6:	2000      	movs	r0, #0
    57c8:	bd70      	pop	{r4, r5, r6, pc}
    57ca:	680b      	ldr	r3, [r1, #0]
    57cc:	1b5b      	subs	r3, r3, r5
    57ce:	d41a      	bmi.n	5806 <_malloc_r+0x96>
    57d0:	2b0b      	cmp	r3, #11
    57d2:	d903      	bls.n	57dc <_malloc_r+0x6c>
    57d4:	600b      	str	r3, [r1, #0]
    57d6:	18cc      	adds	r4, r1, r3
    57d8:	6025      	str	r5, [r4, #0]
    57da:	e003      	b.n	57e4 <_malloc_r+0x74>
    57dc:	428c      	cmp	r4, r1
    57de:	d10e      	bne.n	57fe <_malloc_r+0x8e>
    57e0:	6863      	ldr	r3, [r4, #4]
    57e2:	6013      	str	r3, [r2, #0]
    57e4:	0030      	movs	r0, r6
    57e6:	f000 f86a 	bl	58be <__malloc_unlock>
    57ea:	0020      	movs	r0, r4
    57ec:	2207      	movs	r2, #7
    57ee:	300b      	adds	r0, #11
    57f0:	1d23      	adds	r3, r4, #4
    57f2:	4390      	bics	r0, r2
    57f4:	1ac3      	subs	r3, r0, r3
    57f6:	d0e7      	beq.n	57c8 <_malloc_r+0x58>
    57f8:	425a      	negs	r2, r3
    57fa:	50e2      	str	r2, [r4, r3]
    57fc:	e7e4      	b.n	57c8 <_malloc_r+0x58>
    57fe:	684b      	ldr	r3, [r1, #4]
    5800:	6063      	str	r3, [r4, #4]
    5802:	000c      	movs	r4, r1
    5804:	e7ee      	b.n	57e4 <_malloc_r+0x74>
    5806:	000c      	movs	r4, r1
    5808:	6849      	ldr	r1, [r1, #4]
    580a:	e7c2      	b.n	5792 <_malloc_r+0x22>
    580c:	2303      	movs	r3, #3
    580e:	1cc4      	adds	r4, r0, #3
    5810:	439c      	bics	r4, r3
    5812:	42a0      	cmp	r0, r4
    5814:	d0e0      	beq.n	57d8 <_malloc_r+0x68>
    5816:	1a21      	subs	r1, r4, r0
    5818:	0030      	movs	r0, r6
    581a:	f000 f807 	bl	582c <_sbrk_r>
    581e:	1c43      	adds	r3, r0, #1
    5820:	d1da      	bne.n	57d8 <_malloc_r+0x68>
    5822:	e7c6      	b.n	57b2 <_malloc_r+0x42>
    5824:	200000b0 	.word	0x200000b0
    5828:	200000b4 	.word	0x200000b4

0000582c <_sbrk_r>:
    582c:	2300      	movs	r3, #0
    582e:	b570      	push	{r4, r5, r6, lr}
    5830:	4c06      	ldr	r4, [pc, #24]	; (584c <_sbrk_r+0x20>)
    5832:	0005      	movs	r5, r0
    5834:	0008      	movs	r0, r1
    5836:	6023      	str	r3, [r4, #0]
    5838:	f7fc fc1e 	bl	2078 <_sbrk>
    583c:	1c43      	adds	r3, r0, #1
    583e:	d103      	bne.n	5848 <_sbrk_r+0x1c>
    5840:	6823      	ldr	r3, [r4, #0]
    5842:	2b00      	cmp	r3, #0
    5844:	d000      	beq.n	5848 <_sbrk_r+0x1c>
    5846:	602b      	str	r3, [r5, #0]
    5848:	bd70      	pop	{r4, r5, r6, pc}
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	200000e4 	.word	0x200000e4

00005850 <siprintf>:
    5850:	b40e      	push	{r1, r2, r3}
    5852:	b510      	push	{r4, lr}
    5854:	b09d      	sub	sp, #116	; 0x74
    5856:	a902      	add	r1, sp, #8
    5858:	9002      	str	r0, [sp, #8]
    585a:	6108      	str	r0, [r1, #16]
    585c:	480b      	ldr	r0, [pc, #44]	; (588c <siprintf+0x3c>)
    585e:	2482      	movs	r4, #130	; 0x82
    5860:	6088      	str	r0, [r1, #8]
    5862:	6148      	str	r0, [r1, #20]
    5864:	2001      	movs	r0, #1
    5866:	4240      	negs	r0, r0
    5868:	ab1f      	add	r3, sp, #124	; 0x7c
    586a:	81c8      	strh	r0, [r1, #14]
    586c:	4808      	ldr	r0, [pc, #32]	; (5890 <siprintf+0x40>)
    586e:	cb04      	ldmia	r3!, {r2}
    5870:	00a4      	lsls	r4, r4, #2
    5872:	6800      	ldr	r0, [r0, #0]
    5874:	9301      	str	r3, [sp, #4]
    5876:	818c      	strh	r4, [r1, #12]
    5878:	f000 f884 	bl	5984 <_svfiprintf_r>
    587c:	2300      	movs	r3, #0
    587e:	9a02      	ldr	r2, [sp, #8]
    5880:	7013      	strb	r3, [r2, #0]
    5882:	b01d      	add	sp, #116	; 0x74
    5884:	bc10      	pop	{r4}
    5886:	bc08      	pop	{r3}
    5888:	b003      	add	sp, #12
    588a:	4718      	bx	r3
    588c:	7fffffff 	.word	0x7fffffff
    5890:	20000028 	.word	0x20000028

00005894 <strcat>:
    5894:	0002      	movs	r2, r0
    5896:	b510      	push	{r4, lr}
    5898:	7813      	ldrb	r3, [r2, #0]
    589a:	2b00      	cmp	r3, #0
    589c:	d105      	bne.n	58aa <strcat+0x16>
    589e:	5ccc      	ldrb	r4, [r1, r3]
    58a0:	54d4      	strb	r4, [r2, r3]
    58a2:	3301      	adds	r3, #1
    58a4:	2c00      	cmp	r4, #0
    58a6:	d1fa      	bne.n	589e <strcat+0xa>
    58a8:	bd10      	pop	{r4, pc}
    58aa:	3201      	adds	r2, #1
    58ac:	e7f4      	b.n	5898 <strcat+0x4>

000058ae <strlen>:
    58ae:	2300      	movs	r3, #0
    58b0:	5cc2      	ldrb	r2, [r0, r3]
    58b2:	3301      	adds	r3, #1
    58b4:	2a00      	cmp	r2, #0
    58b6:	d1fb      	bne.n	58b0 <strlen+0x2>
    58b8:	1e58      	subs	r0, r3, #1
    58ba:	4770      	bx	lr

000058bc <__malloc_lock>:
    58bc:	4770      	bx	lr

000058be <__malloc_unlock>:
    58be:	4770      	bx	lr

000058c0 <__ssputs_r>:
    58c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58c2:	688e      	ldr	r6, [r1, #8]
    58c4:	b085      	sub	sp, #20
    58c6:	0007      	movs	r7, r0
    58c8:	000c      	movs	r4, r1
    58ca:	9203      	str	r2, [sp, #12]
    58cc:	9301      	str	r3, [sp, #4]
    58ce:	429e      	cmp	r6, r3
    58d0:	d839      	bhi.n	5946 <__ssputs_r+0x86>
    58d2:	2390      	movs	r3, #144	; 0x90
    58d4:	898a      	ldrh	r2, [r1, #12]
    58d6:	00db      	lsls	r3, r3, #3
    58d8:	421a      	tst	r2, r3
    58da:	d034      	beq.n	5946 <__ssputs_r+0x86>
    58dc:	2503      	movs	r5, #3
    58de:	6909      	ldr	r1, [r1, #16]
    58e0:	6823      	ldr	r3, [r4, #0]
    58e2:	1a5b      	subs	r3, r3, r1
    58e4:	9302      	str	r3, [sp, #8]
    58e6:	6963      	ldr	r3, [r4, #20]
    58e8:	9802      	ldr	r0, [sp, #8]
    58ea:	435d      	muls	r5, r3
    58ec:	0feb      	lsrs	r3, r5, #31
    58ee:	195d      	adds	r5, r3, r5
    58f0:	9b01      	ldr	r3, [sp, #4]
    58f2:	106d      	asrs	r5, r5, #1
    58f4:	3301      	adds	r3, #1
    58f6:	181b      	adds	r3, r3, r0
    58f8:	42ab      	cmp	r3, r5
    58fa:	d900      	bls.n	58fe <__ssputs_r+0x3e>
    58fc:	001d      	movs	r5, r3
    58fe:	0553      	lsls	r3, r2, #21
    5900:	d532      	bpl.n	5968 <__ssputs_r+0xa8>
    5902:	0029      	movs	r1, r5
    5904:	0038      	movs	r0, r7
    5906:	f7ff ff33 	bl	5770 <_malloc_r>
    590a:	1e06      	subs	r6, r0, #0
    590c:	d109      	bne.n	5922 <__ssputs_r+0x62>
    590e:	230c      	movs	r3, #12
    5910:	603b      	str	r3, [r7, #0]
    5912:	2340      	movs	r3, #64	; 0x40
    5914:	2001      	movs	r0, #1
    5916:	89a2      	ldrh	r2, [r4, #12]
    5918:	4240      	negs	r0, r0
    591a:	4313      	orrs	r3, r2
    591c:	81a3      	strh	r3, [r4, #12]
    591e:	b005      	add	sp, #20
    5920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5922:	9a02      	ldr	r2, [sp, #8]
    5924:	6921      	ldr	r1, [r4, #16]
    5926:	f7ff fecf 	bl	56c8 <memcpy>
    592a:	89a3      	ldrh	r3, [r4, #12]
    592c:	4a14      	ldr	r2, [pc, #80]	; (5980 <__ssputs_r+0xc0>)
    592e:	401a      	ands	r2, r3
    5930:	2380      	movs	r3, #128	; 0x80
    5932:	4313      	orrs	r3, r2
    5934:	81a3      	strh	r3, [r4, #12]
    5936:	9b02      	ldr	r3, [sp, #8]
    5938:	6126      	str	r6, [r4, #16]
    593a:	18f6      	adds	r6, r6, r3
    593c:	6026      	str	r6, [r4, #0]
    593e:	6165      	str	r5, [r4, #20]
    5940:	9e01      	ldr	r6, [sp, #4]
    5942:	1aed      	subs	r5, r5, r3
    5944:	60a5      	str	r5, [r4, #8]
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	42b3      	cmp	r3, r6
    594a:	d200      	bcs.n	594e <__ssputs_r+0x8e>
    594c:	001e      	movs	r6, r3
    594e:	0032      	movs	r2, r6
    5950:	9903      	ldr	r1, [sp, #12]
    5952:	6820      	ldr	r0, [r4, #0]
    5954:	f000 faad 	bl	5eb2 <memmove>
    5958:	68a3      	ldr	r3, [r4, #8]
    595a:	2000      	movs	r0, #0
    595c:	1b9b      	subs	r3, r3, r6
    595e:	60a3      	str	r3, [r4, #8]
    5960:	6823      	ldr	r3, [r4, #0]
    5962:	199e      	adds	r6, r3, r6
    5964:	6026      	str	r6, [r4, #0]
    5966:	e7da      	b.n	591e <__ssputs_r+0x5e>
    5968:	002a      	movs	r2, r5
    596a:	0038      	movs	r0, r7
    596c:	f000 fab3 	bl	5ed6 <_realloc_r>
    5970:	1e06      	subs	r6, r0, #0
    5972:	d1e0      	bne.n	5936 <__ssputs_r+0x76>
    5974:	6921      	ldr	r1, [r4, #16]
    5976:	0038      	movs	r0, r7
    5978:	f7ff feb0 	bl	56dc <_free_r>
    597c:	e7c7      	b.n	590e <__ssputs_r+0x4e>
    597e:	46c0      	nop			; (mov r8, r8)
    5980:	fffffb7f 	.word	0xfffffb7f

00005984 <_svfiprintf_r>:
    5984:	b5f0      	push	{r4, r5, r6, r7, lr}
    5986:	b09f      	sub	sp, #124	; 0x7c
    5988:	9002      	str	r0, [sp, #8]
    598a:	9305      	str	r3, [sp, #20]
    598c:	898b      	ldrh	r3, [r1, #12]
    598e:	000f      	movs	r7, r1
    5990:	0016      	movs	r6, r2
    5992:	061b      	lsls	r3, r3, #24
    5994:	d511      	bpl.n	59ba <_svfiprintf_r+0x36>
    5996:	690b      	ldr	r3, [r1, #16]
    5998:	2b00      	cmp	r3, #0
    599a:	d10e      	bne.n	59ba <_svfiprintf_r+0x36>
    599c:	2140      	movs	r1, #64	; 0x40
    599e:	f7ff fee7 	bl	5770 <_malloc_r>
    59a2:	6038      	str	r0, [r7, #0]
    59a4:	6138      	str	r0, [r7, #16]
    59a6:	2800      	cmp	r0, #0
    59a8:	d105      	bne.n	59b6 <_svfiprintf_r+0x32>
    59aa:	230c      	movs	r3, #12
    59ac:	9a02      	ldr	r2, [sp, #8]
    59ae:	3801      	subs	r0, #1
    59b0:	6013      	str	r3, [r2, #0]
    59b2:	b01f      	add	sp, #124	; 0x7c
    59b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b6:	2340      	movs	r3, #64	; 0x40
    59b8:	617b      	str	r3, [r7, #20]
    59ba:	2300      	movs	r3, #0
    59bc:	ad06      	add	r5, sp, #24
    59be:	616b      	str	r3, [r5, #20]
    59c0:	3320      	adds	r3, #32
    59c2:	766b      	strb	r3, [r5, #25]
    59c4:	3310      	adds	r3, #16
    59c6:	76ab      	strb	r3, [r5, #26]
    59c8:	0034      	movs	r4, r6
    59ca:	7823      	ldrb	r3, [r4, #0]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d147      	bne.n	5a60 <_svfiprintf_r+0xdc>
    59d0:	1ba3      	subs	r3, r4, r6
    59d2:	9304      	str	r3, [sp, #16]
    59d4:	d00d      	beq.n	59f2 <_svfiprintf_r+0x6e>
    59d6:	1ba3      	subs	r3, r4, r6
    59d8:	0032      	movs	r2, r6
    59da:	0039      	movs	r1, r7
    59dc:	9802      	ldr	r0, [sp, #8]
    59de:	f7ff ff6f 	bl	58c0 <__ssputs_r>
    59e2:	1c43      	adds	r3, r0, #1
    59e4:	d100      	bne.n	59e8 <_svfiprintf_r+0x64>
    59e6:	e0b5      	b.n	5b54 <_svfiprintf_r+0x1d0>
    59e8:	696a      	ldr	r2, [r5, #20]
    59ea:	9b04      	ldr	r3, [sp, #16]
    59ec:	4694      	mov	ip, r2
    59ee:	4463      	add	r3, ip
    59f0:	616b      	str	r3, [r5, #20]
    59f2:	7823      	ldrb	r3, [r4, #0]
    59f4:	2b00      	cmp	r3, #0
    59f6:	d100      	bne.n	59fa <_svfiprintf_r+0x76>
    59f8:	e0ac      	b.n	5b54 <_svfiprintf_r+0x1d0>
    59fa:	2201      	movs	r2, #1
    59fc:	2300      	movs	r3, #0
    59fe:	4252      	negs	r2, r2
    5a00:	606a      	str	r2, [r5, #4]
    5a02:	a902      	add	r1, sp, #8
    5a04:	3254      	adds	r2, #84	; 0x54
    5a06:	1852      	adds	r2, r2, r1
    5a08:	3401      	adds	r4, #1
    5a0a:	602b      	str	r3, [r5, #0]
    5a0c:	60eb      	str	r3, [r5, #12]
    5a0e:	60ab      	str	r3, [r5, #8]
    5a10:	7013      	strb	r3, [r2, #0]
    5a12:	65ab      	str	r3, [r5, #88]	; 0x58
    5a14:	4e58      	ldr	r6, [pc, #352]	; (5b78 <_svfiprintf_r+0x1f4>)
    5a16:	2205      	movs	r2, #5
    5a18:	7821      	ldrb	r1, [r4, #0]
    5a1a:	0030      	movs	r0, r6
    5a1c:	f000 fa3e 	bl	5e9c <memchr>
    5a20:	1c62      	adds	r2, r4, #1
    5a22:	2800      	cmp	r0, #0
    5a24:	d120      	bne.n	5a68 <_svfiprintf_r+0xe4>
    5a26:	6829      	ldr	r1, [r5, #0]
    5a28:	06cb      	lsls	r3, r1, #27
    5a2a:	d504      	bpl.n	5a36 <_svfiprintf_r+0xb2>
    5a2c:	2353      	movs	r3, #83	; 0x53
    5a2e:	ae02      	add	r6, sp, #8
    5a30:	3020      	adds	r0, #32
    5a32:	199b      	adds	r3, r3, r6
    5a34:	7018      	strb	r0, [r3, #0]
    5a36:	070b      	lsls	r3, r1, #28
    5a38:	d504      	bpl.n	5a44 <_svfiprintf_r+0xc0>
    5a3a:	2353      	movs	r3, #83	; 0x53
    5a3c:	202b      	movs	r0, #43	; 0x2b
    5a3e:	ae02      	add	r6, sp, #8
    5a40:	199b      	adds	r3, r3, r6
    5a42:	7018      	strb	r0, [r3, #0]
    5a44:	7823      	ldrb	r3, [r4, #0]
    5a46:	2b2a      	cmp	r3, #42	; 0x2a
    5a48:	d016      	beq.n	5a78 <_svfiprintf_r+0xf4>
    5a4a:	2000      	movs	r0, #0
    5a4c:	210a      	movs	r1, #10
    5a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a50:	7822      	ldrb	r2, [r4, #0]
    5a52:	3a30      	subs	r2, #48	; 0x30
    5a54:	2a09      	cmp	r2, #9
    5a56:	d955      	bls.n	5b04 <_svfiprintf_r+0x180>
    5a58:	2800      	cmp	r0, #0
    5a5a:	d015      	beq.n	5a88 <_svfiprintf_r+0x104>
    5a5c:	9309      	str	r3, [sp, #36]	; 0x24
    5a5e:	e013      	b.n	5a88 <_svfiprintf_r+0x104>
    5a60:	2b25      	cmp	r3, #37	; 0x25
    5a62:	d0b5      	beq.n	59d0 <_svfiprintf_r+0x4c>
    5a64:	3401      	adds	r4, #1
    5a66:	e7b0      	b.n	59ca <_svfiprintf_r+0x46>
    5a68:	2301      	movs	r3, #1
    5a6a:	1b80      	subs	r0, r0, r6
    5a6c:	4083      	lsls	r3, r0
    5a6e:	6829      	ldr	r1, [r5, #0]
    5a70:	0014      	movs	r4, r2
    5a72:	430b      	orrs	r3, r1
    5a74:	602b      	str	r3, [r5, #0]
    5a76:	e7cd      	b.n	5a14 <_svfiprintf_r+0x90>
    5a78:	9b05      	ldr	r3, [sp, #20]
    5a7a:	1d18      	adds	r0, r3, #4
    5a7c:	681b      	ldr	r3, [r3, #0]
    5a7e:	9005      	str	r0, [sp, #20]
    5a80:	2b00      	cmp	r3, #0
    5a82:	db39      	blt.n	5af8 <_svfiprintf_r+0x174>
    5a84:	9309      	str	r3, [sp, #36]	; 0x24
    5a86:	0014      	movs	r4, r2
    5a88:	7823      	ldrb	r3, [r4, #0]
    5a8a:	2b2e      	cmp	r3, #46	; 0x2e
    5a8c:	d10b      	bne.n	5aa6 <_svfiprintf_r+0x122>
    5a8e:	7863      	ldrb	r3, [r4, #1]
    5a90:	1c62      	adds	r2, r4, #1
    5a92:	2b2a      	cmp	r3, #42	; 0x2a
    5a94:	d13e      	bne.n	5b14 <_svfiprintf_r+0x190>
    5a96:	9b05      	ldr	r3, [sp, #20]
    5a98:	3402      	adds	r4, #2
    5a9a:	1d1a      	adds	r2, r3, #4
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	9205      	str	r2, [sp, #20]
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	db34      	blt.n	5b0e <_svfiprintf_r+0x18a>
    5aa4:	9307      	str	r3, [sp, #28]
    5aa6:	4e35      	ldr	r6, [pc, #212]	; (5b7c <_svfiprintf_r+0x1f8>)
    5aa8:	7821      	ldrb	r1, [r4, #0]
    5aaa:	2203      	movs	r2, #3
    5aac:	0030      	movs	r0, r6
    5aae:	f000 f9f5 	bl	5e9c <memchr>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d006      	beq.n	5ac4 <_svfiprintf_r+0x140>
    5ab6:	2340      	movs	r3, #64	; 0x40
    5ab8:	1b80      	subs	r0, r0, r6
    5aba:	4083      	lsls	r3, r0
    5abc:	682a      	ldr	r2, [r5, #0]
    5abe:	3401      	adds	r4, #1
    5ac0:	4313      	orrs	r3, r2
    5ac2:	602b      	str	r3, [r5, #0]
    5ac4:	7821      	ldrb	r1, [r4, #0]
    5ac6:	2206      	movs	r2, #6
    5ac8:	482d      	ldr	r0, [pc, #180]	; (5b80 <_svfiprintf_r+0x1fc>)
    5aca:	1c66      	adds	r6, r4, #1
    5acc:	7629      	strb	r1, [r5, #24]
    5ace:	f000 f9e5 	bl	5e9c <memchr>
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d046      	beq.n	5b64 <_svfiprintf_r+0x1e0>
    5ad6:	4b2b      	ldr	r3, [pc, #172]	; (5b84 <_svfiprintf_r+0x200>)
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d12f      	bne.n	5b3c <_svfiprintf_r+0x1b8>
    5adc:	6829      	ldr	r1, [r5, #0]
    5ade:	9b05      	ldr	r3, [sp, #20]
    5ae0:	2207      	movs	r2, #7
    5ae2:	05c9      	lsls	r1, r1, #23
    5ae4:	d528      	bpl.n	5b38 <_svfiprintf_r+0x1b4>
    5ae6:	189b      	adds	r3, r3, r2
    5ae8:	4393      	bics	r3, r2
    5aea:	3308      	adds	r3, #8
    5aec:	9305      	str	r3, [sp, #20]
    5aee:	696b      	ldr	r3, [r5, #20]
    5af0:	9a03      	ldr	r2, [sp, #12]
    5af2:	189b      	adds	r3, r3, r2
    5af4:	616b      	str	r3, [r5, #20]
    5af6:	e767      	b.n	59c8 <_svfiprintf_r+0x44>
    5af8:	425b      	negs	r3, r3
    5afa:	60eb      	str	r3, [r5, #12]
    5afc:	2302      	movs	r3, #2
    5afe:	430b      	orrs	r3, r1
    5b00:	602b      	str	r3, [r5, #0]
    5b02:	e7c0      	b.n	5a86 <_svfiprintf_r+0x102>
    5b04:	434b      	muls	r3, r1
    5b06:	3401      	adds	r4, #1
    5b08:	189b      	adds	r3, r3, r2
    5b0a:	2001      	movs	r0, #1
    5b0c:	e7a0      	b.n	5a50 <_svfiprintf_r+0xcc>
    5b0e:	2301      	movs	r3, #1
    5b10:	425b      	negs	r3, r3
    5b12:	e7c7      	b.n	5aa4 <_svfiprintf_r+0x120>
    5b14:	2300      	movs	r3, #0
    5b16:	0014      	movs	r4, r2
    5b18:	200a      	movs	r0, #10
    5b1a:	001a      	movs	r2, r3
    5b1c:	606b      	str	r3, [r5, #4]
    5b1e:	7821      	ldrb	r1, [r4, #0]
    5b20:	3930      	subs	r1, #48	; 0x30
    5b22:	2909      	cmp	r1, #9
    5b24:	d903      	bls.n	5b2e <_svfiprintf_r+0x1aa>
    5b26:	2b00      	cmp	r3, #0
    5b28:	d0bd      	beq.n	5aa6 <_svfiprintf_r+0x122>
    5b2a:	9207      	str	r2, [sp, #28]
    5b2c:	e7bb      	b.n	5aa6 <_svfiprintf_r+0x122>
    5b2e:	4342      	muls	r2, r0
    5b30:	3401      	adds	r4, #1
    5b32:	1852      	adds	r2, r2, r1
    5b34:	2301      	movs	r3, #1
    5b36:	e7f2      	b.n	5b1e <_svfiprintf_r+0x19a>
    5b38:	3307      	adds	r3, #7
    5b3a:	e7d5      	b.n	5ae8 <_svfiprintf_r+0x164>
    5b3c:	ab05      	add	r3, sp, #20
    5b3e:	9300      	str	r3, [sp, #0]
    5b40:	003a      	movs	r2, r7
    5b42:	4b11      	ldr	r3, [pc, #68]	; (5b88 <_svfiprintf_r+0x204>)
    5b44:	0029      	movs	r1, r5
    5b46:	9802      	ldr	r0, [sp, #8]
    5b48:	e000      	b.n	5b4c <_svfiprintf_r+0x1c8>
    5b4a:	bf00      	nop
    5b4c:	9003      	str	r0, [sp, #12]
    5b4e:	9b03      	ldr	r3, [sp, #12]
    5b50:	3301      	adds	r3, #1
    5b52:	d1cc      	bne.n	5aee <_svfiprintf_r+0x16a>
    5b54:	89bb      	ldrh	r3, [r7, #12]
    5b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5b58:	065b      	lsls	r3, r3, #25
    5b5a:	d400      	bmi.n	5b5e <_svfiprintf_r+0x1da>
    5b5c:	e729      	b.n	59b2 <_svfiprintf_r+0x2e>
    5b5e:	2001      	movs	r0, #1
    5b60:	4240      	negs	r0, r0
    5b62:	e726      	b.n	59b2 <_svfiprintf_r+0x2e>
    5b64:	ab05      	add	r3, sp, #20
    5b66:	9300      	str	r3, [sp, #0]
    5b68:	003a      	movs	r2, r7
    5b6a:	4b07      	ldr	r3, [pc, #28]	; (5b88 <_svfiprintf_r+0x204>)
    5b6c:	0029      	movs	r1, r5
    5b6e:	9802      	ldr	r0, [sp, #8]
    5b70:	f000 f87a 	bl	5c68 <_printf_i>
    5b74:	e7ea      	b.n	5b4c <_svfiprintf_r+0x1c8>
    5b76:	46c0      	nop			; (mov r8, r8)
    5b78:	00006140 	.word	0x00006140
    5b7c:	00006146 	.word	0x00006146
    5b80:	0000614a 	.word	0x0000614a
    5b84:	00000000 	.word	0x00000000
    5b88:	000058c1 	.word	0x000058c1

00005b8c <_printf_common>:
    5b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b8e:	0015      	movs	r5, r2
    5b90:	9301      	str	r3, [sp, #4]
    5b92:	688a      	ldr	r2, [r1, #8]
    5b94:	690b      	ldr	r3, [r1, #16]
    5b96:	9000      	str	r0, [sp, #0]
    5b98:	000c      	movs	r4, r1
    5b9a:	4293      	cmp	r3, r2
    5b9c:	da00      	bge.n	5ba0 <_printf_common+0x14>
    5b9e:	0013      	movs	r3, r2
    5ba0:	0022      	movs	r2, r4
    5ba2:	602b      	str	r3, [r5, #0]
    5ba4:	3243      	adds	r2, #67	; 0x43
    5ba6:	7812      	ldrb	r2, [r2, #0]
    5ba8:	2a00      	cmp	r2, #0
    5baa:	d001      	beq.n	5bb0 <_printf_common+0x24>
    5bac:	3301      	adds	r3, #1
    5bae:	602b      	str	r3, [r5, #0]
    5bb0:	6823      	ldr	r3, [r4, #0]
    5bb2:	069b      	lsls	r3, r3, #26
    5bb4:	d502      	bpl.n	5bbc <_printf_common+0x30>
    5bb6:	682b      	ldr	r3, [r5, #0]
    5bb8:	3302      	adds	r3, #2
    5bba:	602b      	str	r3, [r5, #0]
    5bbc:	2706      	movs	r7, #6
    5bbe:	6823      	ldr	r3, [r4, #0]
    5bc0:	401f      	ands	r7, r3
    5bc2:	d027      	beq.n	5c14 <_printf_common+0x88>
    5bc4:	0023      	movs	r3, r4
    5bc6:	3343      	adds	r3, #67	; 0x43
    5bc8:	781b      	ldrb	r3, [r3, #0]
    5bca:	1e5a      	subs	r2, r3, #1
    5bcc:	4193      	sbcs	r3, r2
    5bce:	6822      	ldr	r2, [r4, #0]
    5bd0:	0692      	lsls	r2, r2, #26
    5bd2:	d430      	bmi.n	5c36 <_printf_common+0xaa>
    5bd4:	0022      	movs	r2, r4
    5bd6:	9901      	ldr	r1, [sp, #4]
    5bd8:	3243      	adds	r2, #67	; 0x43
    5bda:	9800      	ldr	r0, [sp, #0]
    5bdc:	9e08      	ldr	r6, [sp, #32]
    5bde:	47b0      	blx	r6
    5be0:	1c43      	adds	r3, r0, #1
    5be2:	d025      	beq.n	5c30 <_printf_common+0xa4>
    5be4:	2306      	movs	r3, #6
    5be6:	6820      	ldr	r0, [r4, #0]
    5be8:	682a      	ldr	r2, [r5, #0]
    5bea:	68e1      	ldr	r1, [r4, #12]
    5bec:	4003      	ands	r3, r0
    5bee:	2500      	movs	r5, #0
    5bf0:	2b04      	cmp	r3, #4
    5bf2:	d103      	bne.n	5bfc <_printf_common+0x70>
    5bf4:	1a8d      	subs	r5, r1, r2
    5bf6:	43eb      	mvns	r3, r5
    5bf8:	17db      	asrs	r3, r3, #31
    5bfa:	401d      	ands	r5, r3
    5bfc:	68a3      	ldr	r3, [r4, #8]
    5bfe:	6922      	ldr	r2, [r4, #16]
    5c00:	4293      	cmp	r3, r2
    5c02:	dd01      	ble.n	5c08 <_printf_common+0x7c>
    5c04:	1a9b      	subs	r3, r3, r2
    5c06:	18ed      	adds	r5, r5, r3
    5c08:	2700      	movs	r7, #0
    5c0a:	42bd      	cmp	r5, r7
    5c0c:	d120      	bne.n	5c50 <_printf_common+0xc4>
    5c0e:	2000      	movs	r0, #0
    5c10:	e010      	b.n	5c34 <_printf_common+0xa8>
    5c12:	3701      	adds	r7, #1
    5c14:	68e3      	ldr	r3, [r4, #12]
    5c16:	682a      	ldr	r2, [r5, #0]
    5c18:	1a9b      	subs	r3, r3, r2
    5c1a:	429f      	cmp	r7, r3
    5c1c:	dad2      	bge.n	5bc4 <_printf_common+0x38>
    5c1e:	0022      	movs	r2, r4
    5c20:	2301      	movs	r3, #1
    5c22:	3219      	adds	r2, #25
    5c24:	9901      	ldr	r1, [sp, #4]
    5c26:	9800      	ldr	r0, [sp, #0]
    5c28:	9e08      	ldr	r6, [sp, #32]
    5c2a:	47b0      	blx	r6
    5c2c:	1c43      	adds	r3, r0, #1
    5c2e:	d1f0      	bne.n	5c12 <_printf_common+0x86>
    5c30:	2001      	movs	r0, #1
    5c32:	4240      	negs	r0, r0
    5c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5c36:	2030      	movs	r0, #48	; 0x30
    5c38:	18e1      	adds	r1, r4, r3
    5c3a:	3143      	adds	r1, #67	; 0x43
    5c3c:	7008      	strb	r0, [r1, #0]
    5c3e:	0021      	movs	r1, r4
    5c40:	1c5a      	adds	r2, r3, #1
    5c42:	3145      	adds	r1, #69	; 0x45
    5c44:	7809      	ldrb	r1, [r1, #0]
    5c46:	18a2      	adds	r2, r4, r2
    5c48:	3243      	adds	r2, #67	; 0x43
    5c4a:	3302      	adds	r3, #2
    5c4c:	7011      	strb	r1, [r2, #0]
    5c4e:	e7c1      	b.n	5bd4 <_printf_common+0x48>
    5c50:	0022      	movs	r2, r4
    5c52:	2301      	movs	r3, #1
    5c54:	321a      	adds	r2, #26
    5c56:	9901      	ldr	r1, [sp, #4]
    5c58:	9800      	ldr	r0, [sp, #0]
    5c5a:	9e08      	ldr	r6, [sp, #32]
    5c5c:	47b0      	blx	r6
    5c5e:	1c43      	adds	r3, r0, #1
    5c60:	d0e6      	beq.n	5c30 <_printf_common+0xa4>
    5c62:	3701      	adds	r7, #1
    5c64:	e7d1      	b.n	5c0a <_printf_common+0x7e>
	...

00005c68 <_printf_i>:
    5c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c6a:	b08b      	sub	sp, #44	; 0x2c
    5c6c:	9206      	str	r2, [sp, #24]
    5c6e:	000a      	movs	r2, r1
    5c70:	3243      	adds	r2, #67	; 0x43
    5c72:	9307      	str	r3, [sp, #28]
    5c74:	9005      	str	r0, [sp, #20]
    5c76:	9204      	str	r2, [sp, #16]
    5c78:	7e0a      	ldrb	r2, [r1, #24]
    5c7a:	000c      	movs	r4, r1
    5c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c7e:	2a6e      	cmp	r2, #110	; 0x6e
    5c80:	d100      	bne.n	5c84 <_printf_i+0x1c>
    5c82:	e08f      	b.n	5da4 <_printf_i+0x13c>
    5c84:	d817      	bhi.n	5cb6 <_printf_i+0x4e>
    5c86:	2a63      	cmp	r2, #99	; 0x63
    5c88:	d02c      	beq.n	5ce4 <_printf_i+0x7c>
    5c8a:	d808      	bhi.n	5c9e <_printf_i+0x36>
    5c8c:	2a00      	cmp	r2, #0
    5c8e:	d100      	bne.n	5c92 <_printf_i+0x2a>
    5c90:	e099      	b.n	5dc6 <_printf_i+0x15e>
    5c92:	2a58      	cmp	r2, #88	; 0x58
    5c94:	d054      	beq.n	5d40 <_printf_i+0xd8>
    5c96:	0026      	movs	r6, r4
    5c98:	3642      	adds	r6, #66	; 0x42
    5c9a:	7032      	strb	r2, [r6, #0]
    5c9c:	e029      	b.n	5cf2 <_printf_i+0x8a>
    5c9e:	2a64      	cmp	r2, #100	; 0x64
    5ca0:	d001      	beq.n	5ca6 <_printf_i+0x3e>
    5ca2:	2a69      	cmp	r2, #105	; 0x69
    5ca4:	d1f7      	bne.n	5c96 <_printf_i+0x2e>
    5ca6:	6821      	ldr	r1, [r4, #0]
    5ca8:	681a      	ldr	r2, [r3, #0]
    5caa:	0608      	lsls	r0, r1, #24
    5cac:	d523      	bpl.n	5cf6 <_printf_i+0x8e>
    5cae:	1d11      	adds	r1, r2, #4
    5cb0:	6019      	str	r1, [r3, #0]
    5cb2:	6815      	ldr	r5, [r2, #0]
    5cb4:	e025      	b.n	5d02 <_printf_i+0x9a>
    5cb6:	2a73      	cmp	r2, #115	; 0x73
    5cb8:	d100      	bne.n	5cbc <_printf_i+0x54>
    5cba:	e088      	b.n	5dce <_printf_i+0x166>
    5cbc:	d808      	bhi.n	5cd0 <_printf_i+0x68>
    5cbe:	2a6f      	cmp	r2, #111	; 0x6f
    5cc0:	d029      	beq.n	5d16 <_printf_i+0xae>
    5cc2:	2a70      	cmp	r2, #112	; 0x70
    5cc4:	d1e7      	bne.n	5c96 <_printf_i+0x2e>
    5cc6:	2220      	movs	r2, #32
    5cc8:	6809      	ldr	r1, [r1, #0]
    5cca:	430a      	orrs	r2, r1
    5ccc:	6022      	str	r2, [r4, #0]
    5cce:	e003      	b.n	5cd8 <_printf_i+0x70>
    5cd0:	2a75      	cmp	r2, #117	; 0x75
    5cd2:	d020      	beq.n	5d16 <_printf_i+0xae>
    5cd4:	2a78      	cmp	r2, #120	; 0x78
    5cd6:	d1de      	bne.n	5c96 <_printf_i+0x2e>
    5cd8:	0022      	movs	r2, r4
    5cda:	2178      	movs	r1, #120	; 0x78
    5cdc:	3245      	adds	r2, #69	; 0x45
    5cde:	7011      	strb	r1, [r2, #0]
    5ce0:	4a6c      	ldr	r2, [pc, #432]	; (5e94 <_printf_i+0x22c>)
    5ce2:	e030      	b.n	5d46 <_printf_i+0xde>
    5ce4:	000e      	movs	r6, r1
    5ce6:	681a      	ldr	r2, [r3, #0]
    5ce8:	3642      	adds	r6, #66	; 0x42
    5cea:	1d11      	adds	r1, r2, #4
    5cec:	6019      	str	r1, [r3, #0]
    5cee:	6813      	ldr	r3, [r2, #0]
    5cf0:	7033      	strb	r3, [r6, #0]
    5cf2:	2301      	movs	r3, #1
    5cf4:	e079      	b.n	5dea <_printf_i+0x182>
    5cf6:	0649      	lsls	r1, r1, #25
    5cf8:	d5d9      	bpl.n	5cae <_printf_i+0x46>
    5cfa:	1d11      	adds	r1, r2, #4
    5cfc:	6019      	str	r1, [r3, #0]
    5cfe:	2300      	movs	r3, #0
    5d00:	5ed5      	ldrsh	r5, [r2, r3]
    5d02:	2d00      	cmp	r5, #0
    5d04:	da03      	bge.n	5d0e <_printf_i+0xa6>
    5d06:	232d      	movs	r3, #45	; 0x2d
    5d08:	9a04      	ldr	r2, [sp, #16]
    5d0a:	426d      	negs	r5, r5
    5d0c:	7013      	strb	r3, [r2, #0]
    5d0e:	4b62      	ldr	r3, [pc, #392]	; (5e98 <_printf_i+0x230>)
    5d10:	270a      	movs	r7, #10
    5d12:	9303      	str	r3, [sp, #12]
    5d14:	e02f      	b.n	5d76 <_printf_i+0x10e>
    5d16:	6820      	ldr	r0, [r4, #0]
    5d18:	6819      	ldr	r1, [r3, #0]
    5d1a:	0605      	lsls	r5, r0, #24
    5d1c:	d503      	bpl.n	5d26 <_printf_i+0xbe>
    5d1e:	1d08      	adds	r0, r1, #4
    5d20:	6018      	str	r0, [r3, #0]
    5d22:	680d      	ldr	r5, [r1, #0]
    5d24:	e005      	b.n	5d32 <_printf_i+0xca>
    5d26:	0640      	lsls	r0, r0, #25
    5d28:	d5f9      	bpl.n	5d1e <_printf_i+0xb6>
    5d2a:	680d      	ldr	r5, [r1, #0]
    5d2c:	1d08      	adds	r0, r1, #4
    5d2e:	6018      	str	r0, [r3, #0]
    5d30:	b2ad      	uxth	r5, r5
    5d32:	4b59      	ldr	r3, [pc, #356]	; (5e98 <_printf_i+0x230>)
    5d34:	2708      	movs	r7, #8
    5d36:	9303      	str	r3, [sp, #12]
    5d38:	2a6f      	cmp	r2, #111	; 0x6f
    5d3a:	d018      	beq.n	5d6e <_printf_i+0x106>
    5d3c:	270a      	movs	r7, #10
    5d3e:	e016      	b.n	5d6e <_printf_i+0x106>
    5d40:	3145      	adds	r1, #69	; 0x45
    5d42:	700a      	strb	r2, [r1, #0]
    5d44:	4a54      	ldr	r2, [pc, #336]	; (5e98 <_printf_i+0x230>)
    5d46:	9203      	str	r2, [sp, #12]
    5d48:	681a      	ldr	r2, [r3, #0]
    5d4a:	6821      	ldr	r1, [r4, #0]
    5d4c:	1d10      	adds	r0, r2, #4
    5d4e:	6018      	str	r0, [r3, #0]
    5d50:	6815      	ldr	r5, [r2, #0]
    5d52:	0608      	lsls	r0, r1, #24
    5d54:	d522      	bpl.n	5d9c <_printf_i+0x134>
    5d56:	07cb      	lsls	r3, r1, #31
    5d58:	d502      	bpl.n	5d60 <_printf_i+0xf8>
    5d5a:	2320      	movs	r3, #32
    5d5c:	4319      	orrs	r1, r3
    5d5e:	6021      	str	r1, [r4, #0]
    5d60:	2710      	movs	r7, #16
    5d62:	2d00      	cmp	r5, #0
    5d64:	d103      	bne.n	5d6e <_printf_i+0x106>
    5d66:	2320      	movs	r3, #32
    5d68:	6822      	ldr	r2, [r4, #0]
    5d6a:	439a      	bics	r2, r3
    5d6c:	6022      	str	r2, [r4, #0]
    5d6e:	0023      	movs	r3, r4
    5d70:	2200      	movs	r2, #0
    5d72:	3343      	adds	r3, #67	; 0x43
    5d74:	701a      	strb	r2, [r3, #0]
    5d76:	6863      	ldr	r3, [r4, #4]
    5d78:	60a3      	str	r3, [r4, #8]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	db5c      	blt.n	5e38 <_printf_i+0x1d0>
    5d7e:	2204      	movs	r2, #4
    5d80:	6821      	ldr	r1, [r4, #0]
    5d82:	4391      	bics	r1, r2
    5d84:	6021      	str	r1, [r4, #0]
    5d86:	2d00      	cmp	r5, #0
    5d88:	d158      	bne.n	5e3c <_printf_i+0x1d4>
    5d8a:	9e04      	ldr	r6, [sp, #16]
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d064      	beq.n	5e5a <_printf_i+0x1f2>
    5d90:	0026      	movs	r6, r4
    5d92:	9b03      	ldr	r3, [sp, #12]
    5d94:	3642      	adds	r6, #66	; 0x42
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	7033      	strb	r3, [r6, #0]
    5d9a:	e05e      	b.n	5e5a <_printf_i+0x1f2>
    5d9c:	0648      	lsls	r0, r1, #25
    5d9e:	d5da      	bpl.n	5d56 <_printf_i+0xee>
    5da0:	b2ad      	uxth	r5, r5
    5da2:	e7d8      	b.n	5d56 <_printf_i+0xee>
    5da4:	6809      	ldr	r1, [r1, #0]
    5da6:	681a      	ldr	r2, [r3, #0]
    5da8:	0608      	lsls	r0, r1, #24
    5daa:	d505      	bpl.n	5db8 <_printf_i+0x150>
    5dac:	1d11      	adds	r1, r2, #4
    5dae:	6019      	str	r1, [r3, #0]
    5db0:	6813      	ldr	r3, [r2, #0]
    5db2:	6962      	ldr	r2, [r4, #20]
    5db4:	601a      	str	r2, [r3, #0]
    5db6:	e006      	b.n	5dc6 <_printf_i+0x15e>
    5db8:	0649      	lsls	r1, r1, #25
    5dba:	d5f7      	bpl.n	5dac <_printf_i+0x144>
    5dbc:	1d11      	adds	r1, r2, #4
    5dbe:	6019      	str	r1, [r3, #0]
    5dc0:	6813      	ldr	r3, [r2, #0]
    5dc2:	8aa2      	ldrh	r2, [r4, #20]
    5dc4:	801a      	strh	r2, [r3, #0]
    5dc6:	2300      	movs	r3, #0
    5dc8:	9e04      	ldr	r6, [sp, #16]
    5dca:	6123      	str	r3, [r4, #16]
    5dcc:	e054      	b.n	5e78 <_printf_i+0x210>
    5dce:	681a      	ldr	r2, [r3, #0]
    5dd0:	1d11      	adds	r1, r2, #4
    5dd2:	6019      	str	r1, [r3, #0]
    5dd4:	6816      	ldr	r6, [r2, #0]
    5dd6:	2100      	movs	r1, #0
    5dd8:	6862      	ldr	r2, [r4, #4]
    5dda:	0030      	movs	r0, r6
    5ddc:	f000 f85e 	bl	5e9c <memchr>
    5de0:	2800      	cmp	r0, #0
    5de2:	d001      	beq.n	5de8 <_printf_i+0x180>
    5de4:	1b80      	subs	r0, r0, r6
    5de6:	6060      	str	r0, [r4, #4]
    5de8:	6863      	ldr	r3, [r4, #4]
    5dea:	6123      	str	r3, [r4, #16]
    5dec:	2300      	movs	r3, #0
    5dee:	9a04      	ldr	r2, [sp, #16]
    5df0:	7013      	strb	r3, [r2, #0]
    5df2:	e041      	b.n	5e78 <_printf_i+0x210>
    5df4:	6923      	ldr	r3, [r4, #16]
    5df6:	0032      	movs	r2, r6
    5df8:	9906      	ldr	r1, [sp, #24]
    5dfa:	9805      	ldr	r0, [sp, #20]
    5dfc:	9d07      	ldr	r5, [sp, #28]
    5dfe:	47a8      	blx	r5
    5e00:	1c43      	adds	r3, r0, #1
    5e02:	d043      	beq.n	5e8c <_printf_i+0x224>
    5e04:	6823      	ldr	r3, [r4, #0]
    5e06:	2500      	movs	r5, #0
    5e08:	079b      	lsls	r3, r3, #30
    5e0a:	d40f      	bmi.n	5e2c <_printf_i+0x1c4>
    5e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e0e:	68e0      	ldr	r0, [r4, #12]
    5e10:	4298      	cmp	r0, r3
    5e12:	da3d      	bge.n	5e90 <_printf_i+0x228>
    5e14:	0018      	movs	r0, r3
    5e16:	e03b      	b.n	5e90 <_printf_i+0x228>
    5e18:	0022      	movs	r2, r4
    5e1a:	2301      	movs	r3, #1
    5e1c:	3219      	adds	r2, #25
    5e1e:	9906      	ldr	r1, [sp, #24]
    5e20:	9805      	ldr	r0, [sp, #20]
    5e22:	9e07      	ldr	r6, [sp, #28]
    5e24:	47b0      	blx	r6
    5e26:	1c43      	adds	r3, r0, #1
    5e28:	d030      	beq.n	5e8c <_printf_i+0x224>
    5e2a:	3501      	adds	r5, #1
    5e2c:	68e3      	ldr	r3, [r4, #12]
    5e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e30:	1a9b      	subs	r3, r3, r2
    5e32:	429d      	cmp	r5, r3
    5e34:	dbf0      	blt.n	5e18 <_printf_i+0x1b0>
    5e36:	e7e9      	b.n	5e0c <_printf_i+0x1a4>
    5e38:	2d00      	cmp	r5, #0
    5e3a:	d0a9      	beq.n	5d90 <_printf_i+0x128>
    5e3c:	9e04      	ldr	r6, [sp, #16]
    5e3e:	0028      	movs	r0, r5
    5e40:	0039      	movs	r1, r7
    5e42:	f7fd fd3f 	bl	38c4 <__aeabi_uidivmod>
    5e46:	9b03      	ldr	r3, [sp, #12]
    5e48:	3e01      	subs	r6, #1
    5e4a:	5c5b      	ldrb	r3, [r3, r1]
    5e4c:	0028      	movs	r0, r5
    5e4e:	7033      	strb	r3, [r6, #0]
    5e50:	0039      	movs	r1, r7
    5e52:	f7fd fcb1 	bl	37b8 <__udivsi3>
    5e56:	1e05      	subs	r5, r0, #0
    5e58:	d1f1      	bne.n	5e3e <_printf_i+0x1d6>
    5e5a:	2f08      	cmp	r7, #8
    5e5c:	d109      	bne.n	5e72 <_printf_i+0x20a>
    5e5e:	6823      	ldr	r3, [r4, #0]
    5e60:	07db      	lsls	r3, r3, #31
    5e62:	d506      	bpl.n	5e72 <_printf_i+0x20a>
    5e64:	6863      	ldr	r3, [r4, #4]
    5e66:	6922      	ldr	r2, [r4, #16]
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc02      	bgt.n	5e72 <_printf_i+0x20a>
    5e6c:	2330      	movs	r3, #48	; 0x30
    5e6e:	3e01      	subs	r6, #1
    5e70:	7033      	strb	r3, [r6, #0]
    5e72:	9b04      	ldr	r3, [sp, #16]
    5e74:	1b9b      	subs	r3, r3, r6
    5e76:	6123      	str	r3, [r4, #16]
    5e78:	9b07      	ldr	r3, [sp, #28]
    5e7a:	aa09      	add	r2, sp, #36	; 0x24
    5e7c:	9300      	str	r3, [sp, #0]
    5e7e:	0021      	movs	r1, r4
    5e80:	9b06      	ldr	r3, [sp, #24]
    5e82:	9805      	ldr	r0, [sp, #20]
    5e84:	f7ff fe82 	bl	5b8c <_printf_common>
    5e88:	1c43      	adds	r3, r0, #1
    5e8a:	d1b3      	bne.n	5df4 <_printf_i+0x18c>
    5e8c:	2001      	movs	r0, #1
    5e8e:	4240      	negs	r0, r0
    5e90:	b00b      	add	sp, #44	; 0x2c
    5e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e94:	00006162 	.word	0x00006162
    5e98:	00006151 	.word	0x00006151

00005e9c <memchr>:
    5e9c:	b2c9      	uxtb	r1, r1
    5e9e:	1882      	adds	r2, r0, r2
    5ea0:	4290      	cmp	r0, r2
    5ea2:	d101      	bne.n	5ea8 <memchr+0xc>
    5ea4:	2000      	movs	r0, #0
    5ea6:	4770      	bx	lr
    5ea8:	7803      	ldrb	r3, [r0, #0]
    5eaa:	428b      	cmp	r3, r1
    5eac:	d0fb      	beq.n	5ea6 <memchr+0xa>
    5eae:	3001      	adds	r0, #1
    5eb0:	e7f6      	b.n	5ea0 <memchr+0x4>

00005eb2 <memmove>:
    5eb2:	b510      	push	{r4, lr}
    5eb4:	4288      	cmp	r0, r1
    5eb6:	d902      	bls.n	5ebe <memmove+0xc>
    5eb8:	188b      	adds	r3, r1, r2
    5eba:	4298      	cmp	r0, r3
    5ebc:	d308      	bcc.n	5ed0 <memmove+0x1e>
    5ebe:	2300      	movs	r3, #0
    5ec0:	429a      	cmp	r2, r3
    5ec2:	d007      	beq.n	5ed4 <memmove+0x22>
    5ec4:	5ccc      	ldrb	r4, [r1, r3]
    5ec6:	54c4      	strb	r4, [r0, r3]
    5ec8:	3301      	adds	r3, #1
    5eca:	e7f9      	b.n	5ec0 <memmove+0xe>
    5ecc:	5c8b      	ldrb	r3, [r1, r2]
    5ece:	5483      	strb	r3, [r0, r2]
    5ed0:	3a01      	subs	r2, #1
    5ed2:	d2fb      	bcs.n	5ecc <memmove+0x1a>
    5ed4:	bd10      	pop	{r4, pc}

00005ed6 <_realloc_r>:
    5ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ed8:	0007      	movs	r7, r0
    5eda:	000d      	movs	r5, r1
    5edc:	0016      	movs	r6, r2
    5ede:	2900      	cmp	r1, #0
    5ee0:	d105      	bne.n	5eee <_realloc_r+0x18>
    5ee2:	0011      	movs	r1, r2
    5ee4:	f7ff fc44 	bl	5770 <_malloc_r>
    5ee8:	0004      	movs	r4, r0
    5eea:	0020      	movs	r0, r4
    5eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eee:	2a00      	cmp	r2, #0
    5ef0:	d103      	bne.n	5efa <_realloc_r+0x24>
    5ef2:	f7ff fbf3 	bl	56dc <_free_r>
    5ef6:	0034      	movs	r4, r6
    5ef8:	e7f7      	b.n	5eea <_realloc_r+0x14>
    5efa:	f000 f812 	bl	5f22 <_malloc_usable_size_r>
    5efe:	002c      	movs	r4, r5
    5f00:	4286      	cmp	r6, r0
    5f02:	d9f2      	bls.n	5eea <_realloc_r+0x14>
    5f04:	0031      	movs	r1, r6
    5f06:	0038      	movs	r0, r7
    5f08:	f7ff fc32 	bl	5770 <_malloc_r>
    5f0c:	1e04      	subs	r4, r0, #0
    5f0e:	d0ec      	beq.n	5eea <_realloc_r+0x14>
    5f10:	0029      	movs	r1, r5
    5f12:	0032      	movs	r2, r6
    5f14:	f7ff fbd8 	bl	56c8 <memcpy>
    5f18:	0029      	movs	r1, r5
    5f1a:	0038      	movs	r0, r7
    5f1c:	f7ff fbde 	bl	56dc <_free_r>
    5f20:	e7e3      	b.n	5eea <_realloc_r+0x14>

00005f22 <_malloc_usable_size_r>:
    5f22:	1f0b      	subs	r3, r1, #4
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	1f18      	subs	r0, r3, #4
    5f28:	2b00      	cmp	r3, #0
    5f2a:	da01      	bge.n	5f30 <_malloc_usable_size_r+0xe>
    5f2c:	580b      	ldr	r3, [r1, r0]
    5f2e:	18c0      	adds	r0, r0, r3
    5f30:	4770      	bx	lr
    5f32:	0000      	movs	r0, r0
    5f34:	682f2e2e 	.word	0x682f2e2e
    5f38:	702f6c70 	.word	0x702f6c70
    5f3c:	2f74726f 	.word	0x2f74726f
    5f40:	5f6c7068 	.word	0x5f6c7068
    5f44:	6f697067 	.word	0x6f697067
    5f48:	7361625f 	.word	0x7361625f
    5f4c:	00682e65 	.word	0x00682e65
    5f50:	682f2e2e 	.word	0x682f2e2e
    5f54:	702f6c70 	.word	0x702f6c70
    5f58:	70682f6d 	.word	0x70682f6d
    5f5c:	6d705f6c 	.word	0x6d705f6c
    5f60:	7361625f 	.word	0x7361625f
    5f64:	00682e65 	.word	0x00682e65
    5f68:	682f2e2e 	.word	0x682f2e2e
    5f6c:	732f6c61 	.word	0x732f6c61
    5f70:	682f6372 	.word	0x682f6372
    5f74:	695f6c61 	.word	0x695f6c61
    5f78:	6d5f6332 	.word	0x6d5f6332
    5f7c:	6e79735f 	.word	0x6e79735f
    5f80:	00632e63 	.word	0x00632e63
    5f84:	682f2e2e 	.word	0x682f2e2e
    5f88:	732f6c61 	.word	0x732f6c61
    5f8c:	682f6372 	.word	0x682f6372
    5f90:	695f6c61 	.word	0x695f6c61
    5f94:	00632e6f 	.word	0x00632e6f
    5f98:	682f2e2e 	.word	0x682f2e2e
    5f9c:	732f6c61 	.word	0x732f6c61
    5fa0:	682f6372 	.word	0x682f6372
    5fa4:	755f6c61 	.word	0x755f6c61
    5fa8:	74726173 	.word	0x74726173
    5fac:	6e79735f 	.word	0x6e79735f
    5fb0:	00632e63 	.word	0x00632e63
    5fb4:	682f2e2e 	.word	0x682f2e2e
    5fb8:	632f6c70 	.word	0x632f6c70
    5fbc:	2f65726f 	.word	0x2f65726f
    5fc0:	5f6c7068 	.word	0x5f6c7068
    5fc4:	65726f63 	.word	0x65726f63
    5fc8:	70306d5f 	.word	0x70306d5f
    5fcc:	5f73756c 	.word	0x5f73756c
    5fd0:	65736162 	.word	0x65736162
    5fd4:	0000632e 	.word	0x0000632e
    5fd8:	00002166 	.word	0x00002166
    5fdc:	00002144 	.word	0x00002144
    5fe0:	00002122 	.word	0x00002122
    5fe4:	00002100 	.word	0x00002100
    5fe8:	000020de 	.word	0x000020de
    5fec:	00002252 	.word	0x00002252
    5ff0:	00002230 	.word	0x00002230
    5ff4:	0000221c 	.word	0x0000221c
    5ff8:	000021fe 	.word	0x000021fe
    5ffc:	000021e6 	.word	0x000021e6
    6000:	682f2e2e 	.word	0x682f2e2e
    6004:	732f6c70 	.word	0x732f6c70
    6008:	6f637265 	.word	0x6f637265
    600c:	70682f6d 	.word	0x70682f6d
    6010:	65735f6c 	.word	0x65735f6c
    6014:	6d6f6372 	.word	0x6d6f6372
    6018:	0000632e 	.word	0x0000632e

0000601c <sercomspi_regs>:
	...
    602c:	504d4554 6425203a 00000000 00006425     TEMP: %d....%d..
    603c:	0000002e 0000202c 203a4852 00006425     ...., ..RH: %d..
    604c:	00202c25 53455250 25203a53 00000064     %, .PRESS: %d...
    605c:	00000a0d 00004338 0000431a 000042d4     ....8C...C...B..
    606c:	000041f2 000042d4 0000430c 000042d4     .A...B...C...B..
    607c:	000041f2 0000431a 0000431a 0000430c     .A...C...C...C..
    608c:	000041f2 000041ea 000041ea 000041ea     .A...A...A...A..
    609c:	00004550 00004b98 00004a58 00004a58     PE...K..XJ..XJ..
    60ac:	00004a54 00004b70 00004b70 00004b62     TJ..pK..pK..bK..
    60bc:	00004a54 00004b70 00004b62 00004b70     TJ..pK..bK..pK..
    60cc:	00004a54 00004b78 00004b78 00004b78     TJ..xK..xK..xK..
    60dc:	00004d7c                                |M..

000060e0 <__sf_fake_stderr>:
	...

00006100 <__sf_fake_stdin>:
	...

00006120 <__sf_fake_stdout>:
	...
    6140:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6150:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6160:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6170:	00006665                                ef..

00006174 <_init>:
    6174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6176:	46c0      	nop			; (mov r8, r8)
    6178:	bcf8      	pop	{r3, r4, r5, r6, r7}
    617a:	bc08      	pop	{r3}
    617c:	469e      	mov	lr, r3
    617e:	4770      	bx	lr

00006180 <__init_array_start>:
    6180:	000000cd 	.word	0x000000cd

00006184 <_fini>:
    6184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	bcf8      	pop	{r3, r4, r5, r6, r7}
    618a:	bc08      	pop	{r3}
    618c:	469e      	mov	lr, r3
    618e:	4770      	bx	lr

00006190 <__fini_array_start>:
    6190:	000000a5 	.word	0x000000a5
